<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: kernel | kk Blog]]></title>
<link href="http://abcdxyzk.github.io/tags/kernel/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2014-11-18T18:18:17+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[内核编译模块]]></title>
<link href="http://abcdxyzk.github.io/blog/2013/06/06/kernel-mod-compiler/"/>
<updated>2013-06-06T14:28:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2013/06/06/kernel-mod-compiler</id>
<content type="html"><![CDATA[<pre><code>    /*filename: test.c*/
    #include &lt;linux/init.h&gt;
    #include &lt;linux/kernel.h&gt;
    #include &lt;linux/module.h&gt;

    staticintdummy_init(void)
    {
        printk("hello,world.\n");
        return0;
    }
    staticvoiddummy_exit(void)
    {
        return;
    }

    module_init(dummy_init);
    module_exit(dummy_exit);

    MODULE_LICENSE("GPL")
</code></pre>

<p>执行如下命令：
<code>
    $ gcc -c -O2 -DMODULE -D__KERNEL__ -I/usr/src/linux test.c
    $ insmod test.o
</code>
No module found in object<br/>
insmod: error inserting &lsquo;test.o&rsquo;: -1 Invalid module format</p>

<p>正确的做法是写一个Makefile,由内核的Kbuild来帮你编译。<br/>
<code>
    $ cat Makefile
    obj-m :=test.o
    KDIR :=/lib/modules/$(shell uname -r)/build
    PWD :=$(shell pwd)
    default:
        $(MAKE)-C $(KDIR)SUBDIRS=$(PWD)modules
</code>
执行如下命令：
<code>
    $make
    make -C /lib/modules/2.6.5-1.358/build SUBDIRS=/test modules
    make[1]:Entering directory `/lib/modules/2.6.5-1.358/build'
      CC [M]  /test/modinject/test.o
      Building modules, stage 2.
      MODPOST
      CC      /test/modinject/test.mod.o
      LD [M]  /test/modinject/test.ko
    make[1]: Leaving directory `/lib/modules/2.6.5-1.358/build'
    $ls -l
    -rw-r--r--1 root root   268 Jan  7 08:31 test.c
    -rw-r--r--1 root root  2483 Jan  8 09:19 test.ko
    -rw-r--r--1 root root   691 Jan  8 09:19 test.mod.c
    -rw-r--r--1 root root  1964 Jan  8 09:19 test.mod.o
    -rw-r--r--1 root root  1064 Jan  8 09:19 test.o
</code>
其实上边的test.o就是用gcc生成的test.o,而test.ko是使用下列命令来生成的。
<code>
    $ld -m elf_i386  -r -o test.ko test.o  test.mod.o
</code></p>

<p>再来看看test.mod.c，它是由/usr/src/linux/scripts/modpost.c来生成的。
&#8220;`
    $ cat test.mod.c
    #include &lt;linux/module.h>
    #include &lt;linux/vermagic.h>
    #include &lt;linux/compiler.h></p>

<pre><code>MODULE_INFO(vermagic,VERMAGIC_STRING);
#undef unix

struct module __this_module
__attribute__((section(".gnu.linkonce.this_module")))={
.name =__stringify(KBUILD_MODNAME),
.init =init_module,
#ifdef CONFIG_MODULE_UNLOAD

.exit=cleanup_module,
#endif

};
static const struct modversion_info ____versions[]
__attribute_used__
__attribute__((section("__versions")))={
    {0,"cleanup_module"},
    {0,"init_module"},
    {0,"struct_module"},
    {0,"printk"},
};
static const char __module_depends[]
__attribute_used__
__attribute__((section(".modinfo")))=
"depends=";
</code></pre>

<p>&#8220;`
可见，test.mod.o只是产生了几个ELF的节，分别是modinfo,  .gun.linkonce.this_module(用于重定位，引进了rel.gnu.linkonce.this_module),  __versions。而test.ko是test.o和test.mod.o合并的结果。</p>
]]></content>
</entry>

</feed>
