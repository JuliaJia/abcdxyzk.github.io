<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: algorithm | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/algorithm/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2014-11-25T00:55:30+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[树状数组]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/11/16/alg-bit/"/>
<updated>2014-11-16T21:19:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/11/16/alg-bit</id>
<content type="html"><![CDATA[<p>大体上可以分为两种:</p>

<h4>一</h4>

<p>每次修改的是一个点，所求的是关于某段区间；<br/>
这种情况最好办；比如说poj2352 stars；求每个点前面比他小的点的个数；<br/>
只用设置数组a[],先全是0，然后有某个点就依次修改，并以此统计；<br/>
这一种是最基本的向上修改，向下统计；<br/>
<code>
    int lowbit(int x) {
        return x&amp;(-x);
    }
    void update(int x,int num) {
        while(x&lt;=N) {
             d[x]+=num;
             x+=lowbit(x);
         }
    }
    int getSum(int x) {
        int s=0;
        while(x&gt;0) {
             s+=d[x];
             x-=lowbit(x);
         }
        return s;
    }
</code></p>

<!--more-->


<h4>二</h4>

<p>每次修改的是一个区间，所求的值是关于某个点的；<br/>
代表的典型题目是HOJ1556 color the ball；<br/>
这个题是每次修改了一整个区间，最后求的是每个点修改的次数；<br/>
这个需要将上面的函数，稍加修改；<br/>
对于[s,t]，要向下修改，将它的区间[0, t]都加一遍update(t)；再向下修改，把不必要的区间[0, s)再减去update(s-1)；
<code>
    void update(int x,int num) {
        while(x&gt;0) {
             d[x]+=num;
             x-=lowbit(x);
         }
    }
    int getSum(int x) {
        int s=0;
        while(x&lt;=N) {
             s+=d[x];
             x+=lowbit(x);
         }
        return s;
    }
</code></p>

<h5>注意</h5>

<div style="color:red">
对于一，可以用于计算统计子树；</br>
对于二，可以用于计算统计树上某个节点的所有祖先节点
</div>


<h4>poj3321</h4>

<p>这题难的不是树状数组，主要是映射到树状数组。<br/>
建树，然后dfs一次就可以算出对某个节点它的第一个下标(在树状数组中)和最后一个下标。那个更改的时候就用这两个下标就行了。<br/>
<img src="/images/alg/20141116.png" alt="" /><br/>
类似于将树向右倾斜，dfs建好树后c子树的第一个下标是4，最后一个下标是7。统计子树时只要sum(7)-sum(4-1)</p>

<h4>foj2176</h4>

<p>是poj3321加强版，一样的建树，但是节点要存k个值，然后update和sum的时候注意取和dep的差值，注意update减去val时的dep不要取错，update(le[i], dep[ri[i]], -val);</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;vector&gt;
    using namespace std;

    int n,m,mod;
    vector&lt;int&gt; tr[50009];
    int pre[50009];
    int s[50009][5];
    int dep[50009];
    int now, le[50009], ri[50009];

    int lowbit(int x)
    {
        return x&amp;(-x);
    }

    void update(int x, int de, int v)
    {
        int i;
        while (x &gt; 0) {
            i = (dep[x]-de+mod*1000000)%mod;
            s[x][i%mod] += v;
            x -= lowbit(x);
        }
    }

    int sum(int x, int de)
    {
        int i, j, val[5], ret;
        for (i=0;i&lt;mod;i++) val[i] = 0;
        while (x &lt;= now) {
            j = i = (de-dep[x]+mod*1000000)%mod;
            for (;i&lt;j+mod;i++)
                val[i%mod] += s[x][i-j];
            x += lowbit(x);
        }
        ret = 0;
        for (i=0;i&lt;mod;i++) ret += (i+1)*val[i];
        return ret;
    }

    void dfs(int k, int d)
    {
        int i;
        le[k] = now;
        for (i=0;i&lt;tr[k].size();i++)
            dfs(tr[k][i], d+1);
        now++;
        ri[k] = now;
        dep[now] = d;
    }

    int main()
    {
        int i,j,k,l,T,cas=0;
        scanf("%d", &amp;T);
        while (T--)
        {
            cas++;
            printf("Case#%d:\n", cas);
            scanf("%d %d %d", &amp;n, &amp;m, &amp;mod);
            for (i=1;i&lt;=n;i++) tr[i].clear();
            for (i=1;i&lt;n;i++) {
                scanf("%d %d", &amp;j, &amp;k);
                pre[k] = j;
                tr[j].push_back(k);
            }
            for (i=1;i&lt;=n;i++) if (pre[i] == 0) break;
            now = 0;
            dfs(i, 0);
            for (i=0;i&lt;=now;i++)
                for (j=0;j&lt;mod;j++) s[i][j] = 0;
            while (m--) {
                scanf("%d", &amp;l);
                if (l == 1) {
                    scanf("%d %d", &amp;j, &amp;k);
                    update(ri[j], dep[ri[j]], k);
                    update(le[j], dep[ri[j]], -k);
                } else {
                    scanf("%d", &amp;j);
                    k = sum(ri[j], dep[ri[j]]);
                    printf("%d\n", k);
                }
            }
        }
        return 0;
    }
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[数A到数B之间的统计]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/11/03/alg-A-to-B-count/"/>
<updated>2014-11-03T18:18:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/11/03/alg-A-to-B-count</id>
<content type="html"><![CDATA[<p><a href="http://acm.fzu.edu.cn/problem.php?pid=1896">Problem 1896 神奇的魔法数</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Accept: 98    Submit: 307
</span><span class='line'>Time Limit: 1000 mSec    Memory Limit : 32768 KB&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Problem Description&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;John定义了一种“神奇的魔法数”。 不含前导零且相邻两个数字之差至少为m的正整数被称为“神奇的魔法数”。特别的，对于任意的m，数字1..9都是“神奇的魔法数”。
</span><span class='line'>John想知道，对于给定的m，在正整数a和b之间，包括a和b，总共有多少个“神奇的魔法数”？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Input&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第一行一个数字T（1&lt;=T&lt;=100），表示测试数据组数。
</span><span class='line'>接下来T行，每行代表一组测试数据，包括三个整数a,b,m。（1&lt;=a&lt;=b&lt;=2,000,000,000, 0&lt;=m&lt;=9）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Output&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于每组测试数据，输出一行表示“神奇的魔法数”的个数。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sample Input&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;7 1 10 2 1 20 3 1 100 0 10 20 4 20 30 5 1 10 9 11 100 9&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sample Output&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;9 15 100 5 3 9 1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Source福州大学第七届程序设计竞赛</span></code></pre></td></tr></table></div></figure></p>

<pre><code>    #include &lt;stdio.h&gt;

    int n,m,d,dp[13][13],sum[13],dn[13],dm[13];


    // DFS的时候这两个地方根据不同要求写。
    int dfs(int da[], int dep, int all)
    {
        int i,j,ret=0;
        if (dep == 0) return 1;
        for (i=0;i&lt;da[dep];i++)
        {
                if (all &gt; 0 || i &gt; 0) {
                        if (all == 0 || i-da[dep+1]&gt;=d || i-da[dep+1]&lt;=-d)
                                ret += dp[dep][i];
                } else
                        ret += sum[dep-1];
        }
        if (all == 0 || da[dep]-da[dep+1]&gt;=d || da[dep]-da[dep+1]&lt;=-d)
                ret += dfs(da, dep-1, all+da[dep]);
        return ret;
    }

    int main()
    {
        int i,j,k,l,T;
        scanf("%d", &amp;T);
        while (T--)
        {
                scanf("%d %d %d", &amp;m, &amp;n, &amp;d);
                for (i=0;i&lt;13;i++)
                        for (j=0;j&lt;13;j++) dp[i][j] = 0;
                sum[0] = 0; sum[1] = 9;
                for (i=0;i&lt;10;i++) dp[1][i] = 1;
                for (i=2;i&lt;13;i++) {
                        sum[i] = sum[i-1];
                        for (j=0;j&lt;10;j++) {
                                for (k=0;k&lt;10;k++)
                                        if (j-k&gt;=d || j-k&lt;=-d)
                                                dp[i][j] += dp[i-1][k];
                                if (j &gt; 0)
                                        sum[i] += dp[i][j];
                        }
                }
    //                for (i=0;i&lt;=2;i++)
    //                        for (j=0;j&lt;10;j++) printf("%d %d %d\n", i, j, dp[i][j]);
                i = 1; k = n;
                while (i &lt; 13) {
                        dn[i] = k % 10; k /= 10;
                        i++;
                }
                i = 1; k = m-1;
                while (i &lt; 13) {
                        dm[i] = k % 10; k /= 10;
                        i++;
                }
                n = dfs(dn, 11, 0);
                if (m == 1)
                        m = 0;
                else
                        m = dfs(dm, 11, 0);
                printf("%d\n", n-m);
        }
        return 0;
    }
</code></pre>

<h4><a href="http://poj.org/problem?id=3286">How many 0&rsquo;s?</a></h4>

<pre><code>Time Limit: 1000MS
Memory Limit: 65536KTotal Submissions: 2997
Accepted: 1603

Description

A Benedict monk No.16 writes down the decimal representations of all natural numbers between and including m and n, m ≤ n. How many 0's will he write down?

Input

Input consists of a sequence of lines. Each line contains two unsigned 32-bit integers m and n, m ≤ n. The last line of input has the value of m negative and this line should not be processed.

Output

For each line of input print one line of output with one integer number giving the number of 0's written down by the monk.

Sample Input

10 11
100 200
0 500
1234567890 2345678901
0 4294967295
-1 -1

Sample Output

1
22
92
987654304
3825876150

Source

Waterloo Local Contest, 2006.5.27
</code></pre>

<pre><code>    import java.util.*;
    import java.math.*;
    import java.io.*;

    public class Main {
        static long val,n,m,dp[][]=new long[13][13],a[]=new long[13],dn[]=new long[13], dm[]=new long[13], sum[]=new long[13];
        static long dfs(long dnm[], int dep, long all)
        {
            int i, j, k;
            long ret=0;
            if (dep == 0) return 0;
            for (i=0;i&lt;dnm[dep];i++) {
                if (all &gt; 0 || i &gt; 0)
                    ret += dp[dep][i]; // 需要计算前导0
                else
                    ret += sum[dep-1]; // 不需要计算前导0
            }
            if (all &gt; 0 &amp;&amp; dnm[dep] == 0)
                ret += val % a[dep] + 1;
            ret += dfs(dnm, dep-1, all+dnm[dep]);
            return ret;
        }

        public static void main(String[] args) {
            int i,j,k,l;
            Scanner cin = new Scanner(System.in);
            a[1] = 10;
            for (i=2;i&lt;13;i++) a[i] = a[i-1]*10;
            for (i=0;i&lt;13;i++)
                for (j=0;j&lt;13;j++) dp[i][j] = 0;
            dp[1][0] = 1;
            sum[0] = sum[1] = 0;
            for (i=2;i&lt;13;i++) {
                sum[i] = sum[i-1];
                for (j=0;j&lt;10;j++) {
                    for (k=0;k&lt;10;k++)
                        dp[i][j] += dp[i-1][k];
                    dp[i][j] += j==0 ? a[i-1] : 0;
                    if (j &gt; 0)
                        sum[i] += dp[i][j];
                }
            }
            while (true) {
                m = cin.nextLong();
                n = cin.nextLong();
                if (m == -1 || n == -1) break;
                for (i=0;i&lt;13;i++) dn[i] = dm[i] = 0;
                i = 1;
                val = n;
                while (val &gt; 0) {
                    dn[i] = val % 10;
                    val /= 10;
                    i++;
                }
                i = 1;
                val = m-1;
                while (val &gt; 0) {
                    dm[i] = val % 10;
                    val /= 10;
                    i++;
                }
                val = n;
                n = dfs(dn, 12, 0) + 1; // 0 还有一个0
                val = m-1;
                m = dfs(dm, 12, 0) + 1;
                if (val &lt; 0) m = 0;
                System.out.println(n-m);
            }
        }
    }
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[两个数只出现一次]]></title>
<link href="http://abcdxyzk.github.io/blog/2012/11/12/alg-2num-appear-once/"/>
<updated>2012-11-12T16:51:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2012/11/12/alg-2num-appear-once</id>
<content type="html"><![CDATA[<h4>problem</h4>

<p>一个数组，其中只有两个数只出现一次，其余数皆出现偶数次。<br/>
设计Time: O(n) 的算法得出那个只出现一次的数。</p>

<h4>answer</h4>

<p>再因为a和b不等，那么a<sup>b</sup>必然不为0。<br/>
那么a<sup>b</sup>这个数上面必然能够找到一个二进制位是1<br/>
在这个二进制位上，a和b不等。<br/>
根据这个二进制位，将各元素中在这位上为1的分派到左边，为0的分派到右边，形成两个子数组。</p>

<p>可以证明，<br/>
1）这两个数组分别包含a和b。<br/>
2）每个数组中除了a或b之外的所有元素都是成对出现的。</p>
]]></content>
</entry>

</feed>
