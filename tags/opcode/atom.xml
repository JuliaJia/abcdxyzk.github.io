<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: opcode | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/opcode/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2014-12-05T18:48:44+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[深入浅出指令编码之三：64位计算]]></title>
<link href="http://abcdxyzk.github.io/blog/2013/12/23/assembly-opcode/"/>
<updated>2013-12-23T17:55:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2013/12/23/assembly-opcode</id>
<content type="html"><![CDATA[<p><a href="http://www.pediy.com/kssd/pediy10/77824.html">http://www.pediy.com/kssd/pediy10/77824.html</a></p>

<p>  AMD 在x86体系的32位计算扩展为64位计算，这是通过什么来实现的？它是怎样设计的？具体细节是什么？这就是这一节要讲解的。</p>

<h4>一、硬件编程资源</h4>

<p>　　了解现在processor提供编程资源是很重要的，对要进一步学习提供材料，下面分别讲解x86的编程资源和x64的编程资源。</p>

<h5>1、x86的32位编程资源</h5>

<pre><code>●  8个32位通用寄存器：EAX、ECX、EDX、EBX、ESP、EBP、ESI、EDI
　　　这些寄存器还可分解为8个8位寄存器：AL、CL、DL、BL、AH、CH、DH、BH
　　　和8个16位寄存器：AX、CX、DX、BX、SP、BP、SI、DI
●  6个段寄存器：ES、CS、SS、DS、FS、GS
●  32位的EFLAGS 标志位寄存器
●  32位的指令指针寄存器EIP
●  8个64位MMX寄存器
●  8个128位XMM寄存器
●  还有就是32位的寻址空间（Virtual Address Space）
</code></pre>

<h5>2、x64的64位编程资源</h5>

<pre><code>●  32位通用寄存器被扩展至64位，除了原有的8个寄存器，新增8个寄存器，共16个通用寄存器：RAX、RCX、RDX、RBX、RSP、RBP、RSI、RDI、R8、R9、R10、R11、R12、R13、R14、R15
●  保留了原有的6个寄存器，但是作用被限制
●  32位的标志寄存器被扩展为64位的标志寄存器RELAGS
●  8个64位MMX寄存器不变
●  新增8个XMM寄存器，共16个XMM寄存器
●  还有就是64位的寻址空间（Virtaul Address Space）
</code></pre>

<h4>二、寄存器编码（或者说ID值）</h4>

<pre><code>●  16个64位通用寄存器是： 0000 ~ 1111，也就是：0 ~ 15
　　　　8个32位通用寄存器是：　000 ~ 111 也就是：0 ~ 7
●  6个段寄存器的编码是：000 ~ 101　也就是：0 ~ 5
●  MMX寄存器编码是： 000 ~ 111　也就是：0 ~ 7
●  16个XMM寄存器编码是： 0000 ~ 1111 也就是：0 ~ 15
　　　　8个XMM寄存器编码是：000 ~ 111 也就是：0 ~ 7
</code></pre>

<p>所谓寄存器编码是寄存器对应的二进制编码，按顺序来定义，看下面的表格：</p>

<pre><code>RAX/ES/MMX0/XMM0　-&gt;  0000
RCX/CS/MMX1/XMM1  -&gt;  0001
RDX/SS/MMX2/XMM2  -&gt;  0010
RBX/DS/MMX3/XMM3  -&gt;  0011
RSP/FS/MMX4/XMM4   -&gt;  0100
RBP/GS/MMX5/XMM5  -&gt;  0101
RSI/MMX6/XMM6      -&gt;  0110
RDI/MMX7/XMM7     -&gt;  0111
R8/XMM8 　 -&gt;  1000
R9/XMM9 　 -&gt;  1001
R10/XMM10  -&gt;  1010
R11/XMM11  -&gt;  1011
R12/XMM12  -&gt;  1100
R13/XMM13  -&gt;  1101
R14/XMM14  -&gt;  1110
R15/XMM15  -&gt;  1111
</code></pre>

<p>  RAX ~ RDI　与　EAX ~ EDI　的编码是相同的，这里有一个情况是，EAX ~ EDI的编码是3位，为什么RAX~RDI的编码却是4位呢？这就是下面要讲到的REX prefix会将寄存器编码进行扩展。</p>

<h4>三、  开启64位计算的基石（REX prefix）</h4>

<p>　　AMD64体系的64位计算是这样设计：操作数的Default Operand-Size是32位，而Address-Size是固定为64位的，这里就引发3个问题要解决的：
<code>
●  问题1：当要访问是64位的寄存器时，那么必须要有一种机制去开启或者说确认访问的寄存器是64位的。
●  问题2：而要访问的内存操作数寄存器寻址的话，那么也必须要去开启或确认寄存器是64位的以及访问新增寄存的问题。
●  问题3：如何去访问新增加的几个寄存器呢？那么也必须要有方法去访问增加的寄存器？
</code>
  那么在64位Long模式下，为什么不将操作数的Default Operand-Size设计为64位呢？那是由于体系限制，本来AMD64就是在 x86的基础上扩展为64位的。x86体系当初设计时就没想到有会被扩展到64位的时候。所以在Segment-Descriptor（段描述符）里就没 有可以扩展为64位的标志位。DS.D位只有置1时是32位，清0时为16位，这两种情况。</p>

<p>  AMD在保持兼容的大提前下，只好令谋计策，AMD的解决方案是：增加一个64位模式下特有Prefix，以起到扩展访问64位的能力。这就是 REX prefix。</p>

<h5>1、REX prefix 的具体格式及含义</h5>

<p>  REX prefix的取值范围是：40 ~ 4F（0100 0000 ~ 0100 1111），来看下原来opcode取值范围的40 ~ 4F的是什么指令：<br/>
  Opcode为40 ~ 47在x86下是inc eax ~ inc edi　指令，48 ~ 4F在x86下是dec eax ~ dec edi　指令。<br/>
  在64位模式下，40 ~ 4F 就已经不是指令而变身为 prefix了。</p>

<h6>1.1  REX prefix字节的组成部分：</h6>

<pre><code>●  bit0：REX.B
●  bit1：REX.X
●  bit2：REX.R
●  bit3：REX.W
●  bit4 ~ bit7：此域固定为0100，也就是高半字节为4。
</code></pre>

<p>★  REX.W域是设定操作数的大小（Operand-Size），当REX.W为1时，操作数是64位，为0时，操作数的大小是缺省大小（Default Opeand-Size）。这就解决了访问64位寄存器的问题。</p>

<p>★  REX.R域是用于扩展ModRM字节中的R（Reg）域，ModRM中的Reg域除了对Opcode的补充外，是用来定义寄存器的编码，即寄存器 值。REX.R将原来3位的寄存器ID（000 ~ 111）扩展为4位（0000 ~ 1111），这就解决了访新增寄存器的问题。</p>

<p>★  REX.X域是用于扩展SIB字节中的Index域，SIB中的Index域是指明Index 寄存器的编码，即ID值。这就解决了寄存器寻址内存中使用新增寄存器的问题。</p>

<p>★  REX.B域是用于扩展ModRM字节中的r/m域和SIB中的Base域，SIB中的Base域指明Base寄存器编码即ID值。这就解决了寄存器寻址内存中使用新增寄存器的问题。</p>

<p>★  REX.B域的另一个作用是：若指令中没有ModRM和SIB，也就是在Opcode中直接给出寄存器ID值，REX.B起到扩展寄存器的作用。</p>

<h6>1.2、下面使用几个例子来说明问题：</h6>

<p>例1：指令 mov eax, 1　　
这条指令的Default Operand-Size是32位，在32位下它的机器编码是：b8 01 00 00 00（其5个字节）若改成64位编码时，变成 mov rax, 1。<br/>
　　此时，它的机器编码是 48 b8 01 00 00 00 00 00 00 00 （共10个字节）<br/>
  在这里48 就是 REX prefix字节，即：0100 1000　它的各个域值是：REX.W = 1，定义操作数是64位的，REX.R = 0、REX.X = 0、 REX.B = 0　这条指令不需要ModRM和SIB字节，所以RXB域都为0。<br/>
　　这里有个值得思考的地方，若 REX.W域为0时，这条指令的操作数是32位的，也就是说，机器编码：40 b8 01 00 00 00（其6个字节）是与 b8 01 00 00 00结果一样的，都是mov eax, 1</p>

<p>例2：指令：mov rax, r14<br/>
　　这是一条常见64位指令，源寄存器是r14，目标寄存器是rax 它的机器编码是：<br/>
　　　4c 89 f0（共3个字节）<br/>
在这个编码里4c是REX prefix，89是opcode，f0是ModRM。<br/>
REX Prefix的值是4c （0100 1100），其中REX.W = 1，REX.R = 1，XB都为0。<br/>
ModRM的值是F0（11-110-000），Mod=11，Reg=110, R/M = 000，在这里先不讲ModRM的含义，在后面的章节再详述。在这条指令里，Reg表示源操作数r14的ID值。<br/>
r14是新增加寄存器，所以需要REX.R进行扩展，得出最终寄存器的ID值，1+110 = 1110，这是r14寄存器的ID值，从而得出正确的编码。</p>

<p>例3：回到序言里的例子：mov word ptr es:[eax + ecx * 8 + 0x11223344], 0x12345678<br/>
作为例子，我将它改为64位指令，如下：<br/>
mov qword ptr [rax + rcx * 8 + 0x11223344], 0x12345678<br/>
操作数大小变为64位，而base 寄存器和index寄存器都改为64位，disp（offset）和imme（值不变），为啥不变？在以后的章节会有详述。</p>

<p>好，现在来看看指令怎么译：<br/>
<code>
(1)  REX.W：　要置为 1 以扩展64位大小。
(2)  REX.B：  由于base不是新增的寄存器，所以置为 0
(3)  REX.X：　由于index 也不是新增的寄存器，所以置为 0
(4)  REX.R：　源操作数和目标作数不是寄存器，所以置为 0
</code></p>

<p>所以，REX prefix就等于 48（0100 1000）<br/>
故，整条指令编码是：48 c7 84 c8 44 33 22 11 78 56 34 12（共12个字节）</p>

<p>例4：我将上面的例子再改一改，变为：mov qword ptr [r8 + r9 * 8 + 0x11223344], 0x12345678<br/>
那么，看看这指令怎么译：
<code>
（1）  REX.W：置1，使用64位大小
（2）  REX.B：base寄存器是r8，是新增寄存器，所以置为1
（3）  REX.X：index寄存器是r9，是新增寄存器，所以置为1
（4）  REX.R：操作数中没有寄存器，所在置为0
</code>
所以，REX　prefix就等于（0100 1011）4b<br/>
故，整条指令编码是：4b c7 84 c8 44 33 22 11 78 56 34 12（共12个字节）</p>

<p>例5：看看这条指令 mov r8, 1
<code>
（1）  REX.W：置1
（2）  REX.B：访问Opcode中的寄存器ID值，它是新增寄存器，所为置1
（3）  REX.X：置0
（4）  REX.R：置0
</code>
所以，REX是 49（0100 1001）<br/>
故整条指令编码是：49 b8 01 00 00 00 00 00 00 00</p>

<h5>2、REX prefix补充说明</h5>

<p>（1）关于顺序：REX一定是在x86 prefix之后，而在Opcode之前。<br/>
（2）关于冲突：当x86 prefix和 REX prefix同时出现，而又出现冲突时，REX的优先权要优于 x86 prefix，<br/>
  举个例子：指令 mov r8, 1<br/>
  若出现以下编码怎么办：66 49 b8 01 00 00 00 00 00 00 00　既有66 又有49，那么结果66会被忽略，也就等于：49 b8 01 00 00 00 00 00 00 00。<br/>
  而对于 66 b8 01 00 00 00 00 00 00 00　这个编码来说：会被解析为：mov ax, 1<br/>
  去掉了49这个REX prefix操作数被调整为 16　位。<br/>
（3）关于原来Opcode码，由于40 ~ 4F被作为 REX prefix，那么原指令inc reg/dec reg，只能使用 FF/0　和 FF/1　这两个Opcode了。<br/>
（4）缺省操作数大小（Default Operand-Size）<br/>
  64位绝大部分缺省操作数是32位的，但有一部分是64位的，依赖于rsp的寻址和短跳转（near jmp/near call）是64位的。<br/>
  如下指令：push r8<br/>
  REX值是41（0100 0001），即REX.W为0，使用default opearnd-size<br/>
  它的编码是 41 ff f0</p>
]]></content>
</entry>

</feed>
