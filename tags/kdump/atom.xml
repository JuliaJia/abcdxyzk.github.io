<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: kdump | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/kdump/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2014-11-26T18:42:02+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[kdump el5 --dump-dmesg 错误]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-kdump-cannot--dump-dmesg/"/>
<updated>2014-08-28T16:35:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/08/28/debug-kdump-cannot--dump-dmesg</id>
<content type="html"><![CDATA[<h4>原因：</h4>

<p><a href="http://vault.centos.org/5.11/os/SRPMS/kexec-tools-1.102pre-165.el5.src.rpm  ">http://vault.centos.org/5.11/os/SRPMS/kexec-tools-1.102pre-165.el5.src.rpm  </a>
这个包的一个patch(kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch)是为了得到dmesg的，<br/>
但是它判断dmesg的结束是用logged_chars(看kernel/printk.c)，logged_chars应该是输出的结束，所以不对。<br/>
改成log_end就行，<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff &ndash;git a/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch b/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch
</span><span class='line'>index 3938280..76c402a 100644
</span><span class='line'>&mdash; a/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch
</span><span class='line'>+++ b/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch
</span><span class='line'>@@ -68,7 +68,7 @@ diff -up kexec-tools-testing-20070330/makedumpfile/makedumpfile.c.orig kexec-too
</span><span class='line'> +dump_dmesg()
</span><span class='line'> +{
</span><span class='line'> +      int log_buf_len, length_log, length_oldlog, ret = FALSE;
</span><span class='line'>-+      unsigned long log_addr, logged_chars, index;
</span><span class='line'>++      unsigned long log_addr, logged_chars, log_end, index;
</span><span class='line'> +      char *log_buffer = NULL;
</span><span class='line'> +
</span><span class='line'> +      if (!open_files_for_creating_dumpfile())
</span><span class='line'>@@ -101,10 +101,15 @@ diff -up kexec-tools-testing-20070330/makedumpfile/makedumpfile.c.orig kexec-too
</span><span class='line'> +               printf(&ldquo;Failed to get logged_chars.\n&rdquo;);
</span><span class='line'> +               return FALSE;
</span><span class='line'> +      }
</span><span class='line'>++      if (!readmem(VADDR, SYMBOL(log_end), &amp;log_end, sizeof(log_end))) {
</span><span class='line'>++               printf(&ldquo;Failed to get log_end.\n&rdquo;);
</span><span class='line'>++               return FALSE;
</span><span class='line'>++      }
</span><span class='line'> +      DEBUG_MSG(&ldquo;\n&rdquo;);
</span><span class='line'> +      DEBUG_MSG(&ldquo;log_addr     : %lx\n&rdquo;, log_addr);
</span><span class='line'> +      DEBUG_MSG(&ldquo;log_buf_len  : %d\n&rdquo;, log_buf_len);
</span><span class='line'> +      DEBUG_MSG(&ldquo;logged_chars : %ld\n&rdquo;, logged_chars);
</span><span class='line'>++      DEBUG_MSG(&ldquo;log_end      : %ld\n&rdquo;, log_end);
</span><span class='line'> +
</span><span class='line'> +      if ((log_buffer = malloc(log_buf_len)) == NULL) {
</span><span class='line'> +               ERRMSG(&ldquo;Can&rsquo;t allocate memory for log_buf. %s\n&rdquo;,
</span><span class='line'>@@ -112,21 +117,16 @@ diff -up kexec-tools-testing-20070330/makedumpfile/makedumpfile.c.orig kexec-too
</span><span class='line'> +               return FALSE;
</span><span class='line'> +       }
</span><span class='line'> +
</span><span class='line'>-+      if (logged_chars &lt; log_buf_len) {
</span><span class='line'>++      if (log_end &lt; log_buf_len) {
</span><span class='line'> +               index = 0;
</span><span class='line'>-+               length_log = logged_chars;
</span><span class='line'>++               length_log = log_end;
</span><span class='line'> +
</span><span class='line'> +               if(!readmem(VADDR, log_addr, log_buffer, length_log)) {
</span><span class='line'> +                        printf(&ldquo;Failed to read dmesg log.\n&rdquo;);
</span><span class='line'> +                        goto out;
</span><span class='line'> +               }
</span><span class='line'> +      } else {
</span><span class='line'>-+               if (!readmem(VADDR, SYMBOL(log_end), &amp;index, sizeof(index))) {
</span><span class='line'>-+                        printf(&ldquo;Failed to get log_end.\n&rdquo;);
</span><span class='line'>-+                        goto out;
</span><span class='line'>-+               }
</span><span class='line'>-+               DEBUG_MSG(&ldquo;log_end      : %lx\n&rdquo;, index);
</span><span class='line'>-+               index &amp;= log_buf_len - 1;
</span><span class='line'>++               index = log_end &amp; (log_buf_len - 1);
</span><span class='line'> +               length_log = log_buf_len;
</span><span class='line'> +               length_oldlog = log_buf_len - index;
</span><span class='line'> +&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;----------------
</span><span class='line'>----------------
</span><span class='line'>#### 如果不修改上面bug，kdump得到vmcore后用 makedumpfile --dump-dmesg 无法解得dmesg，补救办法如下：  
</span><span class='line'>kdump得到vmcore后  
</span><span class='line'> 1、vmlinux没有debuginfo，crash不能运行  
</span><span class='line'> 2、makedumpfile -F --dump-dmesg vmcore &gt; dmesg 只能显示开头一下部分dmesg （不懂为什么）  
</span><span class='line'>解决：
</span><span class='line'>
</span><span class='line'>##### 方法一、
</span><span class='line'>通过/boot/System.map 或者 /proc/kallsyms 找到 log_buf 地址，例如 0xffffffff81a9ac30
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;gdb vmlinux vmcore&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set print repeats 100
</span><span class='line'>set print elements 0
</span><span class='line'>set logging file XXX
</span><span class='line'>set pagination off
</span><span class='line'>set logging on
</span><span class='line'>p {char*} 0xffffffff81a9ac30
</span><span class='line'>quit&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;vi XXX
</span><span class='line'>:%s/\n/\r/g</span></code></pre></td></tr></table></div></figure></p>

<h5>方法二、</h5>

<p>是另一命令，但不好用
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /proc/kallsyms | grep log_end
</span><span class='line'>ffffffff81e30de0 b log_end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;x/1dw 0xffffffff81e30de0
</span><span class='line'>0xffffffff81e30de0:     85689&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;x/1xg 0xffffffff81a9ac30
</span><span class='line'>0xffffffff81a9ac30:     0xffffffff81e30ee0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;显示最后4000字符
</span><span class='line'>x/5s 0xffffffff81e30ee0+85689-4000</span></code></pre></td></tr></table></div></figure></p>
]]></content>
</entry>

</feed>
