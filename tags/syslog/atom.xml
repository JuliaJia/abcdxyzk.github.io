<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: syslog | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/syslog/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2014-12-05T23:32:09+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[log_buf(ring buffer)(syslog)(printk)]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/08/08/kernel-syslog/"/>
<updated>2014-08-08T09:43:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/08/08/kernel-syslog</id>
<content type="html"><![CDATA[<h5>printk 的输出都是保存在log_buf里的</h5>

<p>How to read it the ring buffer? Here is a beautiful illustration from IBM Developerworks
dmesg would be your first resort! How does dmesg accomplish its task? By a call to syslog()! How does syslog do its job? Through the system call interface which in turn call do_syslog(). do_syslog() does the finishing act like this</p>

<p><img src="/images/kernel/2014-08-08.gif" alt="alt" /></p>

<p>// 模仿kernel/printk.c中do_syslog，在module 中读printk输出的最后4k
```
        char <em><em>log_buf;
        int </em>log_buf_len, </em>log_start, *log_end;</p>

<pre><code>    int MASK;
    int end, len;
    unsigned i, j, limit, count;
    char c;
    int ret;


    log_buf = (char**) 0xffffffff803270e0;
    log_buf_len = (int*)0xffffffff803270d8;
    log_start = (int*) 0xffffffff804eabd0;
    log_end = (int*) 0xffffffff804eabe0;

    i = 0;
    end = *log_end;
    len = *log_buf_len;
    MASK = len - 1;

    count = L;
    if (count &gt; len) count = len;
    limit = end;

    for (i=0;i&lt;count;i++) {
            j = limit-1-i;
            c = *(*log_buf + (j&amp;MASK));
            if (c == '\0') c = '\n';
            buf[count-1-i] = c;
    }
</code></pre>

<p>// 输出</p>

<pre><code>    file = filp_open(file_path, O_RDWR|O_CREAT|O_APPEND, 0777);
    if(IS_ERR(file)) {
            printk("Open file %s failed..\n", file_path);
            return 0;
    }
    old_fs = get_fs();
    set_fs(get_ds());
    ret = file-&gt;f_op-&gt;write(file, buf, i, &amp;file-&gt;f_pos);
    file-&gt;f_op-&gt;fsync(file, file-&gt;f_dentry, 0);
    set_fs(old_fs);
    filp_close(file, NULL);
</code></pre>

<p>```</p>
]]></content>
</entry>

</feed>
