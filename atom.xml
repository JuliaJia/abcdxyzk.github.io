<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-12-14T15:32:29+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby字符串处理函数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-string/"/>
    <updated>2014-12-14T15:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-string</id>
    <content type="html"><![CDATA[<h5>1.返回字符串的长度</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.length =&gt; integer</span></code></pre></td></tr></table></div></figure>


<h5>2.字符串索引index</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.index(substring [, offset])   =&gt; fixnum or nil
</span><span class='line'>str.index(fixnum [, offset])      =&gt; fixnum or nil
</span><span class='line'>str.index(regexp [, offset])      =&gt; fixnum or nil
</span><span class='line'>
</span><span class='line'>Returns the index of the first occurrence of the given substring, character (fixnum), 
</span><span class='line'>or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, 
</span><span class='line'>it specifies the position in the string to begin the search.
</span><span class='line'>
</span><span class='line'>   "hello".index('e')             #=&gt; 1
</span><span class='line'>   "hello".index('lo')            #=&gt; 3
</span><span class='line'>   "hello".index('a')             #=&gt; nil
</span><span class='line'>   "hello".index(101)             #=&gt; 1
</span><span class='line'>   "hello".index(/[aeiou]/, -3)   #=&gt; 4</span></code></pre></td></tr></table></div></figure>


<h6>从尾到头rindex</h6>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.rindex(substring [, fixnum])   =&gt; fixnum or nil
</span><span class='line'>str.rindex(fixnum [, fixnum])   =&gt; fixnum or nil
</span><span class='line'>str.rindex(regexp [, fixnum])   =&gt; fixnum or nil
</span><span class='line'>
</span><span class='line'>Returns the index of the last occurrence of the given substring, character (fixnum), 
</span><span class='line'>or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, 
</span><span class='line'>it specifies the position in the string to end the search---characters beyond this point will not be considered.
</span><span class='line'>
</span><span class='line'>   "hello".rindex('e')             #=&gt; 1
</span><span class='line'>   "hello".rindex('l')             #=&gt; 3
</span><span class='line'>   "hello".rindex('a')             #=&gt; nil
</span><span class='line'>   "hello".rindex(101)             #=&gt; 1
</span><span class='line'>   "hello".rindex(/[aeiou]/, -2)   #=&gt; 1</span></code></pre></td></tr></table></div></figure>


<h5>3.判断字符串中是否包含另一个串</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.include? other_str =&gt; true or false
</span><span class='line'>"hello".include? "lo"   #=&gt; true
</span><span class='line'>"hello".include? "ol"   #=&gt; false
</span><span class='line'>"hello".include? ?h     #=&gt; true</span></code></pre></td></tr></table></div></figure>


<h5>4.字符串插入</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.insert(index, other_str) =&gt; str
</span><span class='line'>"abcd".insert(0, 'X')    #=&gt; "Xabcd"
</span><span class='line'>"abcd".insert(3, 'X')    #=&gt; "abcXd"
</span><span class='line'>"abcd".insert(4, 'X')    #=&gt; "abcdX"
</span><span class='line'>"abcd".insert(-3, 'X')
</span><span class='line'>-3, 'X')   #=&gt; "abXcd"
</span><span class='line'>"abcd".insert(-1, 'X')   #=&gt; "abcdX"</span></code></pre></td></tr></table></div></figure>


<h5>5.字符串分隔,默认分隔符为空格</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.split(pattern=$;, [limit]) =&gt; anArray
</span><span class='line'>" now's the time".split        #=&gt; ["now's", "the", "time"]
</span><span class='line'>"1, 2.34,56, 7".split(%r{,\s*}) #=&gt; ["1", "2.34", "56", "7"]
</span><span class='line'>"hello".split(//)               #=&gt; ["h", "e", "l", "l", "o"]
</span><span class='line'>"hello".split(//, 3)            #=&gt; ["h", "e", "llo"]
</span><span class='line'>"hi mom".split(%r{\s*})         #=&gt; ["h", "i", "m", "o", "m"]
</span><span class='line'>"mellow yellow".split("ello")   #=&gt; ["m", "w y", "w"]
</span><span class='line'>"1,2,,3,4,,".split(',')         #=&gt; ["1", "2", "", "3", "4"]
</span><span class='line'>"1,2,,3,4,,".split(',', 4)      #=&gt; ["1", "2", "", "3,4,,"]</span></code></pre></td></tr></table></div></figure>


<h5>6.字符串替换</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.gsub(pattern, replacement) =&gt; new_str
</span><span class='line'>str.gsub(pattern) {|match| block } =&gt; new_str
</span><span class='line'>"hello".gsub(/[aeiou]/, '*')              #=&gt; "h*ll*"     #将元音替换成*号
</span><span class='line'>"hello".gsub(/([aeiou])/, '&lt;\1&gt;')         #=&gt; "h&lt;e&gt;ll&lt;o&gt;"   #将元音加上尖括号,\1表示保留原有字符???
</span><span class='line'>"hello".gsub(/./) {|s| s[0].to_s + ' '}   #=&gt; "104 101 108 108 111 "</span></code></pre></td></tr></table></div></figure>


<p>ruby中带“!&ldquo;和不带&rdquo;!&ldquo;的方法的最大的区别就是带”!"的会改变调用对象本身了。比方说str.gsub(/a/, &lsquo;b&rsquo;)，不会改变str本身，只会返回一个新的str。而str.gsub!(/a/, &lsquo;b&rsquo;)就会把str本身给改了。<br/>
但是gsub和gsub!还有另外一个不同点就是，gsub不管怎么样都会返回一个新的字符串，而gsub!只有在有字符被替换的情况下才会返回一个新的字符串，假如说没有任何字符被替换，gsub!只会返回nil.</p>

<h6>字符串替换二:</h6>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.replace(other_str) =&gt; str
</span><span class='line'>s = "hello"         #=&gt; "hello"
</span><span class='line'>s.replace "world"   #=&gt; "world"</span></code></pre></td></tr></table></div></figure>


<h5>7.字符串删除:</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.delete([other_str]+) =&gt; new_str
</span><span class='line'>"hello".delete "l","lo"        #=&gt; "heo"
</span><span class='line'>"hello".delete "lo"            #=&gt; "he"
</span><span class='line'>"hello".delete "aeiou", "^e"   #=&gt; "hell"
</span><span class='line'>"hello".delete "ej-m"          #=&gt; "ho"</span></code></pre></td></tr></table></div></figure>


<h5>8.去掉前和后的空格</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.lstrip =&gt; new_str
</span><span class='line'>" hello ".lstrip   #=&gt; "hello "
</span><span class='line'>"hello".lstrip       #=&gt; "hello"</span></code></pre></td></tr></table></div></figure>


<h5>9.字符串匹配</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.match(pattern) =&gt; matchdata or nil</span></code></pre></td></tr></table></div></figure>


<h5>10.字符串反转</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.reverse =&gt; new_str
</span><span class='line'>"stressed".reverse   #=&gt; "desserts"</span></code></pre></td></tr></table></div></figure>


<h5>11.去掉重复的字符</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.squeeze([other_str]*) =&gt; new_str
</span><span class='line'>"yellow moon".squeeze                  #=&gt; "yelow mon" #默认去掉串中所有重复的字符
</span><span class='line'>" now   is the".squeeze(" ")         #=&gt; " now is the" #去掉串中重复的空格
</span><span class='line'>"putters shoot balls".squeeze("m-z")   #=&gt; "puters shot balls" #去掉指定范围内的重复字符</span></code></pre></td></tr></table></div></figure>


<h5>12.转化成数字</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.to_i=&gt; str
</span><span class='line'>"12345".to_i             #=&gt; 12345</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby基础]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-base/"/>
    <updated>2014-12-14T14:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-base</id>
    <content type="html"><![CDATA[<h4>Find</h4>

<p><a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/find/rdoc/Find.html">http://ruby-doc.org/stdlib-1.9.3/libdoc/find/rdoc/Find.html</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'find'
</span><span class='line'>total_size = 0
</span><span class='line'>Find.find(ENV["HOME"]) do |path|
</span><span class='line'>  if FileTest.directory?(path)
</span><span class='line'>    if File.basename(path)[0] == ?.
</span><span class='line'>      Find.prune       # Don't look any further into this directory.
</span><span class='line'>    else
</span><span class='line'>      next
</span><span class='line'>    end
</span><span class='line'>  else
</span><span class='line'>    total_size += FileTest.size(path)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>Time</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p Time.parse(“2002-03-17”)       #=&gt; Sun Mar 17 00:00:00 +0800[v2] 2002
</span><span class='line'>p Time.now        # =&gt;Mon Oct 20 06:02:10 JST 2003
</span><span class='line'>p Time.now.to_a      # =&gt; [10, 2, 6, 20, 10, 2003, 1, 293,false, "JST"]
</span><span class='line'>p Time.now.to_f      # =&gt; 1418540681.0154862</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[liquid用法笔记]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/14/blog-jekyll-liquid/"/>
    <updated>2014-12-14T14:54:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/14/blog-jekyll-liquid</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/dont27/article/details/38097581">原文</a></p>

<ul>
<li>注意本文代码中的 <code>{ {</code>,<code>{ %</code>,<code>% }</code>,<code>} }</code>,<code>{ { {</code>,<code>} } }</code> 中间的空格都要去掉才能执行</li>
</ul>


<p>在折腾github上博客的时候, 遇到一些jekyll, 正确来说应该是Liquid用法的问题。
于是一系列搜索之后终于找到了比较容易理解的<a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">文档>></a></p>

<p>关于Liquid的语法使用，看完一遍，就能愉快的在github上继续折腾博客了。有些看不大懂，没翻译，都是自己的见解，有些根本用不上就不解释了。</p>

<h5>Liquid有两种标记类型： Output 和 Tag.</h5>

<p>  Output标记，用于输出文本，格式采用 <code>{ { 两个尖括号包围 } }</code><br/>
  Tag标记，用于执行命令或者处理 格式: <code>{ % 一对尖括号内一对百分号 % }</code></p>

<p>我的见解是: 类比jsp格式, Output相当于 &lt;%=variable>，即输出变量值;<br/>
Tag相当于&lt;% int i=2 ;%>,一种数据处理,但不做输出效果.</p>

<h4>Output</h4>

<p>例子:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello { {name} }
</span><span class='line'>Hello { {user.name} }
</span><span class='line'>Hello { { 'tobi' } }</span></code></pre></td></tr></table></div></figure>


<h5>高级Output: Filters//过滤器</h5>

<p>Filters过滤器,数据处理的操作方法.<br/>
过滤器的第一个参数，往往是过滤器运算符'|&lsquo;左边的Output，而过滤器的返回值，是通过过滤运算符右边的操作所得到的，过滤器可以叠加操作，最终得到该Output所要输出的值。(这段我见解，翻译不过来 = =)<br/>
如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello { { 'tobi' | upcase } }
</span><span class='line'>Hello tobi has { { 'tobi' | size } } letters!
</span><span class='line'>Hello { { 'now' | date: "%Y %h" } }</span></code></pre></td></tr></table></div></figure>


<h5>标准过滤器</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date - 格式化时间
</span><span class='line'>capitalize - 输出字符串，字符串（句子）首字母大写 e.g. 假设tb为"hello world"{ { tb|capitalize } } #=&gt; 'Hello world'
</span><span class='line'>downcase - 转换小写
</span><span class='line'>upcase - 转换大写
</span><span class='line'>first - 获取数组的第一个元素
</span><span class='line'>last - 获取数组的最后一个元素
</span><span class='line'>join - 用指定的字符拼接数组元素
</span><span class='line'>sort - 排序数组
</span><span class='line'>map - map/collect an array on a given property
</span><span class='line'>size - 返回数组大小
</span><span class='line'>escape - 转移字符串
</span><span class='line'>escape_once - returns an escaped version of html without affecting existing escaped entities
</span><span class='line'>strip_html - 除去字符串中的html标签?
</span><span class='line'>strip_newlines - 除去字符串中的回车?
</span><span class='line'>newline_to_br - 将所有的回车"\n" 转换成"&lt;br /&gt;"?
</span><span class='line'>replace - 替换所有匹配内容 e.g.{ { 'forfor' | replace:'for', 'bar' } } #=&gt; 'barbar'
</span><span class='line'>replace_first - 替换第一个匹配内容 e.g.{ { 'forfor' | replace_first:'for', 'bar' } } #=&gt; 'barfor'
</span><span class='line'>remove - 移除所有匹配内容 e.g.{ { 'forbarforbar' | remove:'for'} } #=&gt; 'barbar'
</span><span class='line'>remove_first - 移除第一个匹配内容 e.g.{ { 'forbarforbar' | remove_first:'for'} } #=&gt; 'barforbar'
</span><span class='line'>truncate - truncate a string down to x characters
</span><span class='line'>truncatewords - truncate a string down to x words
</span><span class='line'>prepend - 在字符串前面加上内容 e.g.{ {'bar'|prepend:'far'} } #=&gt; 'farbar'
</span><span class='line'>append - 字符串后面加上内容 e.g.{ {'bar'|append: 'foo'} }#=&gt; 'barfoo'
</span><span class='line'>minus - 减法 e.g. { {4|minus:2} } #=&gt;2
</span><span class='line'>plus - 加法 e.g. { { 4|plus:2} } #=&gt; 6
</span><span class='line'>times - 乘法 e.g. { {10|times:2} } #=&gt; 20
</span><span class='line'>divided_by - 除法 e.g. { { 10 | divided_by:2} } #=&gt; 5
</span><span class='line'>split - 分割字符串 e.g.{ { "a~b" | split:'~'} } #=&gt; ['a','b']
</span><span class='line'>modulo - 取余 e.g. { { 3 | modulo:2 } } #=&gt; 1</span></code></pre></td></tr></table></div></figure>


<h4>Tags</h4>

<p>Tag在模板中起到处理逻辑的作用。<br/>
下面是目前支持的Tag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>assign - 定义变量 e.g. { % assign tt = 1 % } 定义了变量tt数值为1
</span><span class='line'>capture - Block tag为变量赋值 e.g.{ % capture dont % }{ { tt } }{ % endcapture % } 将tt的值赋给 dont
</span><span class='line'>case - Block tag its the standard case...when block
</span><span class='line'>comment - Block tag 注释
</span><span class='line'>cycle - Cycle is usually used within a loop to alternate between values, like colors or DOM classes.
</span><span class='line'>for - for循环block
</span><span class='line'>if - 判断block
</span><span class='line'>include - 引入模板
</span><span class='line'>raw - 转义内容tag e.g.{ % raw % }{ { this } }{ % endraw% } #=&gt; '{ { this } }'
</span><span class='line'>unless - Mirror of if statement</span></code></pre></td></tr></table></div></figure>


<h5>Comments</h5>

<p>注释隐藏</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>We made 1 million dollars { % comment % } in losses { % endcomment % } this year
</span><span class='line'>Raw</span></code></pre></td></tr></table></div></figure>


<p>当包裹内容出现冲突语法时，不会执行其处理。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % raw % }
</span><span class='line'>  In Handlebars, { { this } } will be HTML-escaped, but { { { that } } } will not.
</span><span class='line'>{ % endraw % }</span></code></pre></td></tr></table></div></figure>


<h5>if/else</h5>

<p>e.g.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % if user % }
</span><span class='line'>  Hello { { user.name } }
</span><span class='line'>{ % endif % }</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Same as above
</span><span class='line'>{ % if user != null % }
</span><span class='line'>  Hello { { user.name } }
</span><span class='line'>{ % endif % }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % if user.name != 'tobi' % }
</span><span class='line'>  Hello non-tobi
</span><span class='line'>{ % endif % }</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Same as above
</span><span class='line'>{ % unless user.name == 'tobi' % }
</span><span class='line'>  Hello non-tobi
</span><span class='line'>{ % endunless % }</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % if user.payments.size &gt; 0  % }
</span><span class='line'>   you paid !
</span><span class='line'>{ % endif % }</span></code></pre></td></tr></table></div></figure>


<h5>Case Statement</h5>

<p>多条件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % case condition % }
</span><span class='line'>{ % when 1 % }
</span><span class='line'>hit 1
</span><span class='line'>{ % when 2 or 3 % }
</span><span class='line'>hit 2 or 3
</span><span class='line'>{ % else % }
</span><span class='line'>... else ...
</span><span class='line'>{ % endcase % }</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % case template % }
</span><span class='line'>
</span><span class='line'>{ % when 'label' % }
</span><span class='line'>     // { { label.title } }
</span><span class='line'>{ % when 'product' % }
</span><span class='line'>     // { { product.vendor | link_to_vendor } } / { { product.title } }
</span><span class='line'>{ % else % }
</span><span class='line'>     // { {page_title} }
</span><span class='line'>{ % endcase % }</span></code></pre></td></tr></table></div></figure>


<h5>Cycle</h5>

<p>循环列举</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'one', 'two', 'three' % }</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>one
</span><span class='line'>two
</span><span class='line'>three
</span><span class='line'>one</span></code></pre></td></tr></table></div></figure>


<p>可以通过命名分组：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % cycle 'group 1': 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'group 1': 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'group 2': 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'group 2': 'one', 'two', 'three' % }</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>one
</span><span class='line'>two
</span><span class='line'>one
</span><span class='line'>two</span></code></pre></td></tr></table></div></figure>


<h5>for 循环</h5>

<p>循环集合：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % for item in array % }
</span><span class='line'>  { { item } }
</span><span class='line'>{ % endfor % }</span></code></pre></td></tr></table></div></figure>


<p>遍历hash时：item[0]包含键，item[1]包含值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % for item in hash % }
</span><span class='line'>  { { item[0] } }: { { item[1] } }
</span><span class='line'>{ % endfor % }</span></code></pre></td></tr></table></div></figure>


<p>for循环时，下列变量可以辅助使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>forloop.length      # =&gt; length of the entire for loop
</span><span class='line'>forloop.index       # =&gt; index of the current iteration
</span><span class='line'>forloop.index0      # =&gt; index of the current iteration (zero based)
</span><span class='line'>forloop.rindex      # =&gt; how many items are still left?
</span><span class='line'>forloop.rindex0     # =&gt; how many items are still left? (zero based)
</span><span class='line'>forloop.first       # =&gt; is this the first iteration?
</span><span class='line'>forloop.last        # =&gt; is this the last iteration?</span></code></pre></td></tr></table></div></figure>


<p>还有一些变量可以用来处理循环时选择性处理：<br/>
limit:int - 限制遍历个数<br/>
offset:int - 从第n个数开始遍历</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># array = [1,2,3,4,5,6]
</span><span class='line'>{ % for item in array limit:2 offset:2 % }
</span><span class='line'>  { { item } }
</span><span class='line'>{ % endfor % }
</span><span class='line'># results in 3,4</span></code></pre></td></tr></table></div></figure>


<p>反序遍历：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % for item in collection reversed % } 
</span><span class='line'>{ {item} } 
</span><span class='line'>{ % endfor % }</span></code></pre></td></tr></table></div></figure>


<p>除了遍历集合，还可以定义一个范围的数字来遍历：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># if item.quantity is 4...
</span><span class='line'>{ % for i in (1..item.quantity) % }
</span><span class='line'>  { { i } }
</span><span class='line'>{ % endfor % }
</span><span class='line'># results in 1,2,3,4</span></code></pre></td></tr></table></div></figure>


<h5>变量赋值</h5>

<p>赋值变量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % assign name = 'freestyle' % }
</span><span class='line'>
</span><span class='line'>{ % for t in collections.tags % }{ % if t == name % }
</span><span class='line'>  &lt;p&gt;Freestyle!&lt;/p&gt;
</span><span class='line'>{ % endif % }{ % endfor % }</span></code></pre></td></tr></table></div></figure>


<p>还可以赋值布尔值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % assign freestyle = false % }
</span><span class='line'>
</span><span class='line'>{ % for t in collections.tags % }{ % if t == 'freestyle' % }
</span><span class='line'>  { % assign freestyle = true % }
</span><span class='line'>{ % endif % }{ % endfor % }
</span><span class='line'>
</span><span class='line'>{ % if freestyle % }
</span><span class='line'>  &lt;p&gt;Freestyle!&lt;/p&gt;
</span><span class='line'>{ % endif % }</span></code></pre></td></tr></table></div></figure>


<p>赋值处理过的数据：可以用capture</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % capture attribute_name % }{ { item.title | handleize } }-{ { i } }-color{ % endcapture % }
</span><span class='line'>
</span><span class='line'>  &lt;label for="{ { attribute_name } }"&gt;Color:&lt;/label&gt;
</span><span class='line'>  &lt;select name="attributes[{ { attribute_name } }]" id="{ { attribute_name } }"&gt;
</span><span class='line'>    &lt;option value="red"&gt;Red&lt;/option&gt;
</span><span class='line'>    &lt;option value="green"&gt;Green&lt;/option&gt;
</span><span class='line'>    &lt;option value="blue"&gt;Blue&lt;/option&gt;
</span><span class='line'>  &lt;/select&gt;</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android模拟器]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/05/android-monitor/"/>
    <updated>2014-12-05T17:38:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/05/android-monitor</id>
    <content type="html"><![CDATA[<p>首先下载Android SDK ，完成安装openjdk-6-jre，还需要安装ia32-libs bison flex libglu1-mesa-dev 。<br/>
将下载回来的Android SDK解压缩后进入文件夹，运行tools/monitor<br/>
Window->Android SDK Manager 选择想要的模拟的android安转<br/>
Window->Android Virtual Device Manager 模拟器管理界面。</p>

<p>下载不了sdk就 <a href="https://awk.so/#newwindow=1&amp;q=dl-ssl.google.com+ip  ">https://awk.so/#newwindow=1&amp;q=dl-ssl.google.com+ip  </a>
搜索dl-ssl.google.com的IP，然后在hosts替换掉。如 203.208.46.200</p>

<h5>安装apk</h5>

<p>在电脑上运行 adb install /XXX/YYY.apk</p>

<p><a href="http://forum.ubuntu.org.cn/viewtopic.php?t=311659">android虚拟机QQ</a></p>

<p><a href="http://www.findspace.name/easycoding/415">http://www.findspace.name/easycoding/415</a></p>

<h5>中文输入法</h5>

<p>要到设置->语言和输入法中勾选选择输入，再点击输入法靠右的地方进行设置。</p>

<p><a href="http://segmentfault.com/blog/cherishsir/1190000000686224">ubuntu下,使用chrome 浏览器运行安卓apk程序</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用usb进行调试]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/04/android-usb-debug/"/>
    <updated>2014-12-04T18:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/04/android-usb-debug</id>
    <content type="html"><![CDATA[<h4>一 下载</h4>

<p>下载 platform-tools 或 adt-bundle-linux-x86_64-XXX.zip（这个很大）</p>

<h4>二 连接</h4>

<p>adb start-server 打开服务<br/>
如果一切正常的话<br/>
输入<br/>
adb devices<br/>
就能显示出当前连接到电脑的android设备 ^_^<br/>
试试这个命令<br/>
adb shell<br/>
就能在Ubuntu上的终端执行android的shell命令了<br/>
su<br/>
切换到root</p>

<p>或者</p>

<p>adb root<br/>
再<br/>
adb shell<br/>
不过这种不一定成功</p>

<h4>三 不能执行的sdcard分区如下</h4>

<p>$ mount</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/dev/block/vold/93:80 /mnt/sdcard vfat rw,dirsync,nosuid,nodev,noexec,relatime,uid=1000,gid=1015,fmask=0702,dmask=0702,allow_utime=0020,codepage=cp437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 0</span></code></pre></td></tr></table></div></figure>


<p>我用的平台，默认加载sdcard分区是noexec，所以无法执行该分区下的文件。</p>

<p>重新加载该分区mount -o rw,remount /mnt/sdcard</p>

<p>然后一切正常，自己的执行程序现在工作正常了。</p>
]]></content>
  </entry>
  
</feed>
