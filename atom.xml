<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-26T01:22:16+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopress优化]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/25/octopress-5/"/>
    <updated>2014-11-25T23:34:33+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/25/octopress-5</id>
    <content type="html"><![CDATA[<h4>octopress优化</h4>

<p>能够让octopress在50篇文章下跑进5s，不优化要跑60s左右</p>

<h5>运行过程</h5>

<p>看octopress目录下的Rakefile，里面有generate，preview，watch等。<br/>
输入rake generate是就是按照Rakefile中<code>task :generate do</code>执行的。<br/>
最主要的两条：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system "compass compile --css-dir #{source_dir}/stylesheets"
</span><span class='line'>system "jekyll build"</span></code></pre></td></tr></table></div></figure>


<p>第一条是编译css，第二条是生成文章。</p>

<!--more-->


<p>第一条不知道如何优化，略过。<br/>
第二条接着执行到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/commands/build.rb<br/>
文件的init_with_program -> process -> build然后到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/command.rb文件的process_site然后到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb文件的process，<br/>
process代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>47     def process
</span><span class='line'>48       reset
</span><span class='line'>49       read
</span><span class='line'>50       generate
</span><span class='line'>51       render
</span><span class='line'>52       cleanup
</span><span class='line'>53       write
</span><span class='line'>54     end</span></code></pre></td></tr></table></div></figure>


<p>这里的函数都在这个文件里，主要费时在generate和render。</p>

<h6>1. generate</h6>

<p>generate会执行octopress/plugins目录下的tag_generator.rb和category_generator.rb，<br/>
这两个文件的write_tag_indexes和write_category_indexes分别回构建tag和category的分类首页。<br/>
所以tag和category越多构建越慢。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from /home/kk/kk/github/octopress/plugins/rubypants.rb:261:in `to_html'
</span><span class='line'>from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:31:in `post_filter'
</span><span class='line'>from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:41:in `post_render'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:255:in `block in post_render'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:254:in `each'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:254:in `post_render'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:224:in `do_layout'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/page.rb:122:in `render'
</span><span class='line'>from /home/kk/kk/github/octopress/plugins/category_generator.rb:100:in `write_category_index'
</span><span class='line'>from /home/kk/kk/github/octopress/plugins/category_generator.rb:112:in `block in write_category_indexes'
</span><span class='line'>from /home/kk/kk/github/octopress/plugins/category_generator.rb:111:in `each'
</span><span class='line'>from /home/kk/kk/github/octopress/plugins/category_generator.rb:111:in `write_category_indexes'
</span><span class='line'>from /home/kk/kk/github/octopress/plugins/category_generator.rb:141:in `generate'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:280:in `block in generate'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:279:in `each'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:279:in `generate'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:50:in `process'</span></code></pre></td></tr></table></div></figure>


<h6>2. render</h6>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from /home/kk/kk/github/octopress/plugins/rubypants.rb:261:in `to_html'
</span><span class='line'>from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:31:in `post_filter'
</span><span class='line'>from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:41:in `post_render'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:249:in `block in pre_render'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:248:in `each'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:248:in `pre_render'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:222:in `do_layout'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/page.rb:122:in `render'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:299:in `block in render'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:298:in `each'
</span><span class='line'>from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:298:in `render'</span></code></pre></td></tr></table></div></figure>


<p>都是慢在octopress/plugins/rubypants.rb的to_html函数。</p>

<h5>优化</h5>

<h6>1、to_html函数的tokenize和gsub很慢。</h6>

<p>to_html函数只是把一些' &ldquo;之类的转成html，试了一下不执行to_html，diff出来差别不大，页面上显示也都还OK。单纯的&lt;在其他地方已经转好了。<br/>
所以octopress/plugins/octopress_filters.rb中不执行to_html</p>

<h6>2、每次计算侧边栏太慢</h6>

<p>所有页面都是按照其layout的格式找对应source/_layout/下的模板来生成的。<br/>
注意post.html和page.html的最后都有 <code>{ { include_array XXX } }</code>, 这就是说每个页面都要运行plugins/include_array.rb中的render(context)来生成侧边栏。<br/>
但是侧边栏应该是(?)都一样的。所以改成隔一定时间计算一次</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 26     @@caltime = 0
</span><span class='line'> 27     @@retstore = ""
</span><span class='line'> 28     def render(context)
</span><span class='line'> 29         if Time.now.to_f - @@caltime &lt; context.registers[:site].config['recaltime']
</span><span class='line'> 30                 return @@retstore;
</span><span class='line'> 31         end
</span><span class='line'> 32         @@caltime = Time.now.to_f
</span><span class='line'>...
</span><span class='line'> 58       @@retstore = rtn</span></code></pre></td></tr></table></div></figure>


<p>为什么要隔一段时间？因为在preview中有改动任何文件就会重新生成一次，这时侧边栏也要重新计算</p>

<h6>3、减小文件大小</h6>

<p>我的侧边栏有二级目录，整个侧边栏比较大，50篇时已经有20k。所以将侧边栏独立成一个文件，用js来load。<br/>
plugins/include_array.rb中加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>59       fp = File.new('sidebar.html', 'w');
</span><span class='line'>60       fp.puts(rtn);
</span><span class='line'>61       fp.puts('&lt;script src="http://abcdxyzk.github.io/javascripts/category.js" type="text/javascript"&gt;&lt;/script&gt;');
</span><span class='line'>62       fp.puts('&lt;script type="text/javascript"&gt; hadOpenDiv();&lt;/script&gt;');
</span><span class='line'>63       fp.close();</span></code></pre></td></tr></table></div></figure>


<p>source/<em>layout/post.html和source/</em>layout/page.html的最后部分改成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>35 &lt;aside class="sidebar" id='load_sidebar'&gt;
</span><span class='line'>36 &lt;/aside&gt;
</span><span class='line'>37 &lt;script type="text/javascript"&gt;
</span><span class='line'>38   $('#load_sidebar').load('/sidebar.html');
</span><span class='line'>39 &lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>因为source/index.html里也有 <code>{ { include_array XXX } }</code>，所以不用担心不执行plugins/include_array.rb。<br/>
问题1：就是"最近评论"要从_config.yml中的default_asides:中移到source/index.html中。因为js load进的文件中的document.write不执行了。这也就是为什么source/index.html不采用js load。如果是<code>&lt;aside&gt;</code>中增加div用来load的话，侧边栏缩到底部就没有三列的效果。<br/>
问题2：sidebar.html要写到主目录，source/sidebar.html中用ln软链接到sidebar.html。因为如果在watch状态直接写到source/目录的话，他就会再次认为文件有改变，又重新生成。造成在不断生成的死循环。细节是在Rakefile文件的generate和preview中先加软链接再运行其他</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>56 task :generate do
</span><span class='line'>57   system('&gt;`pwd`/sidebar.html')
</span><span class='line'>58   system('ln -f -s `pwd`/sidebar.html `pwd`/source/sidebar.html')</span></code></pre></td></tr></table></div></figure>


<h5>优化效果</h5>

<p>在文件中加入时间输出代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p "    #{ __FILE__} line:#{__LINE__} time:#{Time.now.to_f}"</span></code></pre></td></tr></table></div></figure>


<p>50篇文章，40个tag，61个category，运行如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kk@kk-laptop:~/kk/github/octopress(source)$ rake generate
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>"/home/kk/kk/github/octopress/Rakefile line:62 time:1416933869.1204205"
</span><span class='line'>identical source/stylesheets/screen.css 
</span><span class='line'>"/home/kk/kk/github/octopress/Rakefile line:64 time:1416933870.019113"
</span><span class='line'>Configuration file: /home/kk/kk/github/octopress/_config.yml
</span><span class='line'>            Source: source
</span><span class='line'>       Destination: public
</span><span class='line'>      Generating... 
</span><span class='line'>"    /home/kk/kk/github/octopress/plugins/category_generator.rb line:110 time:1416933870.7509217"
</span><span class='line'>"    /home/kk/kk/github/octopress/plugins/category_generator.rb line:114 time:1416933871.8838022"
</span><span class='line'>"    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:93 time:1416933871.8838577"
</span><span class='line'>"    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:97 time:1416933872.389736"
</span><span class='line'>"    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:297 time:1416933872.4271524"
</span><span class='line'>"    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:301 time:1416933873.8506286"
</span><span class='line'>                    done.
</span><span class='line'> Auto-regeneration: disabled. Use --watch to enable.
</span><span class='line'>"/home/kk/kk/github/octopress/Rakefile line:66 time:1416933873.9671116"
</span><span class='line'>"total = 4.846851825714111"</span></code></pre></td></tr></table></div></figure>


<p>total = 4.846851825714111，不优化要60s左右。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 加站长统计和站内搜索]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/20/octopress-4/"/>
    <updated>2014-11-20T18:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/20/octopress-4</id>
    <content type="html"><![CDATA[<h4>站长统计</h4>

<p>国内使用很广的CNZZ了，注册后，添加并验证你的网站就可以添加统计代码了，选好自己喜欢的样式，获得代码，可添加到source/_includes/custom/footer.html中。即可查看每天你的博客的流量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/javascript"&gt;var cnzz_protocol = (("https:" == document.location.protocol) ? " https://" : " http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_1253604690'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s95.cnzz.com/z_stat.php%3Fid%3D1253604690' type='text/javascript'%3E%3C/script%3E"));&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<h4>站内搜索</h4>

<p>为了实现站内搜索(页面不跳转)，</p>

<!--more-->


<h5>需要到tapirgo.com注册你的站点，填入atom.xml的url和邮箱地址，tapirgo会生成一对token，我们只使用public token就够了。</h5>

<h5>打开_config.yml文件，加入tapir_token: your_token</h5>

<h5>修改simple_search为你的站点域名simple_search: your_domain</h5>

<h5>在source/javascripts/新建jquery-tapir.js，内容为</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(function($){
</span><span class='line'>  var el;
</span><span class='line'>  var settings = {};
</span><span class='line'>
</span><span class='line'>  var methods = {
</span><span class='line'>    init: function(options) {
</span><span class='line'>      el = this;
</span><span class='line'>
</span><span class='line'>      settings = {
</span><span class='line'>             token: false,
</span><span class='line'>             query_param: 'query'
</span><span class='line'>           };
</span><span class='line'>
</span><span class='line'>      if (options) {
</span><span class='line'>  $.extend(settings, options);
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      if (!settings.token || settings.query_param == '') {
</span><span class='line'>  return this;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      $.getJSON(
</span><span class='line'>  'http://tapirgo.com/api/1/search.json?token=' + settings.token + '&query=' + paramValue(settings.query_param) + '&callback=?', function(data){
</span><span class='line'>    if(settings['complete']) { settings.complete() }
</span><span class='line'>    $.each(data, function(key, val) {
</span><span class='line'>    document.getElementById('search_results').style.display="block";
</span><span class='line'>    document.getElementById('search_results').style.height="100%";
</span><span class='line'>    document.getElementById('search_results').style.overflow="hidden";
</span><span class='line'>        var str1 = val.content;
</span><span class='line'>        var str2 = str1.substr(1, 250);
</span><span class='line'>        str2 = str2.substr(0, Math.min(str2.length, str2.lastIndexOf(" ")));
</span><span class='line'>      el.append('&lt;div id="content" class="inner"&gt;&lt;article class="post"&gt;&lt;h2 class="title"&gt;&lt;a href="' + val.link + '"&gt;' + val.title + '&lt;/a&gt;&lt;/h2&gt;&lt;div class="entry-content"&gt;&lt;div class="date"&gt;Published on: ' + (val.published_on).substr(0,10) + '&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;' + str2 + '...&lt;/p&gt;&lt;br&gt;&lt;a href="' + val.link +'"&gt;Read on &rarr;&lt;/a&gt;&lt;/article&gt;&lt;/div&gt;');
</span><span class='line'>      if(key &gt;= (data.length-1)){
</span><span class='line'>          el.append('&lt;div id="content" class="inner"&gt;&lt;center&gt;&lt;h2 style="border-bottom: 1px solid #ddd;"&gt;Result ends&lt;/h2&gt;&lt;/center&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;');
</span><span class='line'>      }
</span><span class='line'>    });
</span><span class='line'>  }
</span><span class='line'>      );
</span><span class='line'>
</span><span class='line'>      return this;
</span><span class='line'>    }
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>  // Extract the param value from the URL.
</span><span class='line'>  function paramValue(query_param) {
</span><span class='line'>    var results = new RegExp('[\\?&]' + query_param + '=([^&#]*)').exec(window.location.href);
</span><span class='line'>    return results ? results[1] : false;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  $.fn.tapir = function(method) {
</span><span class='line'>    if (methods[method]) {
</span><span class='line'>      return methods[ method ].apply(this, Array.prototype.slice.call(arguments, 1));
</span><span class='line'>    } else if (typeof method === 'object' || ! method) {
</span><span class='line'>      return methods.init.apply(this, arguments);
</span><span class='line'>    } else {
</span><span class='line'>      $.error('Method ' +  method + ' does not exist on jQuery.tapir');
</span><span class='line'>    }
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>})( jQuery );</span></code></pre></td></tr></table></div></figure>


<h5>然后在source/search/index.html中</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>  layout: default
</span><span class='line'>  ---
</span><span class='line'>  &lt;h1 class="entry-title"&gt;&lt;center&gt;Search Results&lt;/center&gt;&lt;/h1&gt;
</span><span class='line'>  &lt;div id="search_loading" style="margin: 40px 0"&gt;
</span><span class='line'>      &lt;center&gt;&lt;img src="http://abcdxyzk.github.io/images/loading.gif"&gt;&lt;/center&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>
</span><span class='line'>  &lt;script type="text/javascript" src="http://abcdxyzk.github.io/javascripts/jquery-tapir.js"&gt;&lt;/script&gt;
</span><span class='line'>  &lt;div id="search_results" style="display:none"&gt;
</span><span class='line'>  &lt;br&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>  &lt;script&gt;
</span><span class='line'>       $('#search_results').tapir({
</span><span class='line'>           'token': 'your_token',
</span><span class='line'>           'complete' : function() { document.getElementById('search_loading').style.display="none"; }
</span><span class='line'>       });
</span><span class='line'>  &lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<h5>更新source/_includes/navigation.html</h5>

<p>将原来的google搜索</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input type="hidden" name="q" value="site:smarterhjw.com" /&gt;
</span><span class='line'>&lt;input class="search" type="text" name="q" results="0" placeholder="Search"/&gt;</span></code></pre></td></tr></table></div></figure>


<p>更改为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input class="search" name="query" type="text" placeholder="Search..." x-webkit-speech /&gt;</span></code></pre></td></tr></table></div></figure>


<p>最后rake generate，就可以了。 此时进行搜索，就不会再跳转到站外去了。</p>

<h5>可以修改一下搜索框展示</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- a/sass/partials/_navigation.scss
</span><span class='line'>+++ b/sass/partials/_navigation.scss
</span><span class='line'>@@ -74,6 +74,7 @@ body &gt; nav {
</span><span class='line'>       float: right;
</span><span class='line'>       text-align: left;
</span><span class='line'>       padding-left: .8em;
</span><span class='line'>+      padding-top: .35em;
</span><span class='line'>       width: $sidebar-width-medium - $pad-medium*2 - $sidebar-pad-medium + 20px;
</span><span class='line'>       .search {
</span><span class='line'>   width: 93%;
</span><span class='line'>@@ -86,7 +87,7 @@ body &gt; nav {
</span><span class='line'>       .search { width: 91%; }
</span><span class='line'>     }
</span><span class='line'>     fieldset.mobile-nav { display: none; }
</span><span class='line'>-    fieldset[role=search]{ width: 99%; }
</span><span class='line'>+    fieldset[role=search]{ width: 80%; }
</span><span class='line'>   }
</span><span class='line'>   @media only screen and (min-width: 992px) {
</span><span class='line'>     form {</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown部分语法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/17/blog-markdown/"/>
    <updated>2014-11-17T00:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/17/blog-markdown</id>
    <content type="html"><![CDATA[<p><a href="http://wowubuntu.com/markdown/index.html">贴自http://wowubuntu.com/markdown/index.html</a></p>

<h4>段落和换行</h4>

<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。普通段落不该用空格或制表符来缩进。<br/>
如果你确实想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p>

<h4>标题</h4>

<p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。<br/>
类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This is an H1
</span><span class='line'>=============
</span><span class='line'>This is an H2
</span><span class='line'>-------------</span></code></pre></td></tr></table></div></figure>


<p>任何数量的 = 和 - 都可以有效果。<br/>
类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 这是 H1
</span><span class='line'>## 这是 H2
</span><span class='line'>###### 这是 H6</span></code></pre></td></tr></table></div></figure>


<p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 这是 H1 #
</span><span class='line'>## 这是 H2 ##
</span><span class='line'>### 这是 H3 ######</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h4>列表</h4>

<p>Markdown 支持有序列表和无序列表。<br/>
无序列表使用星号、加号或是减号作为列表标记：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*   R
</span><span class='line'>*   Gr
</span><span class='line'>*   B</span></code></pre></td></tr></table></div></figure>


<p>有序列表则使用数字接着一个英文句点：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.Bird
</span><span class='line'>2.McHale
</span><span class='line'>3.Parish</span></code></pre></td></tr></table></div></figure>


<h4>代码区块</h4>

<p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。<br/>
要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>这是一个普通段落：
</span><span class='line'>  这是一个代码区块。</span></code></pre></td></tr></table></div></figure>


<p>Markdown 会转换成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;p&gt;这是一个普通段落：&lt;/p&gt;
</span><span class='line'>&lt;pre&gt;&lt;code&gt;这是一个代码区块。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;</span></code></pre></td></tr></table></div></figure>


<h4>分隔线</h4>

<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* * *
</span><span class='line'>***
</span><span class='line'>*****
</span><span class='line'>- - -
</span><span class='line'>---------------------------------------</span></code></pre></td></tr></table></div></figure>


<h4>链接</h4>

<p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。<br/>
不管是哪一种，链接文字都是用 [方括号] 来标记。<br/>
要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This is [an example](http://example.com/ "Title") inline link.
</span><span class='line'>[This link](http://example.net/) has no title attribute.</span></code></pre></td></tr></table></div></figure>


<p>会产生：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;
</span><span class='line'>an example&lt;/a&gt; inline link.&lt;/p&gt;
</span><span class='line'>&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has no
</span><span class='line'>title attribute.&lt;/p&gt;</span></code></pre></td></tr></table></div></figure>


<p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>See my [About](/about/) page for details.</span></code></pre></td></tr></table></div></figure>


<h4>图片</h4>

<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。
Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br/>
行内式的图片语法看起来像是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![Alt text](/path/to/img.jpg)
</span><span class='line'>![Alt text](/path/to/img.jpg "Optional title")</span></code></pre></td></tr></table></div></figure>


<p>详细叙述如下：<br/>
    一个惊叹号 !<br/>
    接着一个方括号，里面放上图片的替代文字<br/>
    接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 &lsquo;title&rsquo; 文字。<br/>
参考式的图片语法则长得像这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![Alt text][id]</span></code></pre></td></tr></table></div></figure>


<p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[id]: url/to/image  "Optional title attribute"</span></code></pre></td></tr></table></div></figure>


<p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树状数组]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/16/alg-bit/"/>
    <updated>2014-11-16T21:19:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/16/alg-bit</id>
    <content type="html"><![CDATA[<p>大体上可以分为两种:</p>

<h4>一</h4>

<p>每次修改的是一个点，所求的是关于某段区间；<br/>
这种情况最好办；比如说poj2352 stars；求每个点前面比他小的点的个数；<br/>
只用设置数组a[],先全是0，然后有某个点就依次修改，并以此统计；<br/>
这一种是最基本的向上修改，向下统计；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int lowbit(int x) {
</span><span class='line'>  return x&(-x);
</span><span class='line'>}
</span><span class='line'>void update(int x,int num) {
</span><span class='line'>  while(x&lt;=N) {
</span><span class='line'>       d[x]+=num;
</span><span class='line'>       x+=lowbit(x);
</span><span class='line'>   }
</span><span class='line'>}
</span><span class='line'>int getSum(int x) {
</span><span class='line'>  int s=0;
</span><span class='line'>  while(x&gt;0) {
</span><span class='line'>       s+=d[x];
</span><span class='line'>       x-=lowbit(x);
</span><span class='line'>   }
</span><span class='line'>  return s;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h4>二</h4>

<p>每次修改的是一个区间，所求的值是关于某个点的；<br/>
代表的典型题目是HOJ1556 color the ball；<br/>
这个题是每次修改了一整个区间，最后求的是每个点修改的次数；<br/>
这个需要将上面的函数，稍加修改；<br/>
对于[s,t]，要向下修改，将它的区间[0, t]都加一遍update(t)；再向下修改，把不必要的区间[0, s)再减去update(s-1)；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void update(int x,int num) {
</span><span class='line'>  while(x&gt;0) {
</span><span class='line'>       d[x]+=num;
</span><span class='line'>       x-=lowbit(x);
</span><span class='line'>   }
</span><span class='line'>}
</span><span class='line'>int getSum(int x) {
</span><span class='line'>  int s=0;
</span><span class='line'>  while(x&lt;=N) {
</span><span class='line'>       s+=d[x];
</span><span class='line'>       x+=lowbit(x);
</span><span class='line'>   }
</span><span class='line'>  return s;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h5>注意</h5>

<div style="color:red">
对于一，可以用于计算统计子树；</br>
对于二，可以用于计算统计树上某个节点的所有祖先节点
</div>


<h4>poj3321</h4>

<p>这题难的不是树状数组，主要是映射到树状数组。<br/>
建树，然后dfs一次就可以算出对某个节点它的第一个下标(在树状数组中)和最后一个下标。那个更改的时候就用这两个下标就行了。<br/>
<img src="http://abcdxyzk.github.io/images/alg/20141116.png" alt="" /><br/>
类似于将树向右倾斜，dfs建好树后c子树的第一个下标是4，最后一个下标是7。统计子树时只要sum(7)-sum(4-1)</p>

<h4>foj2176</h4>

<p>是poj3321加强版，一样的建树，但是节点要存k个值，然后update和sum的时候注意取和dep的差值，注意update减去val时的dep不要取错，update(le[i], dep[ri[i]], -val);</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;vector&gt;
</span><span class='line'>using namespace std;
</span><span class='line'>
</span><span class='line'>int n,m,mod;
</span><span class='line'>vector&lt;int&gt; tr[50009];
</span><span class='line'>int pre[50009];
</span><span class='line'>int s[50009][5];
</span><span class='line'>int dep[50009];
</span><span class='line'>int now, le[50009], ri[50009];
</span><span class='line'>
</span><span class='line'>int lowbit(int x)
</span><span class='line'>{
</span><span class='line'>  return x&(-x);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void update(int x, int de, int v)
</span><span class='line'>{
</span><span class='line'>  int i;
</span><span class='line'>  while (x &gt; 0) {
</span><span class='line'>      i = (dep[x]-de+mod*1000000)%mod;
</span><span class='line'>      s[x][i%mod] += v;
</span><span class='line'>      x -= lowbit(x);
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int sum(int x, int de)
</span><span class='line'>{
</span><span class='line'>  int i, j, val[5], ret;
</span><span class='line'>  for (i=0;i&lt;mod;i++) val[i] = 0;
</span><span class='line'>  while (x &lt;= now) {
</span><span class='line'>      j = i = (de-dep[x]+mod*1000000)%mod;
</span><span class='line'>      for (;i&lt;j+mod;i++)
</span><span class='line'>          val[i%mod] += s[x][i-j];
</span><span class='line'>      x += lowbit(x);
</span><span class='line'>  }
</span><span class='line'>  ret = 0;
</span><span class='line'>  for (i=0;i&lt;mod;i++) ret += (i+1)*val[i];
</span><span class='line'>  return ret;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void dfs(int k, int d)
</span><span class='line'>{
</span><span class='line'>  int i;
</span><span class='line'>  le[k] = now;
</span><span class='line'>  for (i=0;i&lt;tr[k].size();i++)
</span><span class='line'>      dfs(tr[k][i], d+1);
</span><span class='line'>  now++;
</span><span class='line'>  ri[k] = now;
</span><span class='line'>  dep[now] = d;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>  int i,j,k,l,T,cas=0;
</span><span class='line'>  scanf("%d", &T);
</span><span class='line'>  while (T--)
</span><span class='line'>  {
</span><span class='line'>      cas++;
</span><span class='line'>      printf("Case#%d:\n", cas);
</span><span class='line'>      scanf("%d %d %d", &n, &m, &mod);
</span><span class='line'>      for (i=1;i&lt;=n;i++) tr[i].clear();
</span><span class='line'>      for (i=1;i&lt;n;i++) {
</span><span class='line'>          scanf("%d %d", &j, &k);
</span><span class='line'>          pre[k] = j;
</span><span class='line'>          tr[j].push_back(k);
</span><span class='line'>      }
</span><span class='line'>      for (i=1;i&lt;=n;i++) if (pre[i] == 0) break;
</span><span class='line'>      now = 0;
</span><span class='line'>      dfs(i, 0);
</span><span class='line'>      for (i=0;i&lt;=now;i++)
</span><span class='line'>          for (j=0;j&lt;mod;j++) s[i][j] = 0;
</span><span class='line'>      while (m--) {
</span><span class='line'>          scanf("%d", &l);
</span><span class='line'>          if (l == 1) {
</span><span class='line'>              scanf("%d %d", &j, &k);
</span><span class='line'>              update(ri[j], dep[ri[j]], k);
</span><span class='line'>              update(le[j], dep[ri[j]], -k);
</span><span class='line'>          } else {
</span><span class='line'>              scanf("%d", &j);
</span><span class='line'>              k = sum(ri[j], dep[ri[j]]);
</span><span class='line'>              printf("%d\n", k);
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress分类中使用二级目录]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/octopress-3/"/>
    <updated>2014-11-13T23:49:25+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/octopress-3</id>
    <content type="html"><![CDATA[<h4>1.修改plugins/category_list_tag.rb为</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># encoding: UTF-8
</span><span class='line'>module Jekyll
</span><span class='line'>  class CategoryListTag &lt; Liquid::Tag
</span><span class='line'>      def render(context)
</span><span class='line'>          html = ""
</span><span class='line'>          pre = ""
</span><span class='line'>          divout = 0
</span><span class='line'>          categories = context.registers[:site].categories.keys
</span><span class='line'>          categories.sort.each do |category|
</span><span class='line'>              posts_in_category = context.registers[:site].categories[category].size
</span><span class='line'>              category_dir = context.registers[:site].config['category_dir']
</span><span class='line'>              cats = category.split(/~/)
</span><span class='line'>              if cats.size &gt; 1 and cats[0] == pre
</span><span class='line'>                  if divout == 0
</span><span class='line'>                      html &lt;&lt; "&lt;div id='#{pre}' class='divclass'&gt;"
</span><span class='line'>                      divout = 1
</span><span class='line'>                  end
</span><span class='line'>                  html &lt;&lt; "&lt;li&gt;&lt;a href='http://abcdxyzk.github.io/#{category_dir}/#{category.to_url}/?opendiv=#{pre}'&gt;#{cats[1]} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>              else
</span><span class='line'>                  pre = cats[0]
</span><span class='line'>                  if divout &gt; 0
</span><span class='line'>                      html &lt;&lt; "&lt;/div&gt;"
</span><span class='line'>                      divout = 0
</span><span class='line'>                  end
</span><span class='line'>                  html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='##' onmousedown=showDiv('#{pre}')&gt;#{category} &lt;/a&gt;&lt;a href='http://abcdxyzk.github.io/#{category_dir}/#{category.to_url}/'&gt;(#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>              end
</span><span class='line'>          end
</span><span class='line'>          if divout &gt; 0
</span><span class='line'>              html &lt;&lt; "&lt;/div&gt;"
</span><span class='line'>              divout = 0
</span><span class='line'>          end
</span><span class='line'>          html
</span><span class='line'>      end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h4>2.修改source/_includes/custom/asides/category_list.html为：注意去掉’\‘</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>&lt;h1&gt;Categories&lt;/h1&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;style type="text/css"&gt;
</span><span class='line'>
</span><span class='line'>.divclass
</span><span class='line'>{
</span><span class='line'>  display:none;
</span><span class='line'>  font-size:12px;
</span><span class='line'>  position:relative;
</span><span class='line'>  left:0px;
</span><span class='line'>  top:0px;
</span><span class='line'>  padding:0px 30px 0px 30px;
</span><span class='line'>}
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>&lt;script language="javascript" type="text/javascript"&gt;
</span><span class='line'>
</span><span class='line'>function showDiv(divName)
</span><span class='line'>{
</span><span class='line'>  if (document.getElementById(divName).style.display == "block")
</span><span class='line'>      document.getElementById(divName).style.display = "none"; //隐藏层
</span><span class='line'>  else
</span><span class='line'>      document.getElementById(divName).style.display = "block"; //显示层
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function GetRequest(name) {
</span><span class='line'>  var url = location.search; //获取url中"?"符后的字串
</span><span class='line'>      if (url.indexOf("?") != -1) {
</span><span class='line'>      var str = url.substr(1);
</span><span class='line'>      strs = str.split("&");
</span><span class='line'>      for(var i = 0; i &lt; strs.length; i ++) {
</span><span class='line'>          if (name == strs[i].split("=")[0])
</span><span class='line'>          return unescape(strs[i].split("=")[1]);
</span><span class='line'>      }
</span><span class='line'>      }
</span><span class='line'>      return null;
</span><span class='line'>}
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;div id="menu"&gt;
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>{\% category_list \%}
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span><span class='line'>
</span><span class='line'>&lt;script language="javascript" type="text/javascript"&gt;
</span><span class='line'>var divname = GetRequest("opendiv");
</span><span class='line'>if (divname != null)
</span><span class='line'>  showDiv(divname)
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<h4>3.使用二级标签的时候先写一个一级标签，写一个一级~二级标签，例如：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> categories:
</span><span class='line'> - hello
</span><span class='line'> - hello~hi</span></code></pre></td></tr></table></div></figure>


<h4>4.add</h4>

<h5>后来又改成了三级目录，显示调整，单列时间分类等。具体去看源码对应文件。</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress侧边栏添加内容]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/octopress-2/"/>
    <updated>2014-11-13T23:21:52+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/octopress-2</id>
    <content type="html"><![CDATA[<h4>1.添加about页面</h4>

<p>rake new_page[about]<br/>
会生成 source/about/index.markdown 文件。<br/>
编辑该文件的内容。<br/>
然后在头部导航菜单中添加页面的超链接。具体做法是编辑 /source/_includes/custom/navigation.html 文件。</p>

<h4>2.增加链接</h4>

<p>在source/_includes/custom/asides创建blog_link.html，代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>&lt;h1&gt;link&lt;/h1&gt;
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>        &lt;li&gt;
</span><span class='line'>                &lt;a href=http://hi.baidu.com/abcdxyzk target=_blank&gt;My&lt;/a&gt;
</span><span class='line'>        &lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>然后修改_config.yml文件在default_asides中加入custom/asides/blog_link.html。</p>

<!--more-->


<h4>3.支持评论</h4>

<p>Octopress自身不支持评论功能，不过我们可以使用第三方的评论系统，国外的有Disqus。下面介绍怎样在Octopress中使用Disqus。<br/>
首先需要在Disqus注册一个账号，登录后点击Add Disqus to your site，然后添加站点信息site name和url，记下右侧的name<br/>
然后在_config.yml文件中进行下面设置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Disqus Comments
</span><span class='line'>disqus_short_name: 为添加站点信息时的name
</span><span class='line'>disqus_show_comment_count: true</span></code></pre></td></tr></table></div></figure>


<h4>4.添加Categories侧边栏</h4>

<p>增加category_list插件<br/>
保存到 plugins/category_list_tag.rb：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># encoding: UTF-8
</span><span class='line'>    module Jekyll
</span><span class='line'>            class CategoryListTag &lt; Liquid::Tag
</span><span class='line'>                    def render(context)
</span><span class='line'>                            html = ""
</span><span class='line'>                            categories = context.registers[:site].categories.keys
</span><span class='line'>                            categories.sort.each do |category|
</span><span class='line'>                                    posts_in_category = context.registers[:site].categories[category].size
</span><span class='line'>                                    category_dir = context.registers[:site].config['category_dir']
</span><span class='line'>                                    html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://abcdxyzk.github.io/#{category_dir}/#{category.to_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>                            end
</span><span class='line'>                            html
</span><span class='line'>                    end
</span><span class='line'>            end
</span><span class='line'>    end
</span><span class='line'>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</span></code></pre></td></tr></table></div></figure>


<p>注意：一定要在文件的开始添加# encoding: UTF-8这一行，否则无法支持中文分类。<br/>
增加aside<br/>
保存到 source/_includes/asides/category_list.html：注意去掉'\'</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>  &lt;h1&gt;Categories&lt;/h1&gt;
</span><span class='line'>  &lt;ul id="categories"&gt;
</span><span class='line'>      {\% category_list \%}
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>修改_config.yml文件<br/>
将category_list添加到default_asides：<br/>
   default_asides: [asides/category_list.html, asides/recent_posts.html]<br/>
安装这个插件后直接可以支持中文分类，url中使用的是分类的拼音，如「数据库」对应「shu-ju-ku」。如果使用中文分类时遇到各种错误，请参考下面这两篇文章：</p>

<pre><code>http://aiku.me/bar/10393365  
http://blog.sprabbit.com/blog/2012/03/23/octopress/  
</code></pre>

<h4>5.添加tag</h4>

<p>首先到<a href="https://github.com/robbyedwards/octopress-tag-pages  ">https://github.com/robbyedwards/octopress-tag-pages  </a>
和<a href="https://github.com/robbyedwards/octopress-tag-cloudclone  ">https://github.com/robbyedwards/octopress-tag-cloudclone  </a>
这两个项目的代码。这两个项目分别用于产生tag page和tag cloud。 针对这两个插件，需要手工复制一些文件到你的octopress目录。</p>

<p>octopress-tag-pages<br/>
复制tag_generator.rb到plugins目录；<br/>
复制tag_index.html到source/<em>layouts目录。<br/>
复制tag_feed.xml到source/</em>includes/custom/目录。tag_feed.xml文件中 layout: nil 改为 layout: null<br/>
其他文件就不需要复制了，都是些例子。</p>

<p>octopress-tag-cloud<br/>
仅复制tag_cloud.rb到plugins目录即可。<br/>
添加aside，复制以下代码到source/_includes/custom/asides/tags.html。注意去掉'\'</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>  &lt;h1&gt;Tags&lt;/h1&gt;
</span><span class='line'>  &lt;ul class="tag-cloud"&gt;
</span><span class='line'>      {\% tag_cloud font-size: 90-210%, limit: 100, style: para \%}
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>tag_cloud的参数中，style :para指定不使用li来分割，limit限定100个tag，font-size指定tag的大小范围，具体参数参看官方文档。<br/>
最后，当然是在_config.xml的default_asides 中添加这个tag cloud到导航栏：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [... custom/asides/tags.html, ...]</span></code></pre></td></tr></table></div></figure>


<h5>bug:</h5>

<p>除0错误，tag_cloud.rb中<br/>
weight = (Math.log(count) - Math.log(min))/(Math.log(max) - Math.log(min))<br/>
当max==min时出错<br/>
一下修复同时改成像Categories一样显示文章数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- a/plugins/tag_cloud.rb
</span><span class='line'>+++ b/plugins/tag_cloud.rb
</span><span class='line'>@@ -54,7 +54,7 @@ def initialize(name, params, tokens)
</span><span class='line'> # map: [[tag name, tag count]] -&gt; [[tag name, tag weight]]
</span><span class='line'>        weighted = count.map do |name, count|
</span><span class='line'> # logarithmic distribution
</span><span class='line'>-       weight = (Math.log(count) - Math.log(min))/(Math.log(max) - Math.log(min))
</span><span class='line'>+       weight = count
</span><span class='line'>        [name, weight]
</span><span class='line'>        end
</span><span class='line'> # get the top @limit tag pairs when a limit is given, unless the sort method is random
</span><span class='line'>@@ -92,12 +92,17 @@ def initialize(name, params, tokens)
</span><span class='line'>        html = ""
</span><span class='line'> # iterate over the weighted tag Array and create the tag items
</span><span class='line'>        weighted.each_with_index do |tag, i|
</span><span class='line'>-       name, weight = tag
</span><span class='line'>+       name, weight_orig = tag
</span><span class='line'>+        if min == max
</span><span class='line'>+               weight = 0.5
</span><span class='line'>+       else
</span><span class='line'>+               weight = (Math.log(weight_orig) - Math.log(min))/(Math.log(max) - Math.log(min))
</span><span class='line'>+       end
</span><span class='line'>        size = size_min + ((size_max - size_min) * weight).to_f
</span><span class='line'>        size = sprintf("%.#{@precision}f", size)
</span><span class='line'>        slug = name.to_url
</span><span class='line'>        @separator = "" if i == (weighted.size - 1)
</span><span class='line'>-       html &lt;&lt; "#{@tag_before}&lt;a style=\"font-size: #{size}#{unit}\" href=\"/#{dir}/#{slug}/\"&gt;#{name}&lt;/a&gt;#{@separator}#{@tag_after}\n"
</span><span class='line'>+       html &lt;&lt; "#{@tag_before}&lt;a style=\"font-size: #{size}#{unit}\" href=\"/#{dir}/#{slug}/\"&gt;#{name}(#{weight_orig})&lt;/a&gt;#{@separator}#
</span><span class='line'>        end
</span><span class='line'>        html
</span><span class='line'>        end</span></code></pre></td></tr></table></div></figure>


<h6>如果会出现:</h6>

<p>添加超过一个tags之后，rake generate就会开始报错了： Error :Liquid Exception: comparison of Array with Array failed in page<br/>
只需要将1个tag重复2次以上使用就可以解决。<br/>
1.第1个post加的tag是：tag1，第2个post加的tag是：tag1<br/>
2.rake generate<br/>
3.第2个post的tag随便改：tagXXX</p>

<h4>6.近期评论</h4>

<p>复制以下代码到source/_includes/custom/asides/recent_comments.html，名字改成自己的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section id="comment_sidebar"&gt;
</span><span class='line'>&lt;h1&gt;近期评论&lt;/h1&gt;
</span><span class='line'>&lt;script type="text/javascript" src="http://abcdxyzk.disqus.com/recent_comments_widget.js?num_items=10&hide_avatars=0&avatar_size=32&excerpt_length=20"&gt;&lt;/script&gt;&lt;a href="http://disqus.com/"&gt;Powered by Disqus&lt;/a&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>修改<em>config.yml<br/>
最后，当然是在</em>config.xml的default_asides 中添加这个tag cloud到导航栏：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [... custom/asides/recent_comments.html, ...]</span></code></pre></td></tr></table></div></figure>


<h4>7.优化</h4>

<p>删除<br/>
 source/<em>includes/custom/head.html<br/>
 source/</em>includes/head.html<br/>
中googleapis</p>

<h4>8.BUG，最新octopress的已经修复</h4>

<p>除了根目录，其他目录无法将右侧缩到底部。<br/>
可以修改一下source/_includes/head.html文件，去掉src中的'.&lsquo;，改成如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;script&gt;!window.jQuery && document.write(unescape('%3Cscript src="http://abcdxyzk.github.io/javascripts/libs/jquery.min.js"%3E%3C/script%3E'))&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress+github建立个人博客]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/octopress-1/"/>
    <updated>2014-11-13T22:59:03+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/octopress-1</id>
    <content type="html"><![CDATA[<h4>Step 1 安装git ruby nodejs</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git zlib1g-dev libyaml-dev openssl libssl-dev tcl-dev tk-dev node/nodejs
</span><span class='line'>sudo apt-get install ruby ruby-dev 安装的版本偏低不行，要1.9.3以上https://www.ruby-lang.org/en/downloads/</span></code></pre></td></tr></table></div></figure>


<h4>Step 2 准备octopress</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress    # 如果你使用RVM, 你会被询问你是否信任 .rvmrc 文件 (选择 yes).
</span><span class='line'>ruby --version  # 这条命令应该输出 Ruby 1.9.3
</span><span class='line'>然后安装依赖
</span><span class='line'>sudo gem install bundler
</span><span class='line'>rbenv rehash    # 如果你使用 rbenv, 执行 rehash 以运行 bundle 命令 (好像不需要这条)
</span><span class='line'>bundle install    # 在octopress目录运行
</span><span class='line'>最后安装默认主题
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h4>Step 3 部署到github上</h4>

<p>(1)以 用户名/用户名.github.io 的格式建立一个新项目。<br/>
(2)部署<br/>
首先运行<br/>
rake setup_github_pages<br/>
这条命令会询问你刚才建立的项目的地址，按提示输入，然后就会生成一些用于部署的文件和<em>deploy目录，</em>deploy目录就是对应master分支。 接着执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy  # 会cd到_deploy目录运行 commit 和 push</span></code></pre></td></tr></table></div></figure>


<p>这两条命令会生成博客内容，然后添加到git中，自动执行git commit然后推送到主分支(master branch)。几分钟后，你会收到github通知你你的提交已经被接受并发布了你的网站的email。</p>

<p>rake generate可能报错：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error reading file /var/lib/gems/1.9.1/gems/jekyll-sitemap-0.6.1/lib/sitemap.xml: No such file or directory - /home/kk/kk/github/octopress/source/var/lib/gems/1.9.1/gems/jekyll-sitemap-0.6.1/lib/sitemap.xml</span></code></pre></td></tr></table></div></figure>


<p>是jekyll-sitemap-0.6.1的bug，修改Gemfile.lock, jekyll-sitemap (0.6.1) 改成 jekyll-sitemap (0.6.3), 再</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>不要忘记把为你的博客提交source（Don’t forget to commit the source for your blog）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source # 记住只push source，要push master就得先pull一下，因为_deploy目录也对应master，而他一运行rake deploy就会push</span></code></pre></td></tr></table></div></figure>


<h4>Step 4 发布博客</h4>

<p>你发布的文章被放在source/<em>posts目录下，并按照Jekyll的命名规则命名：YYYY-MM-DD-post- title.markdown。这个名字会被用于生成url且日期会被用于为文章按时间排序。 但这样比较麻烦，于是Octopress提供了一个rake task来自动按照正确的命名规则建立博文，并生成基本内容。<br/>
格式是：rake new_post[&ldquo;title&rdquo;]<br/>
样例：<br/>
    rake new_post[&ldquo;tt&rdquo;]<br/>
    # 这条命令会创建 source/</em>posts/2011-07-03-tt.markdown文件<br/>
会生成如下内容的文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "tt"
</span><span class='line'>date: 2011-07-03 5:59
</span><span class='line'>comments: true
</span><span class='line'>external-url:
</span><span class='line'>categories:
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>你可以在这里设置评论功能开关，设置分类。如果你的博客有多个作者共用，你可以在文件中添加【author:Your Name】。如果你在编辑一个草稿，你可以添加【published： false】以使其在生成博客内容时被自动忽略。</p>

<h4>Step 5 生成 &amp; 预览</h4>

<p>rake generate # 在公开目录中生成博文和页面
rake watch # 查看 source/ and sass/ 的改动
rake preview # 在浏览器中输入 <a href="http://localhost:4000">http://localhost:4000</a> 即可预览。</p>

<h4>Step 6 推送到github</h4>

<p>rake deploy
然后过几分钟，github就会自动更新你的博客了。<br/>
注意：执行rake deploy前一定要先rake generate一下<br/>
不要忘记把为你的博客提交source（Don’t forget to commit the source for your blog）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source </span></code></pre></td></tr></table></div></figure>


<hr />

<h4>另一台机子的时候</h4>

<p>安装需要软件，然后clone自己的代码库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -b source origin/source
</span><span class='line'>sudo gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install
</span><span class='line'>rake setup_github_pages
</span><span class='line'>mkdir _deploy
</span><span class='line'>cd _deploy
</span><span class='line'>git init
</span><span class='line'>git remote add origin git@github.com:abcdxyzk/abcdxyzk.github.io.git
</span><span class='line'>git pull origin master
</span><span class='line'>cd ..</span></code></pre></td></tr></table></div></figure>


<p><em>deploy目录就是对应master分支，所以必须要先保持一致<br/>
不然先运行rake deploy会在</em>deploy目录先commit，再push，这就会导致其他和另外机子上提交的冲突。<br/>
如果先rake deploy的话，可以在_deploy目录reset回去，然后pull。</p>

<p>记住多台机子操作的时候一开始先</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>需要保持_deploy/.git/config有master分支
</span><span class='line'>git pull
</span><span class='line'>cd _deploy
</span><span class='line'>git pull</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css 二级菜单]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/lang-css-menu/"/>
    <updated>2014-11-13T14:52:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/lang-css-menu</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;style type="text/css"&gt;
</span><span class='line'>
</span><span class='line'>.divclass
</span><span class='line'>{
</span><span class='line'>  display:none;
</span><span class='line'>  font-size:12px;
</span><span class='line'>  position:relative;
</span><span class='line'>  left:0px;
</span><span class='line'>  top:0px;
</span><span class='line'>  padding:5px 10px 0px 10px;
</span><span class='line'>  width:320px;
</span><span class='line'>}
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>&lt;script language="javascript" type="text/javascript"&gt;
</span><span class='line'>
</span><span class='line'>function showDiv(divName)
</span><span class='line'>{
</span><span class='line'>  if (document.getElementById(divName).style.display == "block")
</span><span class='line'>      document.getElementById(divName).style.display = "none"; //隐藏层
</span><span class='line'>  else
</span><span class='line'>      document.getElementById(divName).style.display = "block"; //显示层
</span><span class='line'>}
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;div id="menu"&gt;
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;&lt;a href="#" onmousedown="showDiv('div1')"&gt;菜单一&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>  &lt;div id="div1" class=divclass&gt;
</span><span class='line'>  &lt;a href="#" onmousedown="showDiv('div2')"&gt;子菜单一&lt;/a&gt;
</span><span class='line'>      &lt;div id="div2" class=divclass&gt;
</span><span class='line'>      &lt;ul&gt;
</span><span class='line'>      &lt;li&gt;&lt;a href="#"&gt;子菜单一&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>      &lt;li&gt;&lt;a href="#"&gt;子菜单二&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>      &lt;ul&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;li&gt;&lt;a href="#" onmousedown="showDiv('div3')"&gt;菜单三&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;div id="div3" class=divclass&gt;
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>&lt;li&gt;&lt;a href="#" onmousedown="showDiv('div4')"&gt;菜单四&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;div id="div4" class=divclass&gt;
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>  &lt;li&gt;&lt;a href="#"&gt;子菜单一&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;a href="#"&gt;子菜单二&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span><span class='line'>&lt;script language="javascript" type="text/javascript"&gt;
</span><span class='line'>showDiv('div1');
</span><span class='line'>&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/08/hello/"/>
    <updated>2014-11-08T18:19:17+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/08/hello</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ar ranlib nm 命令--制作.a文件]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/06/command-ar/"/>
    <updated>2014-11-06T23:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/06/command-ar</id>
    <content type="html"><![CDATA[<h4>1.ar基本用法</h4>

<h5>功能说明：建立或修改备存文件，或是从备存文件中抽取文件。</h5>

<p>ar命令可以用来创建、修改库，也可以从库中提出单个模块。库是一单独的文件，里面包含了按照特定的结构组织起来的其它的一些文件（称做此库文件的member）。原始文件的内容、模式、时间戳、属主、组等属性都保留在库文件中。</p>

<!--more-->


<h5>下面是ar命令的格式：</h5>

<p>　　ar [-]{dmpqrtx}[abcfilNoPsSuvV] [membername] [count] archive files&hellip;<br/>
　　例如我们可以用ar rv libtest.a hello.o hello1.o来 生成一个库，库名字是test，链接时可以用-ltest链接。该库中存放了两个模块hello.o和hello1.o。选项前可以有‘-&lsquo;字符，也可以 没有。下面我们来看看命令的操作选项和任选项。现在我们把{dmpqrtx}部分称为操作选项，而[abcfilNoPsSuvV]部分称为任选项。<br/>
　　{dmpqrtx}中的操作选项在命令中只能并且必须使用其中一个，它们的含义如下：<br/>
    d：从库中删除模块。按模块原来的文件名指定要删除的模块。如果使用了任选项v则列出被删除的每个模块。<br/>
    m：该操作是在一个库中移动成员。当库中如果有若干模块有相同的符号定义(如函数定义)，则成员的位置顺序很重要。如果没有指定任选项，任何指定的成员将移到库的最后。也可以使用'a'，'b'，或'I'任选项移动到指定的位置。<br/>
    p：显示库中指定的成员到标准输出。如果指定任选项v，则在输出成员的内容前，将显示成员的名字。如果没有指定成员的名字，所有库中的文件将显示出来。<br/>
    q：快速追加。增加新模块到库的结尾处。并不检查是否需要替换。'a'，'b'，或'I'任选项对此操作没有影响，模块总是追加的库的结尾处。如果使用了任选项v则列出每个模块。 这时，库的符号表没有更新，可以用'ar s'或ranlib来更新库的符号表索引。<br/>
    r：在库中插入模块(替换)。当插入的模块名已经在库中存在，则替换同名的模块。如果若干模块中有一个模块在库中不存在，ar显示一个错误消息，并不替换其他同名模块。默认的情况下，新的成员增加在库的结尾处，可以使用其他任选项来改变增加的位置。<br/>
    t：显示库的模块表清单。一般只显示模块名。<br/>
    x：从库中提取一个成员。如果不指定要提取的模块，则提取库中所有的模块。<br/>
　　下面在看看可与操作选项结合使用的任选项：<br/>
    a：在库的一个已经存在的成员后面增加一个新的文件。如果使用任选项a，则应该为命令行中membername参数指定一个已经存在的成员名。<br/>
    b：在库的一个已经存在的成员前面增加一个新的文件。如果使用任选项b，则应该为命令行中membername参数指定一个已经存在的成员名。<br/>
    c：创建一个库。不管库是否存在，都将创建。<br/>
    f：在库中截短指定的名字。缺省情况下，文件名的长度是不受限制的，可以使用此参数将文件名截短，以保证与其它系统的兼容。<br/>
    i：在库的一个已经存在的成员前面增加一个新的文件。如果使用任选项i，则应该为命令行中membername参数指定一个已经存在的成员名(类似任选项b)。<br/>
    l：暂未使用<br/>
    N：与count参数一起使用，在库中有多个相同的文件名时指定提取或输出的个数。<br/>
    o：当提取成员时，保留成员的原始数据。如果不指定该任选项，则提取出的模块的时间将标为提取出的时间。<br/>
    P：进行文件名匹配时使用全路径名。ar在创建库时不能使用全路径名（这样的库文件不符合POSIX标准），但是有些工具可以。<br/>
    s：写入一个目标文件索引到库中，或者更新一个存在的目标文件索引。甚至对于没有任何变化的库也作该动作。对一个库做ar s等同于对该库做ranlib。<br/>
    S：不创建目标文件索引，这在创建较大的库时能加快时间。<br/>
    u：一般说来，命令ar r&hellip;插入所有列出的文件到库中，如果你只想插入列出文件中那些比库中同名文件新的文件，就可以使用该任选项。该任选项只用于r操作选项。<br/>
    v：该选项用来显示执行操作选项的附加信息。<br/>
    V：显示ar的版本。</p>

<h4>2.ranlib命令</h4>

<p>静态库文件需要使用“ar”来创建和维护。当给静态库增建一个成员时（加入一个.o文件到静态库中），“ar”可直接 将需要增加的.o文件简单的追加到静态库的末尾。之后当我们使用这个库进行连接生成可执行文件时，链接程序“ld”却提示错误，这可能是：主程序使用了之 前加入到库中的.o文件中定义的一个函数或者全局变量，但连接程序无法找到这个函数或者变量。</p>

<p>这个问题的原因是：之前我们将编译完成的.o文件直接加入到了库的末尾，却并没有更新库的有效符号表。连接程序进行连接时，在静态库的符号索引表中无法定 位刚才加入的.o文件中定义的函数或者变量。这就需要在完成库成员追加以后让加入的所有.o文件中定义的函数（变量）有效，完成这个工作需要使用另外一个 工具“ranlib”来对静态库的符号索引表进行更新。</p>

<p>我们所使用到的静态库（文档文件）中，存在这样一个特殊的成员，它的名字是“<strong>.SYMDEF”。它包含了静态库中所有成员所定义的有效符号（函数名、 变量名）。因此，当为库增加了一个成员时，相应的就需要更新成员“</strong>.SYMDEF”，否则所增加的成员中定义的所有的符号将无法被连接程序定位。完成 更新的命令是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ranlib ARCHIVEFILE </span></code></pre></td></tr></table></div></figure>


<p>通常在Makefile中我们可以这样来实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>libfoo.a: libfoo.a(x.o) libfoo.a(y.o) ... 
</span><span class='line'>ranlib libfoo.a </span></code></pre></td></tr></table></div></figure>


<p>它所实现的是在更新静态库成员“x.o”和“y.o”之后，对静态库的成员“__.SYMDEF”进行更新（更新库的符号索引表）。
如果我们使用GNU ar工具来维护、管理静态库，我们就不需要考虑这一步。GNU ar本身已经提供了在更新库的同时更新符号索引表的功能（这是默认行为，也可以通过命令行选项控制ar的具体行为。可参考 GNU ar工具的man手册）。</p>

<p>GNU工具中ar是用来制作库文件.a的，但同时还提供了一个ranlib，从手册上看ranlib相当于ar -s，为什么这样呢？<br/>
这是由于最早在Unix系统上ar程序是单纯用来打包多个.o到.a（类似于tar做的事情），而不处理.o里的符号表。Linker程序则需 要.a文件提供一个完整的符号表，所以当时就写了单独的ranlib程序用来产生linker所需要的符号信息。也就是说，产生一个对linker合 格的的.a文件需要做ar和ranlib两步 。<br/>
很快，Unix厂商就发现ranlib做得事情完全可以合并到ar里面去，于是ar程序的升级版本就包括了ranlib的功能，但早期的很多项目的Makefile都已经是按照两步式的方法生成.a，所以为了保证这些早期文件的兼容性，ranlib被保留下来了。<br/>
如今，GNU/Linux系统上，ranlib依然存在，当然大部分项目已经不使用它了，因为ar -s就做了ranlib的工作。<br/>
历史通常是进步和妥协的混合！</p>

<h4>3.nm基本用法命令</h4>

<p>　　nm用来列出目标文件的符号清单。下面是nm命令的格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nm [-a|--debug-syms] [-g|--extern-only] [-B][-C|--demangle] [-D|--dynamic] [-s|--print-armap][-o|--print-file-name] [-n|--numeric-sort][-p|--no-sort] [-r|--reverse-sort] [--size-sort][-u|--undefined-only] [-l|--line-numbers] [--help][--version] [-t radix|--radix=radix][-P|--portability] [-f format|--format=format][--target=bfdname] [objfile...]</span></code></pre></td></tr></table></div></figure>


<p>如果没有为nm命令指出目标文件，则nm假定目标文件是a.out。下面列出该命令的任选项，大部分支持"-&ldquo;开头的短格式和"—"开头的长格式。<br/>
-A、-o或&ndash;print-file-name：在找到的各个符号的名字前加上文件名，而不是在此文件的所有符号前只出现文件名一次。<br/>
    例如nm libtest.a的输出如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CPThread.o:
</span><span class='line'>00000068 T Main__8CPThreadPv
</span><span class='line'>00000038 T Start__8CPThread
</span><span class='line'>00000014 T _._8CPThread
</span><span class='line'>00000000 T __8CPThread
</span><span class='line'>00000000 ? __FRAME_BEGIN__
</span><span class='line'>.......................................
</span><span class='line'>则nm -A 的输出如下：
</span><span class='line'>libtest.a:CPThread.o:00000068 T Main__8CPThreadPv
</span><span class='line'>libtest.a:CPThread.o:00000038 T Start__8CPThread
</span><span class='line'>libtest.a:CPThread.o:00000014 T _._8CPThread
</span><span class='line'>libtest.a:CPThread.o:00000000 T __8CPThread
</span><span class='line'>libtest.a:CPThread.o:00000000 ? __FRAME_BEGIN__
</span><span class='line'>..................................................................</span></code></pre></td></tr></table></div></figure>


<p>nm命令<br/>
    -a或&ndash;debug-syms：显示调试符号。<br/>
    -B：等同于&ndash;format=bsd，用来兼容MIPS的nm。<br/>
    -C或&ndash;demangle：将低级符号名解码(demangle)成用户级名字。这样可以使得C++函数名具有可读性。<br/>
    -D或&ndash;dynamic：显示动态符号。该任选项仅对于动态目标(例如特定类型的共享库)有意义。<br/>
    -f format：使用format格式输出。format可以选取bsd、sysv或posix，该选项在GNU的nm中有用。默认为bsd。<br/>
    -g或&ndash;extern-only：仅显示外部符号。<br/>
    -n、-v或&ndash;numeric-sort：按符号对应地址的顺序排序，而非按符号名的字符顺序。<br/>
    -p或&ndash;no-sort：按目标文件中遇到的符号顺序显示，不排序。<br/>
    -P或&ndash;portability：使用POSIX.2标准输出格式代替默认的输出格式。等同于使用任选项-f posix。<br/>
    -s或&ndash;print-armap：当列出库中成员的符号时，包含索引。索引的内容包含：哪些模块包含哪些名字的映射。<br/>
    -r或&ndash;reverse-sort：反转排序的顺序(例如，升序变为降序)。<br/>
    &ndash;size-sort：按大小排列符号顺序。该大小是按照一个符号的值与它下一个符号的值进行计算的。<br/>
    -t radix或&ndash;radix=radix：使用radix进制显示符号值。radix只能为"d"表示十进制、"o"表示八进制或"x"表示十六进制。<br/>
    &ndash;target=bfdname：指定一个目标代码的格式，而非使用系统的默认格式。<br/>
    -u或&ndash;undefined-only：仅显示没有定义的符号(那些外部符号)。<br/>
    -l或&ndash;line-numbers：对每个符号，使用调试信息来试图找到文件名和行号。对于已定义的符号，查找符号地址的行号。对于未定义符号，查找指向符号重定位入口的行号。如果可以找到行号信息，显示在符号信息之后。<br/>
    -V或&ndash;version：显示nm的版本号。<br/>
    &ndash;help：显示nm的任选项。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gcc同时使用动态和静态链接]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/06/complier-static-dynamic-ld/"/>
    <updated>2014-11-06T14:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/06/complier-static-dynamic-ld</id>
    <content type="html"><![CDATA[<p>gcc &ndash;static a.c -Wl,-Bstatic -lm -Wl,-Bdynamic -lc</p>

<p>其中用到的两个选项：-Wl,-Bstatic和-Wl,-Bdynamic。这两个选项是gcc的特殊选项，它会将选项的参数传递给链接器，作为 链接器的选项。比如-Wl,-Bstatic告诉链接器使用-Bstatic选项，该选项是告诉链接器，对接下来的-l选项使用静态链 接；-Wl,-Bdynamic就是告诉链接器对接下来的-l选项使用动态链接。下面是man gcc对-Wl,option的描述，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-Wl,option  
</span><span class='line'>       Pass option as an option to the linker.  If option contains commas, it is   
</span><span class='line'>       split into multiple options at the commas.  You can use this syntax to pass  
</span><span class='line'>       an argument to the option.  For example, -Wl,-Map,output.map passes -Map output.map  
</span><span class='line'>       to the linker.  When using the GNU linker, you can also get the same effect with   
</span><span class='line'>       -Wl,-Map=output.map.  </span></code></pre></td></tr></table></div></figure>


<p>下面是man ld分别对-Bstatic和-Bdynamic的描述，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-Bdynamic  
</span><span class='line'>-dy  
</span><span class='line'>-call_shared  
</span><span class='line'>       Link against dynamic libraries. You may use this option multiple times on the  
</span><span class='line'>       command line: it affects library searching for -l options which follow it.  
</span><span class='line'>
</span><span class='line'>-Bstatic  
</span><span class='line'>-dn  
</span><span class='line'>-non_shared  
</span><span class='line'>-static  
</span><span class='line'>       Do not link against shared libraries. You may use this option multiple times on   
</span><span class='line'>       the command line: it affects library searching for -l options which follow it.   
</span><span class='line'>       This option also implies --unresolved-symbols=report-all.  This option can be   
</span><span class='line'>       used with -shared.  Doing so means that a shared library is being created but   
</span><span class='line'>       that all of the library's external references must be resolved by pulling in   
</span><span class='line'>       entries from static libraries.  </span></code></pre></td></tr></table></div></figure>


<p>　　值得注意的是对-static的描述：-static和-shared可以同时存在，这样会创建共享库，但该共享库引用的其他库会静态地链接到该共享库中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCC制作Library--shared部分相当不错]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/06/compiler-gcc-lib/"/>
    <updated>2014-11-06T14:49:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/06/compiler-gcc-lib</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/alex_ww/article/details/4544207">贴自http://blog.csdn.net/alex_ww/article/details/4544207</a></p>

<h3>Library可分成三种，static、shared与dynamically loaded。</h3>

<h4>1. Static libraries</h4>

<p>Static 链接库用于静态链接，简单讲是把一堆object檔用ar(archiver)包装集合起来，文件名以 `.a' 结尾。优点是执行效能通常会比后两者快，而且因为是静态链接，所以不易发生执行时找不到library或版本错置而无法执行的问题。缺点则是档案较大，维护度较低；例如library如果发现bug需要更新，那么就必须重新连结执行档。</p>

<h5>1.1 编译</h5>

<p>编译方式很简单，先例用 `-c' 编出 object 檔，再用 ar 包起来即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>____ hello.c ____
</span><span class='line'>#include
</span><span class='line'>void hello(){ printf("Hello "); }
</span><span class='line'>____ world.c ____
</span><span class='line'>#include
</span><span class='line'>void world(){ printf("world."); }
</span><span class='line'>____ mylib.h ____
</span><span class='line'>void hello();
</span><span class='line'>void world();</span></code></pre></td></tr></table></div></figure>


<p>$ gcc -c hello.c world.c /* 编出 hello.o 与 world.o */ <br/>
$ ar rcs libmylib.a hello.o world.o /* 包成 limylib.a */ <br/>
这样就可以建出一个档名为 libmylib.a 的檔。输出的档名其实没有硬性规定，但如果想要配合 gcc 的 &lsquo;-l&rsquo; 参数来连结，一定要以 &lsquo;lib&rsquo; 开头，中间是你要的library名称，然后紧接着 &lsquo;.a&rsquo; 结尾。</p>

<h5>1.2 使用</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>____ main.c ____
</span><span class='line'>#include "mylib.h"
</span><span class='line'>int main() {
</span><span class='line'>hello();
</span><span class='line'>world();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>使用上就像与一般的 object 档连结没有差别。<br/>
$ gcc main.c libmylib.a<br/>
也可以配合 gcc 的 `-l' 参数使用<br/>
$ gcc main.c -L. -lmylib<br/>
&lsquo;-Ldir&rsquo; 参数用来指定要搜寻链接库的目录，'.&lsquo; 表示搜寻现在所在的目录。通常默认会搜 /usr/lib 或 /lib 等目录。<br/>
&rsquo;-llibrary' 参数用来指定要连结的链接库，'mylib' 表示要与mylib进行连结，他会搜寻library名称前加'lib'后接'.a'的档案来连结。<br/>
$ ./a.out<br/>
Hello world.</p>

<h3>2. Shared libraries</h3>

<p>Shared library 会在程序执行起始时才被自动加载。因为链接库与执行档是分离的，所以维护弹性较好。有两点要注意，shared library是在程序起始时就要被加载，而不是执行中用到才加载，而且在连结阶段需要有该链接库才能进行连结。<br/>
首先有一些名词要弄懂，soname、real name与linker name。<br/>
soname 用来表示是一个特定 library 的名称，像是 libmylib.so.1 。前面以 &lsquo;lib&rsquo; 开头，接着是该 library 的名称，然后是 &lsquo;.so&rsquo; ，接着是版号，用来表名他的界面；如果接口改变时，就会增加版号来维护兼容度。<br/>
real name 是实际放有library程序的文件名，后面会再加上 minor 版号与release 版号，像是 libmylib.so.1.0.0 。<br/>
一般来说，版号的改变规则是(印象中在 APress-Difinitive Guide to GCC中有提到，但目前手边没这本书)，最后缀的release版号用于程序内容的修正，接口完全没有改变。中间的minor用于有新增加接口，但相旧接口没改变，所以与旧版本兼容。最前面的version版号用于原接口有移除或改变，与旧版不兼容时。<br/>
linker name是用于连结时的名称，是不含版号的 soname ，如: libmylib.so。<br/>
通常 linker name与 real name是用 ln 指到对应的 real name ，用来提供弹性与维护性。</p>

<h5>2.1 编译</h5>

<p>shared library的制作过程较复杂。<br/>
$ gcc -c -fPIC hello.c world.c<br/>
编译时要加上 -fPIC 用来产生 position-independent code。也可以用 -fpic参数。 (不太清楚差异，只知道 -fPIC 较通用于不同平台，但产生的code较大，而且编译速度较慢)。<br/>
$ gcc -shared -Wl,-soname,libmylib.so.1 -o libmylib.so.1.0.0 /<br/>
hello.o world.o<br/>
-shared 表示要编译成 shared library<br/>
-Wl 用于参递参数给linker，因此-soname与libmylib.so.1会被传给linker处理。<br/>
-soname用来指名 soname 为 limylib.so.1<br/>
library会被输出成libmylib.so.1.0.0 (也就是real name)<br/>
若不指定 soname 的话，在编译结连后的执行档会以连时的library档名为soname，并载入他。否则是载入soname指定的library档案。<br/>
可以利用 objdump 来看 library 的 soname。<br/>
$ objdump -p libmylib.so | grep SONAME<br/>
SONAME libmylib.so.1<br/>
若不指名-soname参数的话，则library不会有这个字段数据。<br/>
在编译后再用 ln 来建立 soname 与 linker name 两个档案。<br/>
$ ln -s libmylib.so.1.0.0 libmylib.so<br/>
$ ln -s libmylib.so.1.0.0 libmylib.so.1</p>

<h5>2.2 使用</h5>

<p>与使用 static library 同。<br/>
$ gcc main.c libmylib.so<br/>
以上直接指定与 libmylib.so 连结。<br/>
或用<br/>
$ gcc main.c -L. -lmylib<br/>
linker会搜寻 libmylib.so 来进行连结。<br/>
如果目录下同时有static与shared library的话，会以shared为主。<br/>
使用 -static 参数可以避免使用shared连结。<br/>
$ gcc main.c -static -L. -lmylib<br/>
此时可以用 ldd 看编译出的执行档与shared链接库的相依性<br/>
$ldd a.out<br/>
linux-gate.so.1 => (0xffffe000)<br/>
libmylib.so.1 => not found<br/>
libc.so.6 => /lib/libc.so.6 (0xb7dd6000)<br/>
/lib/ld-linux.so.2 (0xb7f07000)<br/>
输出结果显示出该执行文件需要 libmylib.so.1 这个shared library。<br/>
会显示 not found 因为没指定该library所在的目录，所找不到该library。<br/>
因为编译时有指定-soname参数为 libmylib.so.1 的关系，所以该执行档会加载libmylib.so.1。否则以libmylib.so连结，执行档则会变成要求加载libmylib.so
$ ./a.out<br/>
./a.out: error while loading shared libraries: libmylib.so.1:<br/>
cannot open shared object file: No such file or directory<br/>
因为找不到 libmylib.so.1 所以无法执行程序。<br/>
有几个方式可以处理。<br/>
a. 把 libmylib.so.1 安装到系统的library目录，如/usr/lib下<br/>
b. 设定 /etc/ld.so.conf ，加入一个新的library搜寻目录，并执行ldconfig<br/>
更新快取<br/>
c. 设定 LD_LIBRARY_PATH 环境变量来搜寻library<br/>
这个例子是加入当前目录来搜寻要载作的library<br/>
$ LD_LIBRARY_PATH=. ./a.out<br/>
Hello world.</p>

<h4>3. Dynamically loaded libraries</h4>

<p>Dynamicaaly loaded libraries 才是像 windows 所用的 DLL ，在使用到<br/>
时才加载，编译连结时不需要相关的library。动态载入库常被用于像plug-ins的应用。</p>

<h5>3.1 使用方式</h5>

<p>动态加载是透过一套 dl function来处理。<br/>
    #include &lt;dlfcn.h><br/>
    void *dlopen(const char *filename, int flag);<br/>
开启加载 filename 指定的 library。<br/>
    void *dlsym(void *handle, const char *symbol);<br/>
取得 symbol 指定的symbol name在library被加载的内存地址。<br/>
    int dlclose(void *handle);<br/>
关闭dlopen开启的handle。<br/>
    char *dlerror(void);<br/>
传回最近所发生的错误讯息。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>____ dltest.c ____
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;stddef.h&gt;
</span><span class='line'>#include &lt;dlfcn.h&gt;
</span><span class='line'>int main() {
</span><span class='line'>void *handle;
</span><span class='line'>void (*f)();
</span><span class='line'>char *error;
</span><span class='line'>/* 开启之前所撰写的 libmylib.so 链接库 */
</span><span class='line'>handle = dlopen("./libmylib.so", RTLD_LAZY);
</span><span class='line'>if( !handle ) {
</span><span class='line'>fputs( dlerror(), stderr);
</span><span class='line'>exit(1);
</span><span class='line'>}
</span><span class='line'>/* 取得 hello function 的 address */
</span><span class='line'>f = dlsym(handle, "hello");
</span><span class='line'>if(( error=dlerror())!=NULL) {
</span><span class='line'>fputs(error, stderr);
</span><span class='line'>exit(1);
</span><span class='line'>}
</span><span class='line'>/* 呼叫该 function */
</span><span class='line'>f();
</span><span class='line'>dlclose(handle);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>编译时要加上 -ldl 参数来与 dl library 连结<br/>
$ gcc dltest.c -ldl<br/>
结果会印出 Hello 字符串<br/>
$ ./a.out<br/>
Hello<br/>
关于dl的详细内容请参阅 man dlopen</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crash vs gdb work]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/06/debug-crash-work/"/>
    <updated>2014-11-06T10:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/06/debug-crash-work</id>
    <content type="html"><![CDATA[<p><a href="https://www.redhat.com/archives/crash-utility/2014-October/msg00002.html">贴自https://www.redhat.com/archives/crash-utility/2014-October/msg00002.html</a><br/>
Yes, sure. GDB works very differently from crash. There main conceptual<br/>
difference is that GDB only handles with VIRTUAL addresses, while the<br/>
crash utility first translates everything to PHYSICAL addresses.<br/>
Consequently, GDB ignores the PhysAddr field in ELF program headers,<br/>
and crash ignores the VirtAddr field.</p>

<p>I have looked at some of my ELF dump files, and it seems to me that<br/>
VirtAddr is not filled correctly, except for kernel text and static<br/>
data (address range 0xffffffff80000000-0xffffffff9fffffff). Your linked<br/>
list is most likely allocated in the direct mapping<br/>
(0xffff880000000000-0xffffc7ffffffffff). However, I found out that the<br/>
virtual addresses for the direct mapping segments are wrong, e.g. my<br/>
dump file specifies it at 0xffff810000000000 (hypervisor area). This is<br/>
most likely a bug in the kernel code that implements /proc/vmcore.</p>

<p>But that&rsquo;s beside the point. Why?  The Linux kernel maps many physical<br/>
pages more than once into the virtual address space. It would be waste<br/>
of space if you saved it multiple times (for each virtual address that<br/>
maps to it). The crash utility can translate each virtual address to<br/>
the physical address and map it onto ELF segments using PhysAddr.<br/>
Incidentally, the PhysAddr fields are correct in my dump files&hellip;</p>

<p>I&rsquo;m glad you&rsquo;re interested in using GDB to read kernel dump files,<br/>
especially if you&rsquo;re willing to make it work for real. I have proposed<br/>
more than once that the crash utility be re-implemented in pure gdb.<br/>
Last time I looked (approx. 1.5 years ago) the main missing pieces were:</p>

<ol>
<li> Use of physical addresses (described above)</li>
<li> Support for multiple virtual address spaces (for different process<br/>
 contexts)</li>
<li> Ability to read compressed kdump files</li>
<li> Ability to use 64-bit files on 32-bit platforms (to handle PAE)</li>
</ol>


<p>HTH,<br/>
Petr Tesarik</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[静态编译crash + xbt + bt -H]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/04/debug-crash-static/"/>
    <updated>2014-11-04T18:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/04/debug-crash-static</id>
    <content type="html"><![CDATA[<h5>要在centos6上编译，为了能在centos5用，用静态编译</h5>

<h5>有两个显示函数参数的patch，但是不一定能起作用</h5>

<h5>patch1:</h5>

<p><a href="https://github.com/jhammond/xbt">https://github.com/jhammond/xbt</a>
<a href="https://www.redhat.com/archives/crash-utility/2013-September/msg00010.html">https://www.redhat.com/archives/crash-utility/2013-September/msg00010.html</a></p>

<h5>patch2:</h5>

<p><a href="https://github.com/hziSot/crash-stack-parser">https://github.com/hziSot/crash-stack-parser</a>
<a href="https://github.com/hziSot/crash-stack-parser/blob/master/crash-parse-stack-7.0.1.patch">https://github.com/hziSot/crash-stack-parser/blob/master/crash-parse-stack-7.0.1.patch</a></p>

<h4>一、依赖包：</h4>

<p>yum install bison zlib zlib-static glibc-static elfutils-devel elfutils-devel-static elfutils-libelf-devel-static ncurses ncurses-static crash-devel</p>

<h4>二、patch1: xbt 显示参数</h4>

<p>patch: <a href="https://github.com/hziSot/crash-stack-parser  ">https://github.com/hziSot/crash-stack-parser  </a>
make CFLAGS+=&ndash;static LDFLAGS+=&ndash;static</p>

<h4>三、patch2: bt -H 显示参数</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>依赖：有些没有静态包，要自己编译安装：
</span><span class='line'>liblzma.a: http://tukaani.org/xz/xz-5.0.7.tar.bz2
</span><span class='line'>libbz2.a:  http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz
</span><span class='line'>下载代码：git clone https://github.com/jhammond/xbt.git xbt.git
</span><span class='line'>把xbt.git/xbt_crash.c中函数xbt_func前的static删了
</span><span class='line'>把xbt.git/xbt_crash.c中函数xmod_init的register_extension删了
</span><span class='line'>把 xbt 命令加到global_data.c        函数x86_64_exception_frame已经在其他库中定义了，所以要换个名字
</span><span class='line'>编译xbt代码：make   ==  rm -rf *.so
</span><span class='line'>把 xbt.git/xbt_crash.o  xbt.git/xbt_dwarf.o  xbt.git/xbt_dwfl.o  xbt.git/xbt_eval.o  xbt.git/xbt_frame_print.o 加到 Makefile 的 OBJECT_FILES= 中
</span><span class='line'>make CFLAGS+=--static LDFLAGS+="--static -lc  -lm -ldl -ldw -lebl -lelf -lbz2 -llzma"
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>注意:-lelf -lebl要放在-ldw后面。</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数A到数B之间的统计]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/03/alg-A-to-B-count/"/>
    <updated>2014-11-03T18:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/03/alg-A-to-B-count</id>
    <content type="html"><![CDATA[<p><a href="http://acm.fzu.edu.cn/problem.php?pid=1896">Problem 1896 神奇的魔法数</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Accept: 98    Submit: 307
</span><span class='line'>Time Limit: 1000 mSec    Memory Limit : 32768 KB
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Problem Description
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>John定义了一种“神奇的魔法数”。 不含前导零且相邻两个数字之差至少为m的正整数被称为“神奇的魔法数”。特别的，对于任意的m，数字1..9都是“神奇的魔法数”。
</span><span class='line'>John想知道，对于给定的m，在正整数a和b之间，包括a和b，总共有多少个“神奇的魔法数”？
</span><span class='line'>
</span><span class='line'>Input
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>第一行一个数字T（1&lt;=T&lt;=100），表示测试数据组数。
</span><span class='line'>接下来T行，每行代表一组测试数据，包括三个整数a,b,m。（1&lt;=a&lt;=b&lt;=2,000,000,000, 0&lt;=m&lt;=9）
</span><span class='line'>
</span><span class='line'>Output
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>对于每组测试数据，输出一行表示“神奇的魔法数”的个数。
</span><span class='line'>
</span><span class='line'>Sample Input
</span><span class='line'>
</span><span class='line'>7 1 10 2 1 20 3 1 100 0 10 20 4 20 30 5 1 10 9 11 100 9
</span><span class='line'>
</span><span class='line'>Sample Output
</span><span class='line'>
</span><span class='line'>9 15 100 5 3 9 1
</span><span class='line'>
</span><span class='line'>Source福州大学第七届程序设计竞赛</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>int n,m,d,dp[13][13],sum[13],dn[13],dm[13];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>// DFS的时候这两个地方根据不同要求写。
</span><span class='line'>int dfs(int da[], int dep, int all)
</span><span class='line'>{
</span><span class='line'>  int i,j,ret=0;
</span><span class='line'>  if (dep == 0) return 1;
</span><span class='line'>  for (i=0;i&lt;da[dep];i++)
</span><span class='line'>  {
</span><span class='line'>          if (all &gt; 0 || i &gt; 0) {
</span><span class='line'>                  if (all == 0 || i-da[dep+1]&gt;=d || i-da[dep+1]&lt;=-d)
</span><span class='line'>                          ret += dp[dep][i];
</span><span class='line'>          } else
</span><span class='line'>                  ret += sum[dep-1];
</span><span class='line'>  }
</span><span class='line'>  if (all == 0 || da[dep]-da[dep+1]&gt;=d || da[dep]-da[dep+1]&lt;=-d)
</span><span class='line'>          ret += dfs(da, dep-1, all+da[dep]);
</span><span class='line'>  return ret;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>  int i,j,k,l,T;
</span><span class='line'>  scanf("%d", &T);
</span><span class='line'>  while (T--)
</span><span class='line'>  {
</span><span class='line'>          scanf("%d %d %d", &m, &n, &d);
</span><span class='line'>          for (i=0;i&lt;13;i++)
</span><span class='line'>                  for (j=0;j&lt;13;j++) dp[i][j] = 0;
</span><span class='line'>          sum[0] = 0; sum[1] = 9;
</span><span class='line'>          for (i=0;i&lt;10;i++) dp[1][i] = 1;
</span><span class='line'>          for (i=2;i&lt;13;i++) {
</span><span class='line'>                  sum[i] = sum[i-1];
</span><span class='line'>                  for (j=0;j&lt;10;j++) {
</span><span class='line'>                          for (k=0;k&lt;10;k++)
</span><span class='line'>                                  if (j-k&gt;=d || j-k&lt;=-d)
</span><span class='line'>                                          dp[i][j] += dp[i-1][k];
</span><span class='line'>                          if (j &gt; 0)
</span><span class='line'>                                  sum[i] += dp[i][j];
</span><span class='line'>                  }
</span><span class='line'>          }
</span><span class='line'>//                for (i=0;i&lt;=2;i++)
</span><span class='line'>//                        for (j=0;j&lt;10;j++) printf("%d %d %d\n", i, j, dp[i][j]);
</span><span class='line'>          i = 1; k = n;
</span><span class='line'>          while (i &lt; 13) {
</span><span class='line'>                  dn[i] = k % 10; k /= 10;
</span><span class='line'>                  i++;
</span><span class='line'>          }
</span><span class='line'>          i = 1; k = m-1;
</span><span class='line'>          while (i &lt; 13) {
</span><span class='line'>                  dm[i] = k % 10; k /= 10;
</span><span class='line'>                  i++;
</span><span class='line'>          }
</span><span class='line'>          n = dfs(dn, 11, 0);
</span><span class='line'>          if (m == 1)
</span><span class='line'>                  m = 0;
</span><span class='line'>          else
</span><span class='line'>                  m = dfs(dm, 11, 0);
</span><span class='line'>          printf("%d\n", n-m);
</span><span class='line'>  }
</span><span class='line'>  return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4><a href="http://poj.org/problem?id=3286">How many 0&rsquo;s?</a></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Time Limit: 1000MS
</span><span class='line'>Memory Limit: 65536KTotal Submissions: 2997
</span><span class='line'>Accepted: 1603
</span><span class='line'>
</span><span class='line'>Description
</span><span class='line'>
</span><span class='line'>A Benedict monk No.16 writes down the decimal representations of all natural numbers between and including m and n, m ≤ n. How many 0's will he write down?
</span><span class='line'>
</span><span class='line'>Input
</span><span class='line'>
</span><span class='line'>Input consists of a sequence of lines. Each line contains two unsigned 32-bit integers m and n, m ≤ n. The last line of input has the value of m negative and this line should not be processed.
</span><span class='line'>
</span><span class='line'>Output
</span><span class='line'>
</span><span class='line'>For each line of input print one line of output with one integer number giving the number of 0's written down by the monk.
</span><span class='line'>
</span><span class='line'>Sample Input
</span><span class='line'>
</span><span class='line'>10 11
</span><span class='line'>100 200
</span><span class='line'>0 500
</span><span class='line'>1234567890 2345678901
</span><span class='line'>0 4294967295
</span><span class='line'>-1 -1
</span><span class='line'>
</span><span class='line'>Sample Output
</span><span class='line'>
</span><span class='line'>1
</span><span class='line'>22
</span><span class='line'>92
</span><span class='line'>987654304
</span><span class='line'>3825876150
</span><span class='line'>
</span><span class='line'>Source
</span><span class='line'>
</span><span class='line'>Waterloo Local Contest, 2006.5.27</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.*;
</span><span class='line'>import java.math.*;
</span><span class='line'>import java.io.*;
</span><span class='line'>
</span><span class='line'>public class Main {
</span><span class='line'>  static long val,n,m,dp[][]=new long[13][13],a[]=new long[13],dn[]=new long[13], dm[]=new long[13], sum[]=new long[13];
</span><span class='line'>  static long dfs(long dnm[], int dep, long all)
</span><span class='line'>  {
</span><span class='line'>      int i, j, k;
</span><span class='line'>      long ret=0;
</span><span class='line'>      if (dep == 0) return 0;
</span><span class='line'>      for (i=0;i&lt;dnm[dep];i++) {
</span><span class='line'>          if (all &gt; 0 || i &gt; 0)
</span><span class='line'>              ret += dp[dep][i]; // 需要计算前导0
</span><span class='line'>          else
</span><span class='line'>              ret += sum[dep-1]; // 不需要计算前导0
</span><span class='line'>      }
</span><span class='line'>      if (all &gt; 0 && dnm[dep] == 0)
</span><span class='line'>          ret += val % a[dep] + 1;
</span><span class='line'>      ret += dfs(dnm, dep-1, all+dnm[dep]);
</span><span class='line'>      return ret;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>      int i,j,k,l;
</span><span class='line'>      Scanner cin = new Scanner(System.in);
</span><span class='line'>      a[1] = 10;
</span><span class='line'>      for (i=2;i&lt;13;i++) a[i] = a[i-1]*10;
</span><span class='line'>      for (i=0;i&lt;13;i++)
</span><span class='line'>          for (j=0;j&lt;13;j++) dp[i][j] = 0;
</span><span class='line'>      dp[1][0] = 1;
</span><span class='line'>      sum[0] = sum[1] = 0;
</span><span class='line'>      for (i=2;i&lt;13;i++) {
</span><span class='line'>          sum[i] = sum[i-1];
</span><span class='line'>          for (j=0;j&lt;10;j++) {
</span><span class='line'>              for (k=0;k&lt;10;k++)
</span><span class='line'>                  dp[i][j] += dp[i-1][k];
</span><span class='line'>              dp[i][j] += j==0 ? a[i-1] : 0;
</span><span class='line'>              if (j &gt; 0)
</span><span class='line'>                  sum[i] += dp[i][j];
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      while (true) {
</span><span class='line'>          m = cin.nextLong();
</span><span class='line'>          n = cin.nextLong();
</span><span class='line'>          if (m == -1 || n == -1) break;
</span><span class='line'>          for (i=0;i&lt;13;i++) dn[i] = dm[i] = 0;
</span><span class='line'>          i = 1;
</span><span class='line'>          val = n;
</span><span class='line'>          while (val &gt; 0) {
</span><span class='line'>              dn[i] = val % 10;
</span><span class='line'>              val /= 10;
</span><span class='line'>              i++;
</span><span class='line'>          }
</span><span class='line'>          i = 1;
</span><span class='line'>          val = m-1;
</span><span class='line'>          while (val &gt; 0) {
</span><span class='line'>              dm[i] = val % 10;
</span><span class='line'>              val /= 10;
</span><span class='line'>              i++;
</span><span class='line'>          }
</span><span class='line'>          val = n;
</span><span class='line'>          n = dfs(dn, 12, 0) + 1; // 0 还有一个0
</span><span class='line'>          val = m-1;
</span><span class='line'>          m = dfs(dm, 12, 0) + 1;
</span><span class='line'>          if (val &lt; 0) m = 0;
</span><span class='line'>          System.out.println(n-m);
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改elf文件标记的源码路径debugedit，find-debuginfo]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/03/debug-debugedit/"/>
    <updated>2014-11-03T18:10:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/03/debug-debugedit</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install rpm-build
</span><span class='line'>sudo apt-get install rpm</span></code></pre></td></tr></table></div></figure>


<p>/usr/lib/rpm/debugedit 用来改变源码查找路径。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/lib/rpm/debugedit
</span><span class='line'>Usage: debugedit [OPTION...]
</span><span class='line'>  -b, --base-dir=STRING      base build directory of objects
</span><span class='line'>  -d, --dest-dir=STRING      directory to rewrite base-dir into
</span><span class='line'>  -l, --list-file=STRING     file where to put list of source and header file
</span><span class='line'>                       names
</span><span class='line'>  -i, --build-id             recompute build ID note and print ID on stdout
</span><span class='line'>
</span><span class='line'>Help options:
</span><span class='line'>  -?, --help                 Show this help message
</span><span class='line'>  --usage                    Display brief usage message</span></code></pre></td></tr></table></div></figure>


<p>base-dir 长度要大等于 dest-dir<br/>
-i 输出build-id<br/>
-l 输出源编译文件位置，便于有需要的人打包</p>

<hr />

<p>.debug_str段保存着所有全局变量的名字，以0x00作为每一个全局变量名的结束。<br/>
在其它段来调用名字时，是以其在.debug_str段的偏移量来实现的<br/>
gcc -g /root/Desktop/a.c -o /root/Desktop/a.out<br/>
用绝对路径编译，在.debug_str段中就会存下源文件路径，.debug_info的DW_TAG_compile_unit中的DW_AT_name对应.debug_str中的偏移。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ objdump --dwarf=str a.out
</span><span class='line'>....
</span><span class='line'>  0x00000000 474e5520 4320342e 342e3720 32303132 GNU C 4.4.7 2012
</span><span class='line'>  0x00000010 30333133 20285265 64204861 7420342e 0313 (Red Hat 4.
</span><span class='line'>  0x00000020 342e372d 3429006c 6f6e6720 756e7369 4.7-4).long unsi
</span><span class='line'>  0x00000030 676e6564 20696e74 002f726f 6f742f44 gned int.&lt;span style="color:red"&gt;/root/D&lt;/span&gt;
</span><span class='line'>  0x00000040 65736b74 6f702f61 2e630075 6e736967 esktop/a.c.unsig
</span><span class='line'>  0x00000050 6e656420 63686172 006d6169 6e006c6f ned char.main.lo
</span><span class='line'>  0x00000060 6e672069 6e74002f 726f6f74 2f446573 ng int./root/Des
</span><span class='line'>  0x00000070 6b746f70 0073686f 72742075 6e736967 ktop.short unsig
</span><span class='line'>  0x00000080 6e656420 696e7400 73686f72 7420696e ned int.short in
</span><span class='line'>  0x00000090 7400                                t.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$ objdump --dwarf=info a.out
</span><span class='line'>.....
</span><span class='line'> &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
</span><span class='line'>    &lt; c&gt;   DW_AT_producer    : (indirect string, offset: 0x0): GNU C 4.4.7 20120313 (Red Hat 4.4.7-4)
</span><span class='line'>    &lt;10&gt;   DW_AT_language    : 1        (ANSI C)
</span><span class='line'>    &lt;11&gt;   DW_AT_name        : (indirect string, offset: 0x39): /root/Desktop/a.c
</span><span class='line'>    &lt;15&gt;   DW_AT_comp_dir    : (indirect string, offset: 0x67): /root/Desktop
</span><span class='line'>    &lt;19&gt;   DW_AT_low_pc      : 0x4004c4
</span><span class='line'>    &lt;21&gt;   DW_AT_high_pc     : 0x40051c
</span><span class='line'>    &lt;29&gt;   DW_AT_stmt_list   : 0x0</span></code></pre></td></tr></table></div></figure>


<hr />

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/lib/rpm/debugedit -b /root/Desktop -d /usr/src /root/Desktop/a.out</span></code></pre></td></tr></table></div></figure>


<hr />

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ objdump --dwarf=str a.out
</span><span class='line'>...
</span><span class='line'>  0x00000000 474e5520 4320342e 342e3720 32303132 GNU C 4.4.7 2012
</span><span class='line'>  0x00000010 30333133 20285265 64204861 7420342e 0313 (Red Hat 4.
</span><span class='line'>  0x00000020 342e372d 3429006c 6f6e6720 756e7369 4.7-4).long unsi
</span><span class='line'>  0x00000030 676e6564 20696e74 002f7573 722f7372 gned int./usr/sr
</span><span class='line'>  0x00000040 632f612e 63002f61 2e630075 6e736967 c/a.c./a.c.unsig
</span><span class='line'>  0x00000050 6e656420 63686172 006d6169 6e006c6f ned char.main.lo
</span><span class='line'>  0x00000060 6e672069 6e74002f 726f6f74 2f446573 ng int./root/Des
</span><span class='line'>  0x00000070 6b746f70 0073686f 72742075 6e736967 ktop.short unsig
</span><span class='line'>  0x00000080 6e656420 696e7400 73686f72 7420696e ned int.short in
</span><span class='line'>  0x00000090 7400                                t.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$ objdump --dwarf=info a.out
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'> &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
</span><span class='line'>    &lt; c&gt;   DW_AT_producer    : (indirect string, offset: 0x0): GNU C 4.4.7 20120313 (Red Hat 4.4.7-4)
</span><span class='line'>    &lt;10&gt;   DW_AT_language    : 1        (ANSI C)
</span><span class='line'>    &lt;11&gt;   DW_AT_name        : (indirect string, offset: 0x39): /usr/src/a.c
</span><span class='line'>    &lt;15&gt;   DW_AT_comp_dir    : (indirect string, offset: 0x67): /root/Desktop
</span><span class='line'>    &lt;19&gt;   DW_AT_low_pc      : 0x4004c4
</span><span class='line'>    &lt;21&gt;   DW_AT_high_pc     : 0x40051c
</span><span class='line'>    &lt;29&gt;   DW_AT_stmt_list   : 0x0</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[patch / git patch]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/30/command-git-patch/"/>
    <updated>2014-10-30T10:44:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/30/command-git-patch</id>
    <content type="html"><![CDATA[<h4>1、diff</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff [options] from-file to-file  </span></code></pre></td></tr></table></div></figure>


<p>简单的说，diff的功能就是用来比较两个文件的不同，然后记录下来，也就是所谓的diff补丁。语法格式：diff 【选项】 源文件（夹） 目的文件（夹），就是要给源文件（夹）打个补丁，使之变成目的文件（夹），术语也就是“升级”。下面介绍三个最为常用选项：</p>

<blockquote><p>   -r 是一个递归选项，设置了这个选项，diff会将两个不同版本源代码目录中的所有对应文件全部都进行一次比较，包括子目录文件。<br/>
   -N 选项确保补丁文件将正确地处理已经创建或删除文件的情况。<br/>
   -u 选项以统一格式创建补丁文件，这种格式比缺省格式更紧凑些</p></blockquote>

<h4>2、patch</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>patch [options] [originalfile [patchfile]]
</span><span class='line'>but usually just
</span><span class='line'>patch -pnum &lt;patchfile&gt;</span></code></pre></td></tr></table></div></figure>


<p>简单的说，patch就是利用diff制作的补丁来实现源文件（夹）和目的文件（夹）的转换。这样说就意味着你可以有源文件（夹）――>目的文件（夹），也可以目的文件（夹）――>源文件（夹）。下面介绍几个最常用选项：</p>

<blockquote><p>   -p0 选项要从当前目录查找目的文件（夹）<br/>
   -p1 选项要忽略掉第一层目录，从当前目录开始查找。</p></blockquote>

<hr />

<p>在这里以实例说明：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- old/modules/pcitable       Mon Sep 27 11:03:56 1999
</span><span class='line'>+++ new/modules/pcitable       Tue Dec 19 20:05:41 2000</span></code></pre></td></tr></table></div></figure>


<p>如果使用参数-p0，那就表示从当前目录找一个叫做old的文件夹，在它下面寻找modules下的pcitable文件来执行patch操作。<br/>
如果使用参数-p1， 那就表示忽略第一层目录（即不管old），从当前目录寻找modules的文件夹，在它下面找pcitable。这样的前提是当前目 录必须为modules所在的目录。而diff补丁文件则可以在任意位置，只要指明了diff补丁文件的路径就可以了。当然，可以用相对路径，也可以用绝 对路径。不过我一般习惯用相对路径。</p>

<blockquote><p>  -E 选项说明如果发现了空文件，那么就删除它<br/>
  -R 选项说明在补丁文件中的“新”文件和“旧”文件现在要调换过来了（实际上就是给新版本打补丁，让它变成老版本）</p></blockquote>

<h4>单个文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff –uN from-file to-file &gt;to-file.patch
</span><span class='line'>patch –p0 &lt; to-file.patch
</span><span class='line'>patch –RE –p0 &lt; to-file.patch</span></code></pre></td></tr></table></div></figure>


<h4>目录</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff –uNr from-docu to-docu &gt;to-docu.patch
</span><span class='line'>patch –p1 &lt; to-docu.patch
</span><span class='line'>patch –R –p1 &lt;to-docu.patch</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>git diff或者其他UNIX的diff命令生成patch的过程：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git diff  &gt; patch
</span><span class='line'>git diff  --cached &gt; patch
</span><span class='line'>git diff  branchname --cached &gt; patch</span></code></pre></td></tr></table></div></figure>


<p>这个时候当前目录下就会有一个patch文件，这是一个非git环境也可以使用的patch。对于这种patch，在git上使用要用git apply命令，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git apply patch</span></code></pre></td></tr></table></div></figure>


<p>由于这是一个类似UNIX下更新文件的操作，所以执行完上述操作之后，实际上是等于手动修改了文件，还要做一些git commit之类的操作。git apply 是一个事务性操作的命令，也就是说，要么所有补丁都打上去，要么全部放弃。可以先用git apply &ndash;check 查看补丁是否能够干净顺利地应用到当前分支中：git apply &ndash;check patch，如果执行完该命令之后没有任何输出，表示我们可以顺利采纳该补丁，接下来就是git上的提交了。</p>

<p>git format-patch生成的补丁，这是git专用的。常用命令如下：<br/>
1. 两个节点之间的提交： git format-patch  节点A   节点B<br/>
2. 单个节点： git format-patch -1 节点A （-n就表示要生成几个节点的提交）<br/>
3. 最近一次提交节点的patch ：git format-patch HEAD^ 依次类推……</p>

<p>使用git format-patch命令生成的patch文件，包含了提交的附加信息：比如作者，时间等。再次基础上使用git am命令即可将此补丁应用到当前分支。注意应用完之后，你会发现当前分支多了一次提交记录，并且有完整的信息，而不是简单的修改文件。在对比一下，git diff 和git format-patch生成的patch一个重要不同之处，实际使用中会发现git diff一次只会生成一个patch文件，不管差别了多少个提交，都是一个；而git format-patch是根据提交的节点来的，一个节点一个patch。</p>

<h4>git两种patch的比较：</h4>

<p>兼容性：很明显，git diff生成的Patch兼容性强。如果你在修改的代码的官方版本库不是Git管理的版本库，那么你必须使用git diff生成的patch才能让你的代码被项目的维护人接受。</p>

<p>除错功能：对于git diff生成的patch，你可以用git apply &ndash;check 查看补丁是否能够干净顺利地应用到当前分支中；如果git format-patch 生成的补丁不能打到当前分支，git am会给出提示，并协助你完成打补丁工作，你也可以使用git am -3进行三方合并，详细的做法可以参考git手册或者《Progit》。从这一点上看，两者除错功能都很强。</p>

<p>版本库信息：由于git format-patch生成的补丁中含有这个补丁开发者的名字，因此在应用补丁时，这个名字会被记录进版本库，显然，这样做是恰当的。因此，目前使用Git的开源社区往往建议大家使用format-patch生成补丁。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改、重新生成和安装src.rpm源码包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/30/tools-src-rpm/"/>
    <updated>2014-10-30T09:50:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/30/tools-src-rpm</id>
    <content type="html"><![CDATA[<p>RHEL/CentOS/Fedora/Suse等Linux发行版都使用rpm包作为软件包格式。另外还有一个相关的格式srpm包（后缀是.src.rpm），它包含了源代码，可以用它重新生成rpm包。<br/>
当前最新发行的RHEL/CentOS是6.X版本。目前最新版是RHEL6.5/CentOS6.5。（CentOS是RHEL的免费版本，与RHEL对应版本完全等价，除了去掉了Redhat的LOGO。）<br/>
在如下地址，可以找到RHEL6的所有rpm包的源码包：<em>.src.rpm。<br/>
    <a href="http://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/  ">http://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/  </a>
CentOS就是使用这些</em>src.rpm源码包构建出所有RPM包，生成CentOS操作系统的。<br/>
*src.rpm源码包解压出来后，可以看到有该软件的源代码压缩包和一些patch文件。<br/>
如果rpm包有问题，我们可以去<code>http://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/</code>下载对应的src.rpm包，然后把它解开后修改源代码，重新编译和生成rpm包，进行分发和安装。</p>

<h4>直接安装*src.rpm源码包</h4>

<p>有时，我们没有找到可用的rpm包，但找到了其对应的<em>src.rpm源码包，此时我们可以安装这个</em>src.rpm源码包。步骤与直接安装rpm包很不相同。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpm -i /tmp/mypackage-1.0.0-1.src.rpm</span></code></pre></td></tr></table></div></figure>


<p>此时还没有安装完成。只是在~/rpmbuild/ 目录下准备了该src.rpm源码包的资源，可用于进一步生成rpm包。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[user@host ~]$ cd ~/rpmbuild/SPECS
</span><span class='line'>[user@host SPECS]$ rpmbuild -ba mypackage.spec</span></code></pre></td></tr></table></div></figure>


<h4>你也可以直接使用如下命令：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpmbuild --rebuild /tmp/mypackage-1.0.0-1.src.rpm</span></code></pre></td></tr></table></div></figure>


<p>这个命令一步即可在～/rpmbuild/RPMS/目录下重新生成rpm包。<br/>
基于*src.rpm源码包修改代码后生成rpm包并安装<br/>
rpmbuild命令基于.spec文件和源码tar.gz及patch文件生成src.rpm和rpm包。<br/>
因此，我们只需要修改.spec文件，或者对应的源码和patch文件，然后再执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpmbuild -ba mypackage.spec</span></code></pre></td></tr></table></div></figure>


<p>命令，就可以生成更新后的src.rpm包和rpm包。rpm包在~/rpmbuild/RPMS目录下，<br/>
src.rpm包在~/rpmbuild/SRPMS目录下。注意,要修改~/rpmbuild/SOURCES/目录下的文件:<br/>
1. 你可以重新打包~/rpmbuild/SOURCES/目录下的tar.gz源文件。<br/>
2. 你可以修改.spec文件，增加或者减少对patch的应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grubby edit centos grub args]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/24/command-grubby/"/>
    <updated>2014-10-24T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/24/command-grubby</id>
    <content type="html"><![CDATA[<p>In Debian/Ubuntu, grub.cfg is fully generated by scripts and any manual changes made to it will be clobbered. In RHEL/CentOS however, grub.cfg is modified by scripts but manual changes are persisted, and is actually the canonical location for certain settings.</p>

<p>The tool which manages grub.cfg is grubby, which is called by /sbin/new-kernel-pkg when kernels are installed or removed. The &ndash;copy-default parameter is passed to grubby when a new kernel is installed, which causes it to copy the kernel parameters from the current default kernel. Setting the default kernel parameters for future-installed kernels is therefore done by editing the entry for the default kernel in grub.cfg.</p>

<p>If you weren&rsquo;t automating this you could simply edit grub.cfg manually and change all the current kernel entries. However, you can use grubby to modify grub.cfg in order to avoid parsing it or writing regular expressions. For example, this will remove the rhgb and quiet parameters from the specified kernel version.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grubby --update-kernel=/boot/vmlinuz-2.6.32-220.13.1.el6.x86_64 --remove-args="rhgb quiet"</span></code></pre></td></tr></table></div></figure>


<p>There doesn&rsquo;t seem to be an option to list the currently configured kernels however, so you&rsquo;ll have to discover these another way. One option is to just look for vmlinuz files in /boot/:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>for KERNEL in /boot/vmlinuz-*; do
</span><span class='line'>    grubby --update-kernel="$KERNEL" --remove-args="rhgb quiet"
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[\r\n,\n,\r简介]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/21/system-enter-newline/"/>
    <updated>2014-10-21T10:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/21/system-enter-newline</id>
    <content type="html"><![CDATA[<p>&lsquo;\r'是回车，前者使光标到行首，（carriage return）<br/>
&rsquo;\n'是换行，后者使光标下移一格，（line feed）</p>

<p>\r 是回车，return<br/>
\n 是换行，newline</p>

<p>^M 是ascii中的'\r', 回车符，是16进制的0x0D，八进制的015，十进制的13<br/>
^M在vi编辑器中可以使用Ctrl+ v + m三个键打出来</p>

<p>对于换行这个动作，unix下一般只有一个0x0A表示换行(&ldquo;\n&rdquo;)，windows下一般都是0x0D和0x0A两个字符(&ldquo;\r\n&rdquo;)，苹果机(MAC OS系统)则采用回车符CR表示下一行(\r)</p>

<blockquote><p>  Unix系统里，每行结尾只有“&lt;换行>”，即“\n”；<br/>
  Windows系统里面，每行结尾是“&lt;回车>&lt;换行>”，即“\r\n”；<br/>
  Mac系统里，每行结尾是“&lt;回车>”,即“\r”。</p></blockquote>

<p>一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix下打开的话，在每行的结尾会多车一个<sup>M</sup>字符。
Dos和windows采用回车+换行CR/LF表示下一行,即<sup>M</sup>$（$不是换行符的表示，换行符没有表示出来，$是文本结束EOF的表示）
而UNIX/Linux采用换行符LF表示下一行，即\n<br/>
苹果机(MAC OS系统)则采用回车符CR表示下一行，即\r</p>

<p>CR用符号'\r'表示, 十进制ASCII代码是13, 十六进制代码为0x0D;<br/>
LF使用'\n'符号表示, ASCII代码是10, 十六制为0x0A. 所以Windows平台上换行在文本文件中是使用 0d 0a 两个字节表示, 而UNIX和苹果平台上换行则是使用0a或0d一个字节表示.</p>

<p>由于dos风格的换行使用\r\n，把这样的文件上传到unix，有些版本的vi不能识别\r，所以vi显示时在行尾会出现<sup>M</sup>出来，但是有些就能识别\r\n，正常显示回车换行。</p>

<p>dos to unix，去掉<sup>M</sup></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tr -d "\015" &lt;myfile.txt &gt; myfile_new.txt
</span><span class='line'>tr -d "\r" &lt;myfile.txt &gt; myfile_new.txt</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
