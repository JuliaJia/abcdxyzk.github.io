<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kk Blog]]></title>
  <link href="http://abcdxyzk.github.io/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-18T18:18:17+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress分类中使用二级目录]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/octopress-3/"/>
    <updated>2014-11-13T23:49:25+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/octopress-3</id>
    <content type="html"><![CDATA[<h4>1.修改plugins/category_list_tag.rb为</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># encoding: UTF-8
</span><span class='line'>module Jekyll
</span><span class='line'>  class CategoryListTag &lt; Liquid::Tag
</span><span class='line'>      def render(context)
</span><span class='line'>          html = ""
</span><span class='line'>          pre = ""
</span><span class='line'>          divout = 0
</span><span class='line'>          categories = context.registers[:site].categories.keys
</span><span class='line'>          categories.sort.each do |category|
</span><span class='line'>              posts_in_category = context.registers[:site].categories[category].size
</span><span class='line'>              category_dir = context.registers[:site].config['category_dir']
</span><span class='line'>              cats = category.split(/~/)
</span><span class='line'>              if cats.size &gt; 1 and cats[0] == pre
</span><span class='line'>                  if divout == 0
</span><span class='line'>                      html &lt;&lt; "&lt;div id='#{pre}' class='divclass'&gt;"
</span><span class='line'>                      divout = 1
</span><span class='line'>                  end
</span><span class='line'>                  html &lt;&lt; "&lt;li&gt;&lt;a href='http://abcdxyzk.github.io/#{category_dir}/#{category.to_url}/?opendiv=#{pre}'&gt;#{cats[1]} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>              else
</span><span class='line'>                  pre = cats[0]
</span><span class='line'>                  if divout &gt; 0
</span><span class='line'>                      html &lt;&lt; "&lt;/div&gt;"
</span><span class='line'>                      divout = 0
</span><span class='line'>                  end
</span><span class='line'>                  html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='##' onmousedown=showDiv('#{pre}')&gt;#{category} &lt;/a&gt;&lt;a href='http://abcdxyzk.github.io/#{category_dir}/#{category.to_url}/'&gt;(#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>              end
</span><span class='line'>          end
</span><span class='line'>          if divout &gt; 0
</span><span class='line'>              html &lt;&lt; "&lt;/div&gt;"
</span><span class='line'>              divout = 0
</span><span class='line'>          end
</span><span class='line'>          html
</span><span class='line'>      end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h4>2.修改source/_includes/custom/asides/category_list.html为：注意去掉’\‘</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>&lt;h1&gt;Categories&lt;/h1&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;style type="text/css"&gt;
</span><span class='line'>
</span><span class='line'>.divclass
</span><span class='line'>{
</span><span class='line'>  display:none;
</span><span class='line'>  font-size:12px;
</span><span class='line'>  position:relative;
</span><span class='line'>  left:0px;
</span><span class='line'>  top:0px;
</span><span class='line'>  padding:0px 30px 0px 30px;
</span><span class='line'>}
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>&lt;script language="javascript" type="text/javascript"&gt;
</span><span class='line'>
</span><span class='line'>function showDiv(divName)
</span><span class='line'>{
</span><span class='line'>  if (document.getElementById(divName).style.display == "block")
</span><span class='line'>      document.getElementById(divName).style.display = "none"; //隐藏层
</span><span class='line'>  else
</span><span class='line'>      document.getElementById(divName).style.display = "block"; //显示层
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function GetRequest(name) {
</span><span class='line'>  var url = location.search; //获取url中"?"符后的字串
</span><span class='line'>      if (url.indexOf("?") != -1) {
</span><span class='line'>      var str = url.substr(1);
</span><span class='line'>      strs = str.split("&");
</span><span class='line'>      for(var i = 0; i &lt; strs.length; i ++) {
</span><span class='line'>          if (name == strs[i].split("=")[0])
</span><span class='line'>          return unescape(strs[i].split("=")[1]);
</span><span class='line'>      }
</span><span class='line'>      }
</span><span class='line'>      return null;
</span><span class='line'>}
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;div id="menu"&gt;
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>{\% category_list \%}
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span><span class='line'>
</span><span class='line'>&lt;script language="javascript" type="text/javascript"&gt;
</span><span class='line'>var divname = GetRequest("opendiv");
</span><span class='line'>if (divname != null)
</span><span class='line'>  showDiv(divname)
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<h4>3.使用二级标签的时候先写一个一级标签，写一个一级~二级标签，例如：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> categories:
</span><span class='line'> - hello
</span><span class='line'> - hello~hi</span></code></pre></td></tr></table></div></figure>


<h4>4.add</h4>

<h5>后来又改成了三级目录，显示调整，单列时间分类等。具体去看源码对应文件。</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress侧边栏添加内容]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/octopress-2/"/>
    <updated>2014-11-13T23:21:52+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/octopress-2</id>
    <content type="html"><![CDATA[<h4>1.添加about页面</h4>

<p>rake new_page[about]<br/>
会生成 source/about/index.markdown 文件。<br/>
编辑该文件的内容。<br/>
然后在头部导航菜单中添加页面的超链接。具体做法是编辑 /source/_includes/custom/navigation.html 文件。</p>

<h4>2.增加链接</h4>

<p>在source/_includes/custom/asides创建blog_link.html，代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>&lt;h1&gt;link&lt;/h1&gt;
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>        &lt;li&gt;
</span><span class='line'>                &lt;a href=http://hi.baidu.com/abcdxyzk target=_blank&gt;My&lt;/a&gt;
</span><span class='line'>        &lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>然后修改_config.yml文件在default_asides中加入custom/asides/blog_link.html。</p>

<!--more-->


<h4>3.支持评论</h4>

<p>Octopress自身不支持评论功能，不过我们可以使用第三方的评论系统，国外的有Disqus。下面介绍怎样在Octopress中使用Disqus。<br/>
首先需要在Disqus注册一个账号，登录后点击Add Disqus to your site，然后添加站点信息site name和url，记下右侧的name<br/>
然后在_config.yml文件中进行下面设置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Disqus Comments
</span><span class='line'>disqus_short_name: 为添加站点信息时的name
</span><span class='line'>disqus_show_comment_count: true</span></code></pre></td></tr></table></div></figure>


<h4>4.添加Categories侧边栏</h4>

<p>增加category_list插件<br/>
保存到 plugins/category_list_tag.rb：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># encoding: UTF-8
</span><span class='line'>    module Jekyll
</span><span class='line'>            class CategoryListTag &lt; Liquid::Tag
</span><span class='line'>                    def render(context)
</span><span class='line'>                            html = ""
</span><span class='line'>                            categories = context.registers[:site].categories.keys
</span><span class='line'>                            categories.sort.each do |category|
</span><span class='line'>                                    posts_in_category = context.registers[:site].categories[category].size
</span><span class='line'>                                    category_dir = context.registers[:site].config['category_dir']
</span><span class='line'>                                    html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://abcdxyzk.github.io/#{category_dir}/#{category.to_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>                            end
</span><span class='line'>                            html
</span><span class='line'>                    end
</span><span class='line'>            end
</span><span class='line'>    end
</span><span class='line'>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</span></code></pre></td></tr></table></div></figure>


<p>注意：一定要在文件的开始添加# encoding: UTF-8这一行，否则无法支持中文分类。<br/>
增加aside<br/>
保存到 source/_includes/asides/category_list.html：注意去掉&#8217;&#39;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>  &lt;h1&gt;Categories&lt;/h1&gt;
</span><span class='line'>  &lt;ul id="categories"&gt;
</span><span class='line'>      {\% category_list \%}
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>修改_config.yml文件<br/>
将category_list添加到default_asides：<br/>
   default_asides: [asides/category_list.html, asides/recent_posts.html]<br/>
安装这个插件后直接可以支持中文分类，url中使用的是分类的拼音，如「数据库」对应「shu-ju-ku」。如果使用中文分类时遇到各种错误，请参考下面这两篇文章：</p>

<pre><code>http://aiku.me/bar/10393365  
http://blog.sprabbit.com/blog/2012/03/23/octopress/  
</code></pre>

<h4>5.添加tag</h4>

<p>首先到<a href="https://github.com/robbyedwards/octopress-tag-pages  ">https://github.com/robbyedwards/octopress-tag-pages  </a>
和<a href="https://github.com/robbyedwards/octopress-tag-cloudclone  ">https://github.com/robbyedwards/octopress-tag-cloudclone  </a>
这两个项目的代码。这两个项目分别用于产生tag page和tag cloud。 针对这两个插件，需要手工复制一些文件到你的octopress目录。</p>

<p>octopress-tag-pages<br/>
复制tag_generator.rb到plugins目录；<br/>
复制tag_index.html到source/<em>layouts目录。<br/>
复制tag_feed.xml到source/</em>includes/custom/目录。tag_feed.xml文件中 layout: nil 改为 layout: null<br/>
其他文件就不需要复制了，都是些例子。</p>

<p>octopress-tag-cloud<br/>
仅复制tag_cloud.rb到plugins目录即可。<br/>
添加aside，复制以下代码到source/_includes/custom/asides/tags.html。注意去掉&#8217;&#39;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>  &lt;h1&gt;Tags&lt;/h1&gt;
</span><span class='line'>  &lt;ul class="tag-cloud"&gt;
</span><span class='line'>      {\% tag_cloud font-size: 90-210%, limit: 100, style: para \%}
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>tag_cloud的参数中，style :para指定不使用li来分割，limit限定100个tag，font-size指定tag的大小范围，具体参数参看官方文档。<br/>
最后，当然是在_config.xml的default_asides 中添加这个tag cloud到导航栏：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [... custom/asides/tags.html, ...]</span></code></pre></td></tr></table></div></figure>


<h5>bug:</h5>

<p>除0错误，tag_cloud.rb中<br/>
weight = (Math.log(count) - Math.log(min))/(Math.log(max) - Math.log(min))<br/>
当max==min时出错<br/>
一下修复同时改成像Categories一样显示文章数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- a/plugins/tag_cloud.rb
</span><span class='line'>+++ b/plugins/tag_cloud.rb
</span><span class='line'>@@ -54,7 +54,7 @@ def initialize(name, params, tokens)
</span><span class='line'> # map: [[tag name, tag count]] -&gt; [[tag name, tag weight]]
</span><span class='line'>        weighted = count.map do |name, count|
</span><span class='line'> # logarithmic distribution
</span><span class='line'>-       weight = (Math.log(count) - Math.log(min))/(Math.log(max) - Math.log(min))
</span><span class='line'>+       weight = count
</span><span class='line'>        [name, weight]
</span><span class='line'>        end
</span><span class='line'> # get the top @limit tag pairs when a limit is given, unless the sort method is random
</span><span class='line'>@@ -92,12 +92,17 @@ def initialize(name, params, tokens)
</span><span class='line'>        html = ""
</span><span class='line'> # iterate over the weighted tag Array and create the tag items
</span><span class='line'>        weighted.each_with_index do |tag, i|
</span><span class='line'>-       name, weight = tag
</span><span class='line'>+       name, weight_orig = tag
</span><span class='line'>+        if min == max
</span><span class='line'>+               weight = 0.5
</span><span class='line'>+       else
</span><span class='line'>+               weight = (Math.log(weight_orig) - Math.log(min))/(Math.log(max) - Math.log(min))
</span><span class='line'>+       end
</span><span class='line'>        size = size_min + ((size_max - size_min) * weight).to_f
</span><span class='line'>        size = sprintf("%.#{@precision}f", size)
</span><span class='line'>        slug = name.to_url
</span><span class='line'>        @separator = "" if i == (weighted.size - 1)
</span><span class='line'>-       html &lt;&lt; "#{@tag_before}&lt;a style=\"font-size: #{size}#{unit}\" href=\"/#{dir}/#{slug}/\"&gt;#{name}&lt;/a&gt;#{@separator}#{@tag_after}\n"
</span><span class='line'>+       html &lt;&lt; "#{@tag_before}&lt;a style=\"font-size: #{size}#{unit}\" href=\"/#{dir}/#{slug}/\"&gt;#{name}(#{weight_orig})&lt;/a&gt;#{@separator}#
</span><span class='line'>        end
</span><span class='line'>        html
</span><span class='line'>        end</span></code></pre></td></tr></table></div></figure>


<h6>如果会出现:</h6>

<p>添加超过一个tags之后，rake generate就会开始报错了： Error :Liquid Exception: comparison of Array with Array failed in page<br/>
只需要将1个tag重复2次以上使用就可以解决。<br/>
1.第1个post加的tag是：tag1，第2个post加的tag是：tag1<br/>
2.rake generate<br/>
3.第2个post的tag随便改：tagXXX</p>

<h4>6.近期评论</h4>

<p>复制以下代码到source/_includes/custom/asides/recent_comments.html，名字改成自己的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section id="comment_sidebar"&gt;
</span><span class='line'>&lt;h1&gt;近期评论&lt;/h1&gt;
</span><span class='line'>&lt;script type="text/javascript" src="http://abcdxyzk.disqus.com/recent_comments_widget.js?num_items=10&hide_avatars=0&avatar_size=32&excerpt_length=20"&gt;&lt;/script&gt;&lt;a href="http://disqus.com/"&gt;Powered by Disqus&lt;/a&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>修改<em>config.yml<br/>
最后，当然是在</em>config.xml的default_asides 中添加这个tag cloud到导航栏：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [... custom/asides/recent_comments.html, ...]</span></code></pre></td></tr></table></div></figure>


<h4>7.优化</h4>

<p>删除<br/>
 source/<em>includes/custom/head.html<br/>
 source/</em>includes/head.html<br/>
中googleapis</p>

<h4>8.BUG，最新octopress的已经修复</h4>

<p>除了根目录，其他目录无法将右侧缩到底部。<br/>
可以修改一下source/_includes/head.html文件，去掉src中的&#8217;.&lsquo;，改成如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;script&gt;!window.jQuery && document.write(unescape('%3Cscript src="http://abcdxyzk.github.io/javascripts/libs/jquery.min.js"%3E%3C/script%3E'))&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress+github建立个人博客]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/octopress-1/"/>
    <updated>2014-11-13T22:59:03+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/octopress-1</id>
    <content type="html"><![CDATA[<h4>Step 1 安装git ruby nodejs</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git zlib1g-dev libyaml-dev openssl libssl-dev tcl-dev tk-dev node/nodejs
</span><span class='line'>sudo apt-get install ruby ruby-dev 安装的版本偏低不行，要1.9.3以上https://www.ruby-lang.org/en/downloads/</span></code></pre></td></tr></table></div></figure>


<h4>Step 2 准备octopress</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress    # 如果你使用RVM, 你会被询问你是否信任 .rvmrc 文件 (选择 yes).
</span><span class='line'>ruby --version  # 这条命令应该输出 Ruby 1.9.3
</span><span class='line'>然后安装依赖
</span><span class='line'>sudo gem install bundler
</span><span class='line'>rbenv rehash    # 如果你使用 rbenv, 执行 rehash 以运行 bundle 命令 (好像不需要这条)
</span><span class='line'>bundle install    # 在octopress目录运行
</span><span class='line'>最后安装默认主题
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h4>Step 3 部署到github上</h4>

<p>(1)以 用户名/用户名.github.io 的格式建立一个新项目。<br/>
(2)部署<br/>
首先运行<br/>
rake setup_github_pages<br/>
这条命令会询问你刚才建立的项目的地址，按提示输入，然后就会生成一些用于部署的文件和<em>deploy目录，</em>deploy目录就是对应master分支。 接着执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy  # 会cd到_deploy目录运行 commit 和 push</span></code></pre></td></tr></table></div></figure>


<p>这两条命令会生成博客内容，然后添加到git中，自动执行git commit然后推送到主分支(master branch)。几分钟后，你会收到github通知你你的提交已经被接受并发布了你的网站的email。</p>

<p>rake generate可能报错：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error reading file /var/lib/gems/1.9.1/gems/jekyll-sitemap-0.6.1/lib/sitemap.xml: No such file or directory - /home/kk/kk/github/octopress/source/var/lib/gems/1.9.1/gems/jekyll-sitemap-0.6.1/lib/sitemap.xml</span></code></pre></td></tr></table></div></figure>


<p>是jekyll-sitemap-0.6.1的bug，修改Gemfile.lock, jekyll-sitemap (0.6.1) 改成 jekyll-sitemap (0.6.3), 再</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>不要忘记把为你的博客提交source（Don’t forget to commit the source for your blog）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source # 记住只push source，要push master就得先pull一下，因为_deploy目录也对应master，而他一运行rake deploy就会push</span></code></pre></td></tr></table></div></figure>


<h4>Step 4 发布博客</h4>

<p>你发布的文章被放在source/<em>posts目录下，并按照Jekyll的命名规则命名：YYYY-MM-DD-post- title.markdown。这个名字会被用于生成url且日期会被用于为文章按时间排序。 但这样比较麻烦，于是Octopress提供了一个rake task来自动按照正确的命名规则建立博文，并生成基本内容。<br/>
格式是：rake new_post[&ldquo;title&rdquo;]<br/>
样例：<br/>
    rake new_post[&ldquo;tt&rdquo;]<br/>
    # 这条命令会创建 source/</em>posts/2011-07-03-tt.markdown文件<br/>
会生成如下内容的文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "tt"
</span><span class='line'>date: 2011-07-03 5:59
</span><span class='line'>comments: true
</span><span class='line'>external-url:
</span><span class='line'>categories:
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>你可以在这里设置评论功能开关，设置分类。如果你的博客有多个作者共用，你可以在文件中添加【author:Your Name】。如果你在编辑一个草稿，你可以添加【published： false】以使其在生成博客内容时被自动忽略。</p>

<h4>Step 5 生成 &amp; 预览</h4>

<p>rake generate # 在公开目录中生成博文和页面
rake watch # 查看 source/ and sass/ 的改动
rake preview # 在浏览器中输入 <a href="http://localhost:4000">http://localhost:4000</a> 即可预览。</p>

<h4>Step 6 推送到github</h4>

<p>rake deploy
然后过几分钟，github就会自动更新你的博客了。<br/>
注意：执行rake deploy前一定要先rake generate一下<br/>
不要忘记把为你的博客提交source（Don’t forget to commit the source for your blog）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source </span></code></pre></td></tr></table></div></figure>


<hr />

<h4>另一台机子的时候</h4>

<p>安装需要软件，然后clone自己的代码库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -b source origin/source
</span><span class='line'>sudo gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install
</span><span class='line'>rake setup_github_pages
</span><span class='line'>mkdir _deploy
</span><span class='line'>cd _deploy
</span><span class='line'>git init
</span><span class='line'>git remote add origin git@github.com:abcdxyzk/abcdxyzk.github.io.git
</span><span class='line'>git pull origin master
</span><span class='line'>cd ..</span></code></pre></td></tr></table></div></figure>


<p><em>deploy目录就是对应master分支，所以必须要先保持一致<br/>
不然先运行rake deploy会在</em>deploy目录先commit，再push，这就会导致其他和另外机子上提交的冲突。<br/>
如果先rake deploy的话，可以在_deploy目录reset回去，然后pull。</p>

<p>记住多台机子操作的时候一开始先</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>需要保持_deploy/.git/config有master分支
</span><span class='line'>git pull
</span><span class='line'>cd _deploy
</span><span class='line'>git pull</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/08/hello/"/>
    <updated>2014-11-08T18:19:17+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/08/hello</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字节序和比特序]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/06/20/lang-c-B_b_byte/"/>
    <updated>2013-06-20T18:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/06/20/lang-c-B_b_byte</id>
    <content type="html"><![CDATA[<p>字节序和比特序，因为比特序对所有代码（包括汇编）是透明的，所以对于小端系统，有说是用大端比特序，也有说是用小端比特序。<br/>
下面是copy一部分觉得靠谱的内容：<br/>
大小端
我们对&#8221;endianness&#8221;这个名词估计都很熟悉了。它首先被Danny Cohen于1980引入，用来表述计算机系统表示多字节整数的方式。
endianness分为两种：大端和小端。(从字节序的角度来看)大端方式是将整数中最高位byte存放在最低地址中。而小端方式则相反，将整数中的最高位byte存放在最高地址中。
对于某个确定的计算机系统，比特序通常与字节序保持一致。换言之，在大端系统中，每个byte中最高位bit存放在内存最低位；在小端系统中，最低位bit存放在内存最低位。
正如大部分人是按照从左至右的顺序书写数字，一个多字节整数的内存布局也应该遵循同样的方式，即从左至右为数值的最高位至最低位。正如我们在下面的例子中所看到的，这是书写整数最清晰的方式。</p>

<p>根据上述规则，我们按以下方式分别在大端和小端系统中值为0x0a0b0c0d的整数。
在大端系统中书写整数：
byte  addr  0   1   2   3
bit offset  01234567 01234567 01234567 01234567</p>

<pre><code>binary  00001010 00001011 00001100 00001101
  hex      0a       0b       0c       0d
</code></pre>

<p>在小端系统中书写整数(认真看)
byte  addr  0   1   2   3
bit offset  01234567 01234567 01234567 01234567</p>

<pre><code>binary  10110000 00110000 11010000 01010000
  hex      d0       c0       b0       a0
</code></pre>

<p>说明字节序：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;  
</span><span class='line'>int main (void)  
</span><span class='line'>{  
</span><span class='line'>  union b  
</span><span class='line'>  {  
</span><span class='line'>      short k;  //测试环境short占2字节  
</span><span class='line'>      char i[2];  //测试环境char占1字节  
</span><span class='line'>  }*s,a;  
</span><span class='line'>  s=&a;  
</span><span class='line'>  s-&gt;i[0]=0x41;  
</span><span class='line'>  s-&gt;i[1]=0x52;  
</span><span class='line'>  printf("%x\n",s-&gt;k);  
</span><span class='line'>  return 0;  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>
输出：5241</p>

<hr />

<p>self code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>union W
</span><span class='line'>{
</span><span class='line'>  struct Y
</span><span class='line'>  {
</span><span class='line'>      unsigned int s1:4;
</span><span class='line'>      unsigned int s2:8;
</span><span class='line'>      unsigned int s3:20;
</span><span class='line'>  } y;
</span><span class='line'>  unsigned int c;
</span><span class='line'>} w;
</span><span class='line'>
</span><span class='line'>union V 
</span><span class='line'>{
</span><span class='line'>  struct X
</span><span class='line'>  {
</span><span class='line'>      unsigned char s1:3;
</span><span class='line'>      unsigned char s2:3;
</span><span class='line'>      unsigned char s3:2;
</span><span class='line'>  } x;
</span><span class='line'>  unsigned char c;
</span><span class='line'>} v;
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>  w.c = 0x12345678;
</span><span class='line'>  printf("%x %x %x %x\n", w.c, w.y.s1, w.y.s2, w.y.s3); 
</span><span class='line'>
</span><span class='line'>  v.c = 100;
</span><span class='line'>  printf("%d %x %x %x\n", v.c, v.x.s1, v.x.s2, v.x.s3); 
</span><span class='line'>  return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>输出：<br/>
12345678 8 67 12345<br/>
100 4 4 1</p>

<p>100 = （01100100）2<br/>
因为字节序是小端的所以第一行输出说明：位域变量从左到右分配位，所以第二行的输出的位域变量也应该从左到右分配位。所以<br/>
100 = 001 001 10  （小端比特序二进制）<br/>
对应:  s1  s2  s3  （位域变量从左到右分配位）</p>

<p>符合。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内核编译模块]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/06/06/kernel-mod-compiler/"/>
    <updated>2013-06-06T14:28:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/06/06/kernel-mod-compiler</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*filename: test.c*/
</span><span class='line'>#include &lt;linux/init.h&gt;
</span><span class='line'>#include &lt;linux/kernel.h&gt;
</span><span class='line'>#include &lt;linux/module.h&gt;
</span><span class='line'>
</span><span class='line'>staticintdummy_init(void)
</span><span class='line'>{
</span><span class='line'>    printk("hello,world.\n");
</span><span class='line'>    return0;
</span><span class='line'>}
</span><span class='line'>staticvoiddummy_exit(void)
</span><span class='line'>{
</span><span class='line'>    return;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>module_init(dummy_init);
</span><span class='line'>module_exit(dummy_exit);
</span><span class='line'>
</span><span class='line'>MODULE_LICENSE("GPL")</span></code></pre></td></tr></table></div></figure>


<p>执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcc -c -O2 -DMODULE -D__KERNEL__ -I/usr/src/linux test.c
</span><span class='line'>$ insmod test.o</span></code></pre></td></tr></table></div></figure>


<p>No module found in object<br/>
insmod: error inserting &lsquo;test.o&rsquo;: -1 Invalid module format</p>

<p>正确的做法是写一个Makefile,由内核的Kbuild来帮你编译。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat Makefile
</span><span class='line'>obj-m :=test.o
</span><span class='line'>KDIR :=/lib/modules/$(shell uname -r)/build
</span><span class='line'>PWD :=$(shell pwd)
</span><span class='line'>default:
</span><span class='line'>    $(MAKE)-C $(KDIR)SUBDIRS=$(PWD)modules</span></code></pre></td></tr></table></div></figure>


<p>执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$make
</span><span class='line'>make -C /lib/modules/2.6.5-1.358/build SUBDIRS=/test modules
</span><span class='line'>make[1]:Entering directory `/lib/modules/2.6.5-1.358/build'
</span><span class='line'>  CC [M]  /test/modinject/test.o
</span><span class='line'>  Building modules, stage 2.
</span><span class='line'>  MODPOST
</span><span class='line'>  CC      /test/modinject/test.mod.o
</span><span class='line'>  LD [M]  /test/modinject/test.ko
</span><span class='line'>make[1]: Leaving directory `/lib/modules/2.6.5-1.358/build'
</span><span class='line'>$ls -l
</span><span class='line'>-rw-r--r--1 root root   268 Jan  7 08:31 test.c
</span><span class='line'>-rw-r--r--1 root root  2483 Jan  8 09:19 test.ko
</span><span class='line'>-rw-r--r--1 root root   691 Jan  8 09:19 test.mod.c
</span><span class='line'>-rw-r--r--1 root root  1964 Jan  8 09:19 test.mod.o
</span><span class='line'>-rw-r--r--1 root root  1064 Jan  8 09:19 test.o</span></code></pre></td></tr></table></div></figure>


<p>其实上边的test.o就是用gcc生成的test.o,而test.ko是使用下列命令来生成的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ld -m elf_i386  -r -o test.ko test.o  test.mod.o</span></code></pre></td></tr></table></div></figure>


<p>再来看看test.mod.c，它是由/usr/src/linux/scripts/modpost.c来生成的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat test.mod.c
</span><span class='line'>#include &lt;linux/module.h&gt;
</span><span class='line'>#include &lt;linux/vermagic.h&gt;
</span><span class='line'>#include &lt;linux/compiler.h&gt;
</span><span class='line'>
</span><span class='line'>MODULE_INFO(vermagic,VERMAGIC_STRING);
</span><span class='line'>#undef unix
</span><span class='line'>
</span><span class='line'>struct module __this_module
</span><span class='line'>__attribute__((section(".gnu.linkonce.this_module")))={
</span><span class='line'>.name =__stringify(KBUILD_MODNAME),
</span><span class='line'>.init =init_module,
</span><span class='line'>#ifdef CONFIG_MODULE_UNLOAD
</span><span class='line'>
</span><span class='line'>.exit=cleanup_module,
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>};
</span><span class='line'>static const struct modversion_info ____versions[]
</span><span class='line'>__attribute_used__
</span><span class='line'>__attribute__((section("__versions")))={
</span><span class='line'>  {0,"cleanup_module"},
</span><span class='line'>  {0,"init_module"},
</span><span class='line'>  {0,"struct_module"},
</span><span class='line'>  {0,"printk"},
</span><span class='line'>};
</span><span class='line'>static const char __module_depends[]
</span><span class='line'>__attribute_used__
</span><span class='line'>__attribute__((section(".modinfo")))=
</span><span class='line'>"depends=";</span></code></pre></td></tr></table></div></figure>


<p>可见，test.mod.o只是产生了几个ELF的节，分别是modinfo,  .gun.linkonce.this_module(用于重定位，引进了rel.gnu.linkonce.this_module),  __versions。而test.ko是test.o和test.mod.o合并的结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两个数只出现一次]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/11/12/alg-2num-appear-once/"/>
    <updated>2012-11-12T16:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/11/12/alg-2num-appear-once</id>
    <content type="html"><![CDATA[<h4>problem</h4>

<p>一个数组，其中只有两个数只出现一次，其余数皆出现偶数次。<br/>
设计Time: O(n) 的算法得出那个只出现一次的数。</p>

<h4>answer</h4>

<p>再因为a和b不等，那么a<sup>b</sup>必然不为0。<br/>
那么a<sup>b</sup>这个数上面必然能够找到一个二进制位是1<br/>
在这个二进制位上，a和b不等。<br/>
根据这个二进制位，将各元素中在这位上为1的分派到左边，为0的分派到右边，形成两个子数组。</p>

<p>可以证明，<br/>
1）这两个数组分别包含a和b。<br/>
2）每个数组中除了a或b之外的所有元素都是成对出现的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screen]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/02/18/tools-screen/"/>
    <updated>2012-02-18T12:53:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/02/18/tools-screen</id>
    <content type="html"><![CDATA[<h4>断开控制台而不结束会话-Screen</h4>

<p>设想一下，你通过 ssh 连接到了一台服务器，接着你开始编译一个软件。这或许要占用你一个小时甚至更多的时间，突然！你需要离开，或者是断开网络了~<br/>
怎么办？下次再重新编译一次么？还有例外一种办法~（当然，我指的不是一开始放在后台运行。）<br/>
Screen！</p>

<h4>一、启动 Screen</h4>

<p>启动 Screen 再简单不过了，在 Shell 中运行 screen ，按回车，就进入 Screen 输入环境了。</p>

<h4>二、给 Screen 的指令</h4>

<p>和VIM类似，当你想给 Screen 发送指令，而不是给 shell 输入指令的时候需要用到特定的组合键：Ctrl-A 。（这类似于 VIM 中的 ESC。）当你执行Ctrl-A 后就可以引起 Screen 的注意了。</p>

<h4>三、我在 Screen 中么？</h4>

<p>通过 screen -list 调用 screen 可以看到类似如下界面：<br/>
这标明你正处于 Screen 中。并且进程号是8941。</p>

<h4>四、还有哪些命令？</h4>

<p>通过 Ctrl-A and ? 的方式你可以看到如下列表：<br/>
ok！一切都明了了！</p>

<h4>五、离开</h4>

<p>这时我需要离开那台正在编译软件的主机了，通过 Ctrl+A and D。我们脱离了 screen。但是 screen 依然在后台运行着。</p>

<h4>六、归来</h4>

<p>当你回到这台主机，并想重新进入之前的 screen 时，以前看到的 进程号（PID）就要发挥作用了。<br/>
通过命令：<br/>
screen -r pid<br/>
就可以回到之前的Screen了。<br/>
如果你觉得记住 PID 是一件很麻烦的事情，也可以使用 -S 参数：<br/>
scree  -S latteye<br/>
这样就可以打开一个名为 latteye 的会话，下次连接时使用：<br/>
screen -r latteye <br/>
即可。</p>

<h4>七、特殊情况</h4>

<p>有些时候我们离开 screen 并不是那么正常，不一定会按 Ctrl-a + D 来离开 Screen，比如网络突然断开的时候。<br/>
这个时候，若我们重新回到主机，则通过 -r 参数是无法连接 screen 的，我们还需要 -d 的帮助：<br/>
screen -d -r pid</p>

<hr />

<p>命令其实超简单的：<br/>
直接在终端上输入 screen , 这个时候，服务器端会启一个新的终端，但这个终端，与之前的普通终端不一样，它不隶属于 sshd 进程组，这样，当本地终端关闭后，服务器终端不会被 kill。<br/>
当然，优点还不止这么些，在服务器终端里执行任务时，你甚至可以随时地切换到本地终端做些其他事情，然后，要回去时，再恢复到刚才已经打开的服务器终端里，如果刚才的任务没有结束，还可以继续执行任务。<br/>
操作步骤：<br/>
首先，进入 screen -S sessionname终端。(sessionname是为了区分你的session)<br/>
然后按 ctrl + a，再按 d键暂时退出终端。<br/>
当要返回时， 先查看刚才的终端进程ID， screen -list<br/>
或直接<br/>
 screen -r xx(刚才的sessionname)就可以了 <br/>
当然，当你开了很多个session后，打算关闭几个session，可以进入到session后，exit一下就可以了.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ctrl + a + ? 显示所有键绑定信息
</span><span class='line'>Ctrl + a + w  显示所有窗口列表
</span><span class='line'>Ctrl + a + a  切换到之前显示的窗口
</span><span class='line'>Ctrl + a + c  创建一个新的运行shell的窗口并切换到该窗口
</span><span class='line'>Ctrl + a + n  切换到下一个窗口
</span><span class='line'>Ctrl + a + p  切换到前一个窗口(与C-a n相对)
</span><span class='line'>Ctrl + a + 0..9   切换到窗口0..9
</span><span class='line'>Ctrl + a + a  发送 C-a到当前窗口
</span><span class='line'>Ctrl + a + d  暂时断开screen会话
</span><span class='line'>Ctrl + a + k  杀掉当前窗口
</span><span class='line'>Ctrl + a + [  进入拷贝/回滚模式</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Ptrace函数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/11/29/tools-ptrace-/"/>
    <updated>2011-11-29T19:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/11/29/tools-ptrace-</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;sys/ptrace.h&gt;
</span><span class='line'>int ptrace(int request, int pid, int addr, int data);</span></code></pre></td></tr></table></div></figure>


<h5>描述</h5>

<p>Ptrace提供了一种父进程可以控制子进程运行，并可以检查和改变它的核心image。它主要用于实现断点调试。一个被跟踪的进程运行中，直到发生一个信号。则进程被中止，并且通知其父进程。在进程中止的状态下，进程的内存空间可以被读写。父进程还可以使子进程继续执行，并选择是否是否忽略引起中止的信号。</p>

<!--more-->


<p>Request参数决定了系统调用的功能：</p>

<p>PTRACE_TRACEME<br/>
本进程被其父进程所跟踪。其父进程应该希望跟踪子进程。</p>

<p>PTRACE_PEEKTEXT, PTRACE_PEEKDATA<br/>
从内存地址中读取一个字节，内存地址由addr给出。</p>

<p>PTRACE_PEEKUSR<br/>
从USER区域中读取一个字节，偏移量为addr。</p>

<p>PTRACE_POKETEXT, PTRACE_POKEDATA<br/>
往内存地址中写入一个字节。内存地址由addr给出。</p>

<p>PTRACE_POKEUSR<br/>
往USER区域中写入一个字节。偏移量为addr。</p>

<p>PTRACE_SYSCALL, PTRACE_CONT<br/>
重新运行。</p>

<p>PTRACE_KILL<br/>
杀掉子进程，使它退出。</p>

<p>PTRACE_SINGLESTEP<br/>
设置单步执行标志</p>

<p>PTRACE_ATTACH<br/>
跟踪指定pid 进程。</p>

<p>PTRACE_DETACH<br/>
结束跟踪</p>

<p>Intel386特有：
PTRACE_GETREGS<br/>
读取寄存器</p>

<p>PTRACE_SETREGS<br/>
设置寄存器</p>

<p>PTRACE_GETFPREGS<br/>
读取浮点寄存器</p>

<p>PTRACE_SETFPREGS<br/>
设置浮点寄存器
init进程不可以使用此函数</p>

<h5>返回值</h5>

<p>成功返回0。错误返回-1。errno被设置。</p>

<h5>错误</h5>

<p>EPERM<br/>
特殊进程不可以被跟踪或进程已经被跟踪。</p>

<p>ESRCH<br/>
指定的进程不存在</p>

<p>EIO<br/>
请求非法ptrace系统函数。</p>

<p>ptrace提供了一种使父进程得以监视和控制其它进程的方式，它还能够改变子进程中的寄存器和内核映像，因而可以实现断点调试和系统调用的跟踪。使用ptrace，你可以在用户层拦截和修改系统调用(syscall).</p>

<h5>功能详细描述</h5>

<p>1)   PTRACE_TRACEME<br/>
形式：ptrace(PTRACE_TRACEME,0 ,0 ,0)<br/>
描述：本进程被其父进程所跟踪。其父进程应该希望跟踪子进程。</p>

<p>2)  PTRACE_PEEKTEXT,PTRACE_PEEKDATA<br/>
形式：ptrace(PTRACE_PEEKTEXT, pid, addr, data)<br/>
描述：从内存地址中读取一个字节，pid表示被跟踪的子进程，内存地址由addr给出，data为用户变量地址用于返回读到的数据。在Linux（i386）中用户代码段与用户数据段重合所以读取代码段和数据段数据处理是一样的。</p>

<p>3)  PTRACE_POKETEXT,PTRACE_POKEDATA<br/>
形式：ptrace(PTRACE_POKETEXT, pid, addr, data)<br/>
描述：往内存地址中写入一个字节。pid表示被跟踪的子进程，内存地址由addr给出，data为所要写入的数据。</p>

<p>4)  TRACE_PEEKUSR<br/>
形式：ptrace(PTRACE_PEEKUSR, pid, addr, data)<br/>
描述：从USER区域中读取一个字节，pid表示被跟踪的子进程，USER区域地址由addr给出，data为用户变量地址用于返回读到的数据。USER结构为core文件的前面一部分，它描述了进程中止时的一些状态，如：寄存器值，代码、数据段大小，代码、数据段开始地址等。在Linux（i386）中通过PTRACE_PEEKUSER和PTRACE_POKEUSR可以访问USER结构的数据有寄存器和调试寄存器。</p>

<p>5)  PTRACE_POKEUSR<br/>
形式：ptrace(PTRACE_POKEUSR, pid, addr, data)<br/>
描述：往USER区域中写入一个字节，pid表示被跟踪的子进程，USER区域地址由addr给出，data为需写入的数据。</p>

<p>6)   PTRACE_CONT<br/>
形式：ptrace(PTRACE_CONT, pid, 0, signal)<br/>
描述：继续执行。pid表示被跟踪的子进程，signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。</p>

<p>7)  PTRACE_SYSCALL<br/>
形式：ptrace(PTRACE_SYS, pid, 0, signal)<br/>
描述：继续执行。pid表示被跟踪的子进程，signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。与PTRACE_CONT不同的是进行系统调用跟踪。在被跟踪进程继续运行直到调用系统调用开始或结束时，被跟踪进程被中止，并通知父进程。</p>

<p>8)   PTRACE_KILL<br/>
形式：ptrace(PTRACE_KILL,pid)<br/>
描述：杀掉子进程，使它退出。pid表示被跟踪的子进程。</p>

<p>9)   PTRACE_SINGLESTEP<br/>
形式：ptrace(PTRACE_KILL, pid, 0, signle)<br/>
描述：设置单步执行标志，单步执行一条指令。pid表示被跟踪的子进程。signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。当被跟踪进程单步执行完一个指令后，被跟踪进程被中止，并通知父进程。</p>

<p>10)  PTRACE_ATTACH<br/>
形式：ptrace(PTRACE_ATTACH,pid)<br/>
描述：跟踪指定pid 进程。pid表示被跟踪进程。被跟踪进程将成为当前进程的子进程，并进入中止状态。</p>

<p>11)  PTRACE_DETACH
形式：ptrace(PTRACE_DETACH,pid)
描述：结束跟踪。 pid表示被跟踪的子进程。结束跟踪后被跟踪进程将继续执行。</p>

<p>12)  PTRACE_GETREGS<br/>
形式：ptrace(PTRACE_GETREGS, pid, 0, data)<br/>
描述：读取寄存器值，pid表示被跟踪的子进程，data为用户变量地址用于返回读到的数据。此功能将读取所有17个基本寄存器的值。</p>

<p>13)  PTRACE_SETREGS<br/>
形式：ptrace(PTRACE_SETREGS, pid, 0, data)<br/>
描述：设置寄存器值，pid表示被跟踪的子进程，data为用户数据地址。此功能将设置所有17个基本寄存器的值。</p>

<p>14)  PTRACE_GETFPREGS
形式：ptrace(PTRACE_GETFPREGS, pid, 0, data)<br/>
描述：读取浮点寄存器值，pid表示被跟踪的子进程，data为用户变量地址用于返回读到的数据。此功能将读取所有浮点协处理器387的所有寄存器的值。</p>

<p>15)  PTRACE_SETFPREGS<br/>
形式：ptrace(PTRACE_SETREGS, pid, 0, data)<br/>
描述：设置浮点寄存器值，pid表示被跟踪的子进程，data为用户数据地址。此功能将设置所有浮点协处理器387的所有寄存器的值。</p>

<hr />

<p>在用户模式中，虽然只有一个函数可用，即ptrace(int <em>request, pid_t </em>pid, caddr_t <em>addr, int </em>data)，
但是这个函数能做所有的事情！如果你愿意，也可以花费几个小时来编写自己的小调试器，以解决特定的问题。</p>

<p>ptrace函数的_request参数是最重要的一个参数，因为它确定你将做什么。BSD和Linux的头文件使用不同的定义，这使得将ptrace应用从一个平台移植到另一个平台变得很复杂。默认地，我们使用BSD头文件中的定义。</p>

<p>r  PT_TRACE_ME（PTRACE_TRACEME）<br/>
将当前进程切换到停止状态。它通常总是与fork/exec一起使用，虽然也能遇到自我追踪的应用程序。
对于每一个进程，PT_TRACE_ME只能被调用一次。
追踪一个正被追踪的进程是会失败的（另一个较不重要的结果是进程不能追踪它自己。
如果要这样做，应该首先从自身派生一个进程）。大量的反调试技术都是以这一事实为基础的。
为了克服这类技术，必须使用绕过ptrace的调试器。
一个信号被发送到正被调试的进程，并将该进程切换到停止状态，
该进程可以使用从父进程上下文中调用的PT_CONTINUE和PT_STEP命令从停止状态退出。
wait函数会延迟父进程的执行，直到被调试的进程切换为停止状态或者终止为止（终止时，返回值为1407）。
其他的所有参数都被忽略。</p>

<p>r  PT_ATTACH（PTRACE_ATTACH）<br/>
将进程标志为pid的运行进程切换为停止状态，在这种情形下，
调试器进程成为“父进程”。其他的所有参数都被忽略。进程必须具有与调试进程相同的用户标志（UID），
并且不能是setuid/setduid进程（否则就要用root来调试）。</p>

<p>r  PT_DETACH（PTRACE_DETACH）
停止进程标志为pid进程（由PT_ATTACH和PT_TRACE_ME指定）的调试，
并继续其常态运行。其他的所有参数都被忽略。</p>

<p>r  PT_CONTINUE（PTRACE_CONT）<br/>
继续进程标志为pid的被调试进程的执行，而不中断与调试器进程的通信。
如果addr ＝＝ 1（在Linux中为0），从上次停止的地址继续执行；否则，从指定的地址继续执行。
参数_data指定发送到被调试进程的信号数量（零说明没有信号）。</p>

<p>r  PT_STEP（PTRACE_SINGLESTEP）<br/>
进行进程标志为pid的进程的单步执行，即执行下一条机器指令并切换为停止状态（在i386中，这是根据设置追踪标志来实现的，虽然有些“黑客”函数库使用硬件断点）。BSD要求将参数addr置为1，而Linux要求将该参数置为0。其他的所有参数都被忽略。</p>

<p>r  PT_READ_I和PT_READ_D（PTRACE_PEEKTEXT和PTRACE_PEEKDATA）<br/>
分别从代码区和正被调试进程的地址空间区读取机器字。在许多当代的平台中，这两个指令是等价的。
ptrace函数接收目标地址addr，并返回读到的结果。</p>

<p>r  PT_WRITE_I和PR_READ_D（PTRACE_POKETEXT和PTRACE_POKEDATA）<br/>
将由_data传入的机器字写入addr所指定的地址。</p>

<p>r  PT_GETREGS，PT_GETFPREGS和PT_GETDBREGS（PTRACE_GETREGS，PTRACE<em> FPREGS和PT_GETFPXREGS）<br/>
将一般用途寄存器、段寄存器和调试寄存器的值读入到地址由</em>addr指针所指定的调试器进程的内存区中。
只有i386平台接收这些与系统相关的命令。寄存器结构的描述放在头文件machine/reg.h文件中。</p>

<p>r  PT_SETREGS，PT_SETFPREGS和PT_SETDBREGS（PTRACE_SETREGS，PTRACE<em> SETFPREGS和PT_SETFPXREGS）<br/>
通过拷贝由</em>addr指针所指定的内存区域的内容来设置被调试进程的寄存器的值。</p>

<p>r  PT_KILL（PTRACE_KILL）<br/>
将sigkill发送到被调试进程，以终止其执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 汇编基础]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/08/27/assembly-base/"/>
    <updated>2011-08-27T16:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/08/27/assembly-base</id>
    <content type="html"><![CDATA[<p>绝顶好书<a href="http://abcdxyzk.github.io/download/assembly/Professional_Assembly_Language.pdf">Professional_Assembly_Language</a></p>

<h4>一、简介</h4>

<p>作为最基本的编程语言之一，汇编语言虽然应用的范围不算很广，但重要性却勿庸置疑，因为它能够完成许多其它语言所无法完成的功能。就拿 Linux 内核来讲，虽然绝大部分代码是用 C 语言编写的，但仍然不可避免地在某些关键地方使用了汇编代码，其中主要是在 Linux 的启动部分。由于这部分代码与硬件的关系非常密切，即使是 C 语言也会有些力不从心，而汇编语言则能够很好扬长避短，最大限度地发挥硬件的性能。</p>

<p>大多数情况下 Linux 程序员不需要使用汇编语言，因为即便是硬件驱动这样的底层程序在 Linux 操作系统中也可以用完全用 C 语言来实现，再加上 GCC 这一优秀的编译器目前已经能够对最终生成的代码进行很好的优化，的确有足够的理由让我们可以暂时将汇编语言抛在一边了。但实现情况是 Linux 程序员有时还是需要使用汇编，或者不得不使用汇编，理由很简单：精简、高效和 libc 无关性。假设要移植 Linux 到某一特定的嵌入式硬件环境下，首先必然面临如何减少系统大小、提高执行效率等问题，此时或许只有汇编语言能帮上忙了。</p>

<p>汇编语言直接同计算机的底层软件甚至硬件进行交互，它具有如下一些优点：
能够直接访问与硬件相关的存储器或 I/O 端口； 能够不受编译器的限制，对生成的二进制代码进行完全的控制； 能够对关键代码进行更准确的控制，避免因线程共同访问或者硬件设备共享引起的死锁； 能够根据特定的应用对代码做最佳的优化，提高运行速度； 能够最大限度地发挥硬件的功能。</p>

<p>同时还应该认识到，汇编语言是一种层次非常低的语言，它仅仅高于直接手工编写二进制的机器指令码，因此不可避免地存在一些缺点：
编写的代码非常难懂，不好维护； 很容易产生 bug，难于调试； 只能针对特定的体系结构和处理器进行优化； 开发效率很低，时间长且单调。</p>

<p>Linux 下用汇编语言编写的代码具有两种不同的形式。第一种是完全的汇编代码，指的是整个程序全部用汇编语言编写。尽管是完全的汇编代码，Linux 平台下的汇编工具也吸收了 C 语言的长处，使得程序员可以使用 #include、#ifdef 等预处理指令，并能够通过宏定义来简化代码。第二种是内嵌的汇编代码，指的是可以嵌入到C语言程序中的汇编代码片段。虽然 ANSI 的 C 语言标准中没有关于内嵌汇编代码的相应规定，但各种实际使用的 C 编译器都做了这方面的扩充，这其中当然就包括 Linux 平台下的 GCC。</p>

<!--more-->


<h4>二、Linux 汇编语法格式</h4>

<p>绝大多数 Linux 程序员以前只接触过DOS/Windows 下的汇编语言，这些汇编代码都是 Intel 风格的。但在 Unix 和 Linux 系统中，更多采用的还是 AT&amp;T 格式，两者在语法格式上有着很大的不同：</p>

<p>在 AT&amp;T 汇编格式中，寄存器名要加上 &lsquo;%&rsquo; 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：<br/>
AT&amp;T 格式 Intel 格式<br/>
pushl %eax push eax</p>

<p>在 AT&amp;T 汇编格式中，用 &lsquo;$&rsquo; 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：<br/>
AT&amp;T 格式 Intel 格式<br/>
pushl $1 push 1</p>

<p>AT&amp;T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&amp;T 汇编格式中，目标操作数在源操作数的右边。例如：<br/>
AT&amp;T 格式 Intel 格式<br/>
addl $1, %eax add eax, 1</p>

<p>在 AT&amp;T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀&#8217;b&#8217;、&#8217;w&#8217;、&#8217;l&#8217;分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 &ldquo;byte ptr&rdquo; 和 &ldquo;word ptr&rdquo; 等前缀来表示的。例如：
AT&amp;T 格式Intel 格式movb val, %almov al, byte ptr val在 AT&amp;T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上&#8217;*&lsquo;作为前缀，而在 Intel 格式中则不需要。</p>

<p>远程转移指令和远程子调用指令的操作码，在 AT&amp;T 汇编格式中为 &ldquo;ljump&rdquo; 和 &ldquo;lcall&#8221;，而在 Intel 汇编格式中则为 &#8220;jmp far&rdquo; 和 &ldquo;call far&#8221;，即：
AT&amp;T 格式Intel 格式ljump $section, $offsetjmp far section:offsetlcall $section, $offsetcall far section:offset</p>

<p>与之相应的远程返回指令则为：<br/>
AT&amp;T 格式 Intel 格式<br/>
lret $stack_adjust  ret far stack_adjust</p>

<p>在 AT&amp;T 汇编格式中，内存操作数的寻址方式是<br/>
section:disp(base, index, scale)<br/>
而在 Intel 汇编格式中，内存操作数的寻址方式为：<br/>
section:[base + index*scale + disp]</p>

<p>由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：<br/>
disp + base + index * scale</p>

<p>下面是一些内存操作数的例子：<br/>
AT&amp;T 格式Intel 格式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>movl -4(%ebp), %eax  mov eax, [ebp - 4]
</span><span class='line'>movl array(, %eax, 4), %eax  mov eax, [eax*4 + array]
</span><span class='line'>movw array(%ebx, %eax, 4), %cx  mov cx, [ebx + 4*eax + array]
</span><span class='line'>movb $4, %fs:(%eax)  mov fs:eax, 4 </span></code></pre></td></tr></table></div></figure>


<h4>三、Hello World!</h4>

<p>真不知道打破这个传统会带来什么样的后果，但既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 &ldquo;Hello World!&#8221;，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。</p>

<p>在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。</p>

<p>Linux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&amp;T 汇编语言格式：</p>

<p>例1. AT&amp;T 格式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hello.s
</span><span class='line'>.data # 数据段声明
</span><span class='line'>msg : .string "Hello, world!\\n" # 要输出的字符串
</span><span class='line'>len = . - msg # 字串长度
</span><span class='line'>.text # 代码段声明
</span><span class='line'>.global _start # 指定入口函数
</span><span class='line'>
</span><span class='line'>_start: # 在屏幕上显示一个字符串
</span><span class='line'>movl $len, %edx # 参数三：字符串长度
</span><span class='line'>movl $msg, %ecx # 参数二：要显示的字符串
</span><span class='line'>movl $1, %ebx # 参数一：文件描述符(stdout)
</span><span class='line'>movl $4, %eax # 系统调用号(sys_write)
</span><span class='line'>int $0x80 # 调用内核功能
</span><span class='line'>
</span><span class='line'># 退出程序
</span><span class='line'>movl $0,%ebx # 参数一：退出代码
</span><span class='line'>movl $1,%eax # 系统调用号(sys_exit)
</span><span class='line'>int $0x80 # 调用内核功能</span></code></pre></td></tr></table></div></figure>


<p>初次接触到 AT&amp;T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：</p>

<p>例2. Intel 格式
; hello.asm</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>section .data ; 数据段声明
</span><span class='line'>msg db "Hello, world!", 0xA ; 要输出的字符串
</span><span class='line'>len equ $ - msg ; 字串长度
</span><span class='line'>section .text ; 代码段声明
</span><span class='line'>global _start ; 指定入口函数
</span><span class='line'>_start: ; 在屏幕上显示一个字符串
</span><span class='line'>mov edx, len ; 参数三：字符串长度
</span><span class='line'>mov ecx, msg ; 参数二：要显示的字符串
</span><span class='line'>mov ebx, 1 ; 参数一：文件描述符(stdout)
</span><span class='line'>mov eax, 4 ; 系统调用号(sys_write)
</span><span class='line'>int 0x80 ; 调用内核功能
</span><span class='line'>; 退出程序
</span><span class='line'>mov ebx, 0 ; 参数一：退出代码
</span><span class='line'>mov eax, 1 ; 系统调用号(sys_exit)
</span><span class='line'>int 0x80 ; 调用内核功能</span></code></pre></td></tr></table></div></figure>


<p>上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。</p>

<h4>四、Linux 汇编工具</h4>

<p>Linux 平台下的汇编工具虽然种类很多，但同 DOS/Windows 一样，最基本的仍然是汇编器、连接器和调试器。</p>

<h5>1.汇编器</h5>

<p>汇编器（assembler）的作用是将用汇编语言编写的源程序转换成二进制形式的目标代码。Linux 平台的标准汇编器是 GAS，它是 GCC 所依赖的后台汇编工具，通常包含在 binutils 软件包中。GAS 使用标准的 AT&amp;T 汇编语法，可以用来汇编用 AT&amp;T 格式编写的程序：</p>

<pre><code>$ as -o hello.o hello.s
</code></pre>

<p>Linux 平台上另一个经常用到的汇编器是 NASM，它提供了很好的宏指令功能，并能够支持相当多的目标代码格式，包括 bin、a.out、coff、elf、rdf 等。NASM 采用的是人工编写的语法分析器，因而执行速度要比 GAS 快很多，更重要的是它使用的是 Intel 汇编语法，可以用来编译用 Intel 语法格式编写的汇编程序：</p>

<pre><code>$ nasm -f elf hello.asm
</code></pre>

<h5>2.链接器</h5>

<p>由汇编器产生的目标代码是不能直接在计算机上运行的，它必须经过链接器的处理才能生成可执行代码。链接器通常用来将多个目标代码连接成一个可执行代码，这样可以先将整个程序分成几个模块来单独开发，然后才将它们组合(链接)成一个应用程序。Linux 使用 ld 作为标准的链接程序，它同样也包含在 binutils 软件包中。汇编程序在成功通过 GAS 或 NASM 的编译并生成目标代码后，就可以使用 ld 将其链接成可执行程序了：</p>

<pre><code>$ ld -s -o hello hello.o
</code></pre>

<h5>3.调试器</h5>

<p>有人说程序不是编出来而是调出来的，足见调试在软件开发中的重要作用，在用汇编语言编写程序时尤其如此。Linux 下调试汇编代码既可以用 GDB、DDD 这类通用的调试器，也可以使用专门用来调试汇编代码的 ALD(Assembly Language Debugger)。</p>

<p>从调试的角度来看，使用 GAS 的好处是可以在生成的目标代码中包含符号表(symbol table)，这样就可以使用 GDB 和 DDD 来进行源码级的调试了。要在生成的可执行程序中包含符号表，可以采用下面的方式进行编译和链接：</p>

<pre><code>$ as --gstabs -o hello.o hello.s
$ ld -o hello hello.o
</code></pre>

<p>执行 as 命令时带上参数 &ndash;gstabs 可以告诉汇编器在生成的目标代码中加上符号表，同时需要注意的是，在用 ld 命令进行链接时不要加上 -s 参数，否则目标代码中的符号表在链接时将被删去。</p>

<p>在 GDB 和 DDD 中调试汇编代码和调试 C 语言代码是一样的，你可以通过设置断点来中断程序的运行，查看变量和寄存器的当前值，并可以对代码进行单步跟踪。</p>

<h4>五、系统调用</h4>

<p>即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。</p>

<p>在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。</p>

<p>和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。</p>

<p>所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_<name> 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：
ssize_t write(int fd, const void *buf, size_t count);</p>

<p>该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。</p>

<p>或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：
void * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);</p>

<p>当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。</p>

<p>由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点，Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。</p>

<h5>六、命令行参数</h5>

<p>在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：</p>

<p>例3. 处理命令行参数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># args.s
</span><span class='line'>.text
</span><span class='line'>.globl _start
</span><span class='line'>
</span><span class='line'>_start:
</span><span class='line'>popl %ecx # argc
</span><span class='line'>vnext:
</span><span class='line'>popl %ecx # argv
</span><span class='line'>test %ecx, %ecx # 空指针表明结束
</span><span class='line'>jz exit
</span><span class='line'>movl %ecx, %ebx
</span><span class='line'>xorl %edx, %edx
</span><span class='line'>strlen:
</span><span class='line'>movb (%ebx), %al
</span><span class='line'>inc %edx
</span><span class='line'>inc %ebx
</span><span class='line'>test %al, %al
</span><span class='line'>jnz strlen
</span><span class='line'>movb $10, -1(%ebx)
</span><span class='line'>movl $4, %eax # 系统调用号(sys_write)
</span><span class='line'>movl $1, %ebx # 文件描述符(stdout)
</span><span class='line'>int $0x80
</span><span class='line'>jmp vnext
</span><span class='line'>exit:
</span><span class='line'>movl $1,%eax # 系统调用号(sys_exit)
</span><span class='line'>xorl %ebx, %ebx # 退出代码
</span><span class='line'>int $0x80
</span><span class='line'>
</span><span class='line'>ret</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C 语言文法 ( C Language Grammar )]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/07/23/compiler-c-grammar/"/>
    <updated>2011-07-23T13:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/07/23/compiler-c-grammar</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF
</span><span class='line'>%token TYPE_NAME
</span><span class='line'>
</span><span class='line'>%token TYPEDEF EXTERN STATIC AUTO REGISTER
</span><span class='line'>%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
</span><span class='line'>%token STRUCT UNION ENUM
</span><span class='line'>
</span><span class='line'>%token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN
</span><span class='line'>
</span><span class='line'>%start translation_unit
</span><span class='line'>%%
</span><span class='line'>translation_unit
</span><span class='line'>  : external_declaration
</span><span class='line'>  | translation_unit external_declaration
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>external_declaration
</span><span class='line'>  : function_definition
</span><span class='line'>  | declaration
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>function_definition
</span><span class='line'>  : declaration_specifiers declarator declaration_list compound_statement
</span><span class='line'>  | declaration_specifiers declarator compound_statement
</span><span class='line'>  | declarator declaration_list compound_statement
</span><span class='line'>  | declarator compound_statement
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>declaration_list
</span><span class='line'>  : declaration
</span><span class='line'>  | declaration_list declaration
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>declaration
</span><span class='line'>  : declaration_specifiers ';'
</span><span class='line'>  | declaration_specifiers init_declarator_list ';'
</span><span class='line'>  ;
</span><span class='line'>  
</span><span class='line'>declaration_specifiers
</span><span class='line'>  : storage_class_specifier
</span><span class='line'>  | storage_class_specifier declaration_specifiers
</span><span class='line'>  | type_specifier
</span><span class='line'>  | type_specifier declaration_specifiers
</span><span class='line'>  | type_qualifier
</span><span class='line'>  | type_qualifier declaration_specifiers
</span><span class='line'>  ;
</span><span class='line'>  
</span><span class='line'>specifier_qualifier_list
</span><span class='line'>  : type_specifier specifier_qualifier_list
</span><span class='line'>  | type_specifier
</span><span class='line'>  | type_qualifier specifier_qualifier_list
</span><span class='line'>  | type_qualifier
</span><span class='line'>          
</span><span class='line'>type_qualifier_list
</span><span class='line'>  : type_qualifier
</span><span class='line'>  | type_qualifier_list type_qualifier
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>type_qualifier
</span><span class='line'>  : CONST
</span><span class='line'>  | VOLATILE
</span><span class='line'>  ;
</span><span class='line'> 
</span><span class='line'>storage_class_specifier
</span><span class='line'>  : TYPEDEF
</span><span class='line'>  | EXTERN
</span><span class='line'>  | STATIC
</span><span class='line'>  | AUTO
</span><span class='line'>  | REGISTER
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>type_specifier
</span><span class='line'>  : VOID
</span><span class='line'>  | CHAR
</span><span class='line'>  | SHORT
</span><span class='line'>  | INT
</span><span class='line'>  | LONG
</span><span class='line'>  | FLOAT
</span><span class='line'>  | DOUBLE
</span><span class='line'>  | SIGNED
</span><span class='line'>  | UNSIGNED
</span><span class='line'>  | struct_or_union_specifier
</span><span class='line'>  | enum_specifier
</span><span class='line'>  | TYPE_NAME
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>struct_or_union_specifier
</span><span class='line'>  : struct_or_union IDENTIFIER '{' struct_declaration_list '}'
</span><span class='line'>  | struct_or_union '{' struct_declaration_list '}'
</span><span class='line'>  | struct_or_union IDENTIFIER
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>struct_or_union
</span><span class='line'>  : STRUCT
</span><span class='line'>  | UNION
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>struct_declaration_list
</span><span class='line'>  : struct_declaration
</span><span class='line'>  | struct_declaration_list struct_declaration
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>struct_declaration
</span><span class='line'>  : specifier_qualifier_list struct_declarator_list ';'
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>struct_declarator_list
</span><span class='line'>  : struct_declarator
</span><span class='line'>  | struct_declarator_list ',' struct_declarator
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>struct_declarator
</span><span class='line'>  : declarator
</span><span class='line'>  | ':' constant_expression
</span><span class='line'>  | declarator ':' constant_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>enum_specifier
</span><span class='line'>  : ENUM '{' enumerator_list '}'
</span><span class='line'>  | ENUM IDENTIFIER '{' enumerator_list '}'
</span><span class='line'>  | ENUM IDENTIFIER
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>enumerator_list
</span><span class='line'>  : enumerator
</span><span class='line'>  | enumerator_list ',' enumerator
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>enumerator
</span><span class='line'>  : IDENTIFIER
</span><span class='line'>  | IDENTIFIER '=' constant_expression
</span><span class='line'>  ;       
</span><span class='line'>  
</span><span class='line'>init_declarator_list
</span><span class='line'>  : init_declarator
</span><span class='line'>  | init_declarator_list ',' init_declarator
</span><span class='line'>  ;       
</span><span class='line'>
</span><span class='line'>init_declarator
</span><span class='line'>  : declarator
</span><span class='line'>  | declarator '=' initializer
</span><span class='line'>  ;
</span><span class='line'>  
</span><span class='line'>initializer_list
</span><span class='line'>  : initializer
</span><span class='line'>  | initializer_list ',' initializer
</span><span class='line'>  ;        
</span><span class='line'>
</span><span class='line'>initializer
</span><span class='line'>  : assignment_expression
</span><span class='line'>  | '{' initializer_list '}'
</span><span class='line'>  | '{' initializer_list ',' '}'
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>parameter_type_list
</span><span class='line'>  : parameter_list
</span><span class='line'>  | parameter_list ',' '...'
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>parameter_list
</span><span class='line'>  : parameter_declaration
</span><span class='line'>  | parameter_list ',' parameter_declaration
</span><span class='line'>
</span><span class='line'>parameter_declaration
</span><span class='line'>  : declaration_specifiers declarator
</span><span class='line'>  | declaration_specifiers abstract_declarator
</span><span class='line'>  | declaration_specifiers
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>identifier_list
</span><span class='line'>  : IDENTIFIER
</span><span class='line'>  | identifier_list ',' IDENTIFIER
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>type_name
</span><span class='line'>  : specifier_qualifier_list
</span><span class='line'>  | specifier_qualifier_list abstract_declarator
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>abstract_declarator
</span><span class='line'>  : pointer
</span><span class='line'>  | direct_abstract_declarator
</span><span class='line'>  | pointer direct_abstract_declarator
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>direct_abstract_declarator
</span><span class='line'>  : '(' abstract_declarator ')'
</span><span class='line'>  | '[' ']'
</span><span class='line'>  | '[' constant_expression ']'
</span><span class='line'>  | direct_abstract_declarator '[' ']'
</span><span class='line'>  | direct_abstract_declarator '[' constant_expression ']'
</span><span class='line'>  | '(' ')'
</span><span class='line'>  | '(' parameter_type_list ')'
</span><span class='line'>  | direct_abstract_declarator '(' ')'
</span><span class='line'>  | direct_abstract_declarator '(' parameter_type_list ')'
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>declarator
</span><span class='line'>  : pointer direct_declarator
</span><span class='line'>  | direct_declarator
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>direct_declarator
</span><span class='line'>  : IDENTIFIER
</span><span class='line'>  | '(' declarator ')'
</span><span class='line'>  | direct_declarator '[' constant_expression ']'
</span><span class='line'>  | direct_declarator '[' ']'
</span><span class='line'>  | direct_declarator '(' parameter_type_list ')'
</span><span class='line'>  | direct_declarator '(' identifier_list ')'
</span><span class='line'>  | direct_declarator '(' ')'
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>pointer
</span><span class='line'>  : '*'
</span><span class='line'>  | '*' type_qualifier_list
</span><span class='line'>  | '*' pointer
</span><span class='line'>  | '*' type_qualifier_list pointer
</span><span class='line'>  ;        
</span><span class='line'>  
</span><span class='line'>statement
</span><span class='line'>  : labeled_statement
</span><span class='line'>  | compound_statement
</span><span class='line'>  | expression_statement
</span><span class='line'>  | selection_statement
</span><span class='line'>  | iteration_statement
</span><span class='line'>  | jump_statement
</span><span class='line'>  ;
</span><span class='line'>         
</span><span class='line'>labeled_statement
</span><span class='line'>  : IDENTIFIER ':' statement
</span><span class='line'>  | CASE constant_expression ':' statement
</span><span class='line'>  | DEFAULT ':' statement
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>compound_statement
</span><span class='line'>  : '{' '}'
</span><span class='line'>  | '{' statement_list '}'
</span><span class='line'>  | '{' declaration_list '}'
</span><span class='line'>  | '{' declaration_list statement_list '}'
</span><span class='line'>  ;        
</span><span class='line'>       
</span><span class='line'>statement_list
</span><span class='line'>  : statement
</span><span class='line'>  | statement_list statement
</span><span class='line'>  ;
</span><span class='line'>     
</span><span class='line'>expression_statement
</span><span class='line'>  : ';'
</span><span class='line'>  | expression ';'
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>selection_statement
</span><span class='line'>  : IF '(' expression ')' statement
</span><span class='line'>  | IF '(' expression ')' statement ELSE statement
</span><span class='line'>  | SWITCH '(' expression ')' statement
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>iteration_statement
</span><span class='line'>  : WHILE '(' expression ')' statement
</span><span class='line'>  | DO statement WHILE '(' expression ')' ';'
</span><span class='line'>  | FOR '(' expression_statement expression_statement ')' statement
</span><span class='line'>  | FOR '(' expression_statement expression_statement expression ')' statement
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>jump_statement
</span><span class='line'>  : GOTO IDENTIFIER ';'
</span><span class='line'>  | CONTINUE ';'
</span><span class='line'>  | BREAK ';'
</span><span class='line'>  | RETURN ';'
</span><span class='line'>  | RETURN expression ';'
</span><span class='line'>  ;        
</span><span class='line'>
</span><span class='line'>expression
</span><span class='line'>  : assignment_expression
</span><span class='line'>  | expression ',' assignment_expression
</span><span class='line'>  ;
</span><span class='line'>  
</span><span class='line'>assignment_expression
</span><span class='line'>  : conditional_expression
</span><span class='line'>  | unary_expression assignment_operator assignment_expression
</span><span class='line'>  ;
</span><span class='line'>  
</span><span class='line'>assignment_operator
</span><span class='line'>  : '='
</span><span class='line'>  | '*='
</span><span class='line'>  | '/='
</span><span class='line'>  | '%='
</span><span class='line'>  | '+='
</span><span class='line'>  | '-='
</span><span class='line'>  | '&lt;&lt;='
</span><span class='line'>  | '&gt;&gt;='
</span><span class='line'>  | '&='
</span><span class='line'>  | '^='
</span><span class='line'>  | '|='
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>constant_expression
</span><span class='line'>  : conditional_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>conditional_expression
</span><span class='line'>  : logical_or_expression
</span><span class='line'>  | logical_or_expression '?' expression ':' conditional_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>logical_or_expression
</span><span class='line'>  : logical_and_expression
</span><span class='line'>  | logical_or_expression '||' logical_and_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>logical_and_expression
</span><span class='line'>  : inclusive_or_expression
</span><span class='line'>  | logical_and_expression '&&' inclusive_or_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>inclusive_or_expression
</span><span class='line'>  : exclusive_or_expression
</span><span class='line'>  | inclusive_or_expression '|' exclusive_or_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>exclusive_or_expression
</span><span class='line'>  : and_expression
</span><span class='line'>  | exclusive_or_expression '^' and_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>and_expression
</span><span class='line'>  : equality_expression
</span><span class='line'>  | and_expression '&' equality_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>equality_expression
</span><span class='line'>  : relational_expression
</span><span class='line'>  | equality_expression '==' relational_expression
</span><span class='line'>  | equality_expression '!=' relational_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>relational_expression
</span><span class='line'>  : shift_expression
</span><span class='line'>  | relational_expression '&lt;' shift_expression
</span><span class='line'>  | relational_expression '&gt;' shift_expression
</span><span class='line'>  | relational_expression '&lt;=' shift_expression
</span><span class='line'>  | relational_expression '&gt;=' shift_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>shift_expression
</span><span class='line'>  : additive_expression
</span><span class='line'>  | shift_expression '&lt;&lt;' additive_expression
</span><span class='line'>  | shift_expression '&gt;&gt;' additive_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>additive_expression
</span><span class='line'>  : multiplicative_expression
</span><span class='line'>  | additive_expression '+' multiplicative_expression
</span><span class='line'>  | additive_expression '-' multiplicative_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>multiplicative_expression
</span><span class='line'>  : cast_expression
</span><span class='line'>  | multiplicative_expression '*' cast_expression
</span><span class='line'>  | multiplicative_expression '/' cast_expression
</span><span class='line'>  | multiplicative_expression '%' cast_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>cast_expression
</span><span class='line'>  : unary_expression
</span><span class='line'>  | '(' type_name ')' cast_expression
</span><span class='line'>  ;
</span><span class='line'>  
</span><span class='line'>unary_expression
</span><span class='line'>  : postfix_expression
</span><span class='line'>  | '++' unary_expression
</span><span class='line'>  | '--' unary_expression
</span><span class='line'>  | unary_operator cast_expression
</span><span class='line'>  | SIZEOF unary_expression
</span><span class='line'>  | SIZEOF '(' type_name ')'
</span><span class='line'>  ;
</span><span class='line'>  
</span><span class='line'>unary_operator
</span><span class='line'>  : '&'
</span><span class='line'>  | '*'
</span><span class='line'>  | '+'
</span><span class='line'>  | '-'
</span><span class='line'>  | '~'
</span><span class='line'>  | '!'
</span><span class='line'>  ;
</span><span class='line'>  
</span><span class='line'>argument_expression_list
</span><span class='line'>  : assignment_expression
</span><span class='line'>  | argument_expression_list ',' assignment_expression
</span><span class='line'>  ;
</span><span class='line'>
</span><span class='line'>postfix_expression
</span><span class='line'>  : primary_expression
</span><span class='line'>  | postfix_expression '[' expression ']'
</span><span class='line'>  | postfix_expression '(' ')'
</span><span class='line'>  | postfix_expression '(' argument_expression_list ')'
</span><span class='line'>  | postfix_expression '.' IDENTIFIER
</span><span class='line'>  | postfix_expression '-&gt;' IDENTIFIER
</span><span class='line'>  | postfix_expression '++'
</span><span class='line'>  | postfix_expression '--'
</span><span class='line'>  ;
</span><span class='line'>  
</span><span class='line'>primary_expression
</span><span class='line'>  : IDENTIFIER
</span><span class='line'>  | CONSTANT
</span><span class='line'>  | STRING_LITERAL
</span><span class='line'>  | '(' expression ')'
</span><span class='line'>  ;
</span><span class='line'>%%</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
