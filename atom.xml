<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-05-29T15:55:20+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RHEL5/CentOS5 上支持 Ext4]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/29/system-base-ext/"/>
    <updated>2015-05-29T15:40:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/29/system-base-ext</id>
    <content type="html"><![CDATA[<ul>
<li><p>记住，只能改数据分区，<code>/</code> 和 <code>/boot</code> 分区不要试，至少我没成功，启动参数加rootfstype=ext4也起不来。</p></li>
<li><p><code>/</code> 分区要改成ext4的话，可以直接改<code>/etc/fstab</code>文件，ext3支持以ext4形式挂载。</p></li>
<li><p>extents属性加上后去不掉，所以该不会ext3的，除非不加这个属性？？，去掉属性<code>tune4fs -O ^flex_bg /dev/sdb1</code></p></li>
</ul>


<hr />

<p><a href="http://www.php-oa.com/2010/08/04/linux-rhel5-centos5-ext4.html">http://www.php-oa.com/2010/08/04/linux-rhel5-centos5-ext4.html</a></p>

<p>根据我以前的测试 Ext4 的性能好过 Ext3,在 RHEL5 上的 2.6.18-110 也有加入 Ext4 了.但默认没有让我们使用,怎么样才能不重起,能使用这个啦.
其实我们只要加入一个包e4fsprogs 就行,它其实和 e2fsprogs 是一样的功能,这 RHEL-6 中,会变成一个默认的包的.所以我们目前还只能使用这个包来调整和设置Ext4.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y install e4fsprogs</span></code></pre></td></tr></table></div></figure>


<p>在 RHEL 和 Centos5 中使用 Ext4 前,很多想可能想先给现有的文件系统转换成 Ext4 ,只要运行下面的命令就行了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tune4fs -O extents,uninit_bg,dir_index,flex_bg /dev/sdb1</span></code></pre></td></tr></table></div></figure>


<p>记住，转换成 ext4 后必须用 fsck 扫描，否则不能 mount，-p 参数说明 “自动修复” 文件系统：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fsck -pf /dev/sdb1 或 fsck -y /dev/sdb1</span></code></pre></td></tr></table></div></figure>


<h5>下面这个好像不需要</h5>

<p>在重起前,我还要让内核支持 Ext4 的文件系统,需要修改 initrd 的文件本身的内容.如下命令来生成 支持 Ext4 的 initrd.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkinitrd --with=ext4 --with=ext3 -f /boot/initrd-2.6.18-404.el5.img 2.6.18-404.el5</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络硬盘NFS的安装与配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/29/system-base-net-nfs/"/>
    <updated>2015-05-29T14:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/29/system-base-net-nfs</id>
    <content type="html"><![CDATA[<p><a href="http://www.linuxidc.com/Linux/2014-11/109637.htm">http://www.linuxidc.com/Linux/2014-11/109637.htm</a></p>

<p>NFS 是共享文件的服务的一种协议 下面给大家介绍一下这个服务器的的安装和配置。</p>

<h4>安装</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install nfs-common nfs-kernel-server</span></code></pre></td></tr></table></div></figure>


<h4>配置</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /etc/exprots</span></code></pre></td></tr></table></div></figure>


<p>在正文的最下面输入一行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/srv/nfs_share *(rw)
</span><span class='line'>
</span><span class='line'>/srv/nfs_share 表示的是我们要共享的文件目录
</span><span class='line'>* 表示互联网上任何主机都可以访问 
</span><span class='line'>(rw) 表示对服务器进行访问的主机可以进行的操作 也就是可读可写</span></code></pre></td></tr></table></div></figure>


<p>如果我们只想让我们本地局域网上的主机对我们的服务器进行访问的话  可以这样写</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/srv/nfs_share 192.168.*.*(rw)</span></code></pre></td></tr></table></div></figure>


<h4>访问</h4>

<p>本机访问</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mount -o rw locahost:/srv/nfs_share /mnt/nfs</span></code></pre></td></tr></table></div></figure>


<p>上面的意思是把本地的目录/srv/nfs_share 挂载到 目录/mnt/nfs上 ，这时候我们体会不到挂载点发生了变化 我们可以自己用相关的命令查询，我就不多介绍了</p>

<p>非本地的主机</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mount -o rw 域名:/srv/nfs_share /mnt/nfs</span></code></pre></td></tr></table></div></figure>


<p>这个时候我们会发现NFS太简单了，所以系统管理员就麻烦了</p>

<h5>假如在共享的目录中有我们的重要的文件，怎么办？</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/srv/nfs_share/secret (noaccess)</span></code></pre></td></tr></table></div></figure>


<p>就是任何主机都不能访问/srv/nfs_share/secret 这个子目录</p>

<h5>如何限制root的权限</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/srv/nfs_share 192.168.*。*（rw,root-aquash）</span></code></pre></td></tr></table></div></figure>


<h5>查看客户端挂载共享目录的状态</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nfsstat -c</span></code></pre></td></tr></table></div></figure>


<h5>查看服务器的状态</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nfsstat -s</span></code></pre></td></tr></table></div></figure>


<hr />

<p><a href="http://stevenz.blog.hexun.com/16127677_d.html">http://stevenz.blog.hexun.com/16127677_d.html</a></p>

<p>服务器IP：172.0.0.1，主机名：p470-1, 通过NFS共享/disk1目录</p>

<p>在客户端使用 <code>mount -t nfs p470-1:/disk1 /disk1</code> 时出现</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mount: mount to NFS server 'p470-1' failed: RPC Error: Program not registered.</span></code></pre></td></tr></table></div></figure>


<p>错误提示。</p>

<p>出错原因：p470-1由于网络原因nfs服务被中断，重新开启p470-1的nfs服务然后在客户端重新mount disk1即可</p>

<p>service nfs restart 或 /etc/rc.d/init.d/nfs restart</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMware 'Host SMBus controller not enabled!']]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/29/debug-kdump-vm/"/>
    <updated>2015-05-29T14:21:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/29/debug-kdump-vm</id>
    <content type="html"><![CDATA[<p><a href="https://www.centos.bz/faq/111/">https://www.centos.bz/faq/111/</a></p>

<p>Ubuntu/CentOS guest instances in VMware sometimes come up with the boot error message:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>piix4_smbus 0000:00:007.3: Host SMBus controller not enabled!</span></code></pre></td></tr></table></div></figure>


<p>This error is being caused because VMware doesn’t actually provide that level interface for CPU access, but Ubuntu try to load the kernel module anyway.</p>

<p>How to fix it: <br/>
在虚拟机中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vim /etc/modprobe.d/blacklist.conf</span></code></pre></td></tr></table></div></figure>


<p>add the line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>blacklist i2c-piix4</span></code></pre></td></tr></table></div></figure>


<p>reboot</p>

<hr />

<p>似乎这个错误在centos6 + 3.10* 的内核，有时kdump不起作用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符设备驱动和等待队列样例]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue-sample/"/>
    <updated>2015-05-21T15:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue-sample</id>
    <content type="html"><![CDATA[<p>前两篇的样例</p>

<p><a href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-base-chardev/">字符设备驱动程序</a><br/>
<a href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue/">Linux内核中的等待队列</a></p>

<h4>waitqueue.c</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;linux/module.h&gt;
</span><span class='line'>#include &lt;linux/init.h&gt;
</span><span class='line'>#include &lt;linux/fs.h&gt;
</span><span class='line'>#include &lt;asm/uaccess.h&gt;
</span><span class='line'>#include &lt;linux/wait.h&gt;
</span><span class='line'>#include &lt;linux/semaphore.h&gt;
</span><span class='line'>#include &lt;linux/kernel.h&gt;
</span><span class='line'>#include &lt;linux/proc_fs.h&gt;
</span><span class='line'>
</span><span class='line'>#include &lt;linux/socket.h&gt;
</span><span class='line'>#include &lt;linux/tcp.h&gt;
</span><span class='line'>#include &lt;linux/proc_fs.h&gt;
</span><span class='line'>#include &lt;net/net_namespace.h&gt;
</span><span class='line'>
</span><span class='line'>#include &lt;net/tcp.h&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>static ssize_t globalvar_read(struct file *, char *, size_t, loff_t*);
</span><span class='line'>static ssize_t globalvar_write(struct file *, const char *, size_t, loff_t*);
</span><span class='line'>
</span><span class='line'>struct file_operations globalvar_fops =
</span><span class='line'>{
</span><span class='line'>    .owner     = THIS_MODULE,
</span><span class='line'>    .read = globalvar_read,
</span><span class='line'>    .write = globalvar_write,
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>#define LEN 1024
</span><span class='line'>static char global_var[LEN];
</span><span class='line'>static int read_index = 0;
</span><span class='line'>static int write_index = 0;
</span><span class='line'>static spinlock_t var_lock;
</span><span class='line'>static wait_queue_head_t waitq;
</span><span class='line'>static int flag = 0;
</span><span class='line'>static int major;
</span><span class='line'>
</span><span class='line'>static const char procname[] = "testvar";
</span><span class='line'>
</span><span class='line'>static int __init globalvar_init(void)
</span><span class='line'>{
</span><span class='line'>    init_waitqueue_head(&waitq);
</span><span class='line'>    spin_lock_init(&var_lock);
</span><span class='line'>//    if (!proc_net_fops_create(&init_net, procname, S_IRUSR, &globalvar_fops)) {
</span><span class='line'>    if (!(major = register_chrdev(0, "globalvar", &globalvar_fops))) {
</span><span class='line'>        printk("globalvar register failure\n");
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    printk("major = %d\n", major);
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static void __exit globalvar_exit(void)
</span><span class='line'>{
</span><span class='line'>//    proc_net_remove(&init_net, procname);
</span><span class='line'>    unregister_chrdev(major, "globalvar");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static ssize_t globalvar_read(struct file *filp, char *buf, size_t len, loff_t *off)
</span><span class='line'>{
</span><span class='line'>    int read_len;
</span><span class='line'>    //等待数据可获得
</span><span class='line'>    if (wait_event_interruptible(waitq, flag != 0))
</span><span class='line'>        return -ERESTARTSYS;
</span><span class='line'>
</span><span class='line'>    spin_lock(&var_lock);
</span><span class='line'>    read_len = write_index - read_index;
</span><span class='line'>    if (copy_to_user(buf, global_var+read_index, read_len)) {
</span><span class='line'>        spin_unlock(&var_lock);
</span><span class='line'>        return -EFAULT;
</span><span class='line'>    }
</span><span class='line'>    read_index = write_index;
</span><span class='line'>    flag = 0;
</span><span class='line'>    spin_unlock(&var_lock);
</span><span class='line'>    return read_len;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static ssize_t globalvar_write(struct file *filp, const char *buf, size_t len, loff_t *off)
</span><span class='line'>{
</span><span class='line'>    spin_lock(&var_lock);
</span><span class='line'>    if (copy_from_user(global_var+write_index, buf, len)) {
</span><span class='line'>        spin_unlock(&var_lock);
</span><span class='line'>        return -EFAULT;
</span><span class='line'>    }
</span><span class='line'>    write_index += len;
</span><span class='line'>    spin_unlock(&var_lock);
</span><span class='line'>
</span><span class='line'>    flag = 1;
</span><span class='line'>    //通知数据可获得
</span><span class='line'>    wake_up_interruptible(&waitq);
</span><span class='line'>    return len;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>module_init(globalvar_init);
</span><span class='line'>module_exit(globalvar_exit);
</span><span class='line'>MODULE_LICENSE("GPL");</span></code></pre></td></tr></table></div></figure>


<h4>Makefile</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>obj-m += waitqueue.o
</span><span class='line'>
</span><span class='line'>PWD = $(shell pwd)
</span><span class='line'>KERNEL := /lib/modules/`uname -r`/build
</span><span class='line'>
</span><span class='line'>all:
</span><span class='line'>    make -C $(KERNEL) M=$(PWD) modules</span></code></pre></td></tr></table></div></figure>


<h5>安装模块</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>insmod ./waitqueue.ko</span></code></pre></td></tr></table></div></figure>


<h5>查看对应的设备号</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /proc/devices | grep globalvar
</span><span class='line'>$ 249 globalvar</span></code></pre></td></tr></table></div></figure>


<h5>建立文件</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mknod /dev/globalvar c 249 0</span></code></pre></td></tr></table></div></figure>


<h5>终端1: cat文件</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /dev/globalvar</span></code></pre></td></tr></table></div></figure>


<h5>终端2: echo数据到文件</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 123 &gt; /dev/globalvar
</span><span class='line'>echo 1234567 &gt; /dev/globalvar
</span><span class='line'>echo 123 &gt; /dev/globalvar</span></code></pre></td></tr></table></div></figure>


<p>这时就能看见终端1读到了内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核中的等待队列]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue/"/>
    <updated>2015-05-21T15:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_49d5604e010008bn.html">http://blog.sina.com.cn/s/blog_49d5604e010008bn.html</a></p>

<p>等待队列可以参考net/ipv4/tcp_probe.c的实现</p>

<p><a href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue-sample/">简单样例</a></p>

<h4>Linux内核中的等待队列</h4>

<p>  Linux内核的等待队列是以双循环链表为基础数据结构，与进程调度机制紧密结合，能够用于实现核心的异步事件通知机制。在Linux2.4.21中，等待队列在源代码树include/linux/wait.h中，这是一个通过list_head连接的典型双循环链表，</p>

<p>如下图所示。</p>

<p><img src="http://abcdxyzk.github.io/images/kernel/2015-05-21.jpg" alt="" /></p>

<p>  在这个链表中，有两种数据结构：等待队列头（wait_queue_head_t）和等待队列项（wait_queue_t）。等待队列头和等待队列项中都包含一个list_head类型的域作为"连接件"。由于我们只需要对队列进行添加和删除操作，并不会修改其中的对象（等待队列项），因此，我们只需要提供一把保护整个基础设施和所有对象的锁，这把锁保存在等待队列头中，为wq_lock_t类型。在实现中，可以支持读写锁（rwlock）或自旋锁（spinlock）两种类型，通过一个宏定义来切换。如果使用读写锁，将wq_lock_t定义为rwlock_t类型；如果是自旋锁，将wq_lock_t定义为spinlock_t类型。无论哪种情况，分别相应设置wq_read_lock、wq_read_unlock、wq_read_lock_irqsave、wq_read_unlock_irqrestore、wq_write_lock_irq、wq_write_unlock、wq_write_lock_irqsave和wq_write_unlock_irqrestore等宏。</p>

<h5>等待队列头</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct __wait_queue_head {
</span><span class='line'>    wq_lock_t lock;
</span><span class='line'>    struct list_head task_list;
</span><span class='line'>};
</span><span class='line'>typedef struct __wait_queue_head wait_queue_head_t;</span></code></pre></td></tr></table></div></figure>


<p>  前面已经说过，等待队列的主体是进程，这反映在每个等待队列项中，是一个任务结构指针（struct task_struct * task）。flags为该进程的等待标志，当前只支持互斥。</p>

<h5>等待队列项</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct __wait_queue {
</span><span class='line'>    unsigned int flags;
</span><span class='line'>#define WQ_FLAG_EXCLUSIVE 0x01
</span><span class='line'>    struct task_struct * task;
</span><span class='line'>    struct list_head task_list;
</span><span class='line'>};
</span><span class='line'>typedef struct __wait_queue wait_queue_t;</span></code></pre></td></tr></table></div></figure>


<h5>声明和初始化</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define DECLARE_WAITQUEUE(name, tsk)            \
</span><span class='line'>    wait_queue_t name = __WAITQUEUE_INITIALIZER(name, tsk)
</span><span class='line'>#define __WAITQUEUE_INITIALIZER(name, tsk) {    \
</span><span class='line'>    task:  tsk,                                 \
</span><span class='line'>    task_list: { NULL, NULL },                  \
</span><span class='line'>    __WAITQUEUE_DEBUG_INIT(name)}</span></code></pre></td></tr></table></div></figure>


<p>  通过DECLARE_WAITQUEUE宏将等待队列项初始化成对应的任务结构，并且用于连接的相关指针均设置为空。其中加入了调试相关代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define DECLARE_WAIT_QUEUE_HEAD(name)                    \
</span><span class='line'>    wait_queue_head_t name = __WAIT_QUEUE_HEAD_INITIALIZER(name)
</span><span class='line'>#define __WAIT_QUEUE_HEAD_INITIALIZER(name) {            \
</span><span class='line'>    lock:  WAITQUEUE_RW_LOCK_UNLOCKED,                   \
</span><span class='line'>    task_list: { &(name).task_list, &(name).task_list }, \
</span><span class='line'>    __WAITQUEUE_HEAD_DEBUG_INIT(name)}</span></code></pre></td></tr></table></div></figure>


<p>  通过DECLARE_WAIT_QUEUE_HEAD宏初始化一个等待队列头，使得其所在链表为空，并设置链表为"未上锁"状态。其中加入了调试相关代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline void init_waitqueue_head(wait_queue_head_t *q)</span></code></pre></td></tr></table></div></figure>


<p>该函数初始化一个已经存在的等待队列头，它将整个队列设置为"未上锁"状态，并将链表指针prev和next指向它自身。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    q-&gt;lock = WAITQUEUE_RW_LOCK_UNLOCKED;
</span><span class='line'>    INIT_LIST_HEAD(&q-&gt;task_list);
</span><span class='line'>}
</span><span class='line'>static inline void init_waitqueue_entry(wait_queue_t *q, struct task_struct *p)</span></code></pre></td></tr></table></div></figure>


<p>该函数初始化一个已经存在的等待队列项，它设置对应的任务结构，同时将标志位清0。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    q-&gt;flags = 0;
</span><span class='line'>    q-&gt;task = p;
</span><span class='line'>}
</span><span class='line'>static inline int waitqueue_active(wait_queue_head_t *q)</span></code></pre></td></tr></table></div></figure>


<p>该函数检查等待队列是否为空。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    return !list_empty(&q-&gt;task_list);
</span><span class='line'>}
</span><span class='line'>static inline void __add_wait_queue(wait_queue_head_t *head, wait_queue_t *new)</span></code></pre></td></tr></table></div></figure>


<p>将指定的等待队列项new添加到等待队列头head所在的链表头部，该函数假设已经获得锁。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    list_add(&new-&gt;task_list, &head-&gt;task_list);
</span><span class='line'>}
</span><span class='line'>static inline void __add_wait_queue_tail(wait_queue_head_t *head, wait_queue_t *new)</span></code></pre></td></tr></table></div></figure>


<p>将指定的等待队列项new添加到等待队列头head所在的链表尾部，该函数假设已经获得锁。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    list_add_tail(&new-&gt;task_list, &head-&gt;task_list);
</span><span class='line'>}
</span><span class='line'>static inline void __remove_wait_queue(wait_queue_head_t *head, wait_queue_t *old)</span></code></pre></td></tr></table></div></figure>


<p>将函数从等待队列头head所在的链表中删除指定等待队列项old，该函数假设已经获得锁，并且old在head所在链表中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    list_del(&old-&gt;task_list);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>睡眠和唤醒操作</h4>

<p>对等待队列的操作包括睡眠和唤醒（相关函数保存在源代码树的/kernel/sched.c和include/linux/sched.h中）。思想是更改当前进程（CURRENT）的任务状态，并要求重新调度，因为这时这个进程的状态已经改变，不再在调度表的就绪队列中，因此无法再获得执行机会，进入"睡眠"状态，直至被"唤醒"，即其任务状态重新被修改回就绪态。</p>

<p>常用的睡眠操作有interruptible_sleep_on和sleep_on。两个函数类似，只不过前者将进程的状态从就绪态（TASK_RUNNING）设置为TASK_INTERRUPTIBLE，允许通过发送signal唤醒它（即可中断的睡眠状态）；而后者将进程的状态设置为TASK_UNINTERRUPTIBLE，在这种状态下，不接收任何singal。</p>

<p>以interruptible_sleep_on为例，其展开后的代码是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void interruptible_sleep_on(wait_queue_head_t *q)
</span><span class='line'>{
</span><span class='line'>    unsigned long flags;
</span><span class='line'>    wait_queue_t wait;
</span><span class='line'>    /* 构造当前进程对应的等待队列项 */
</span><span class='line'>    init_waitqueue_entry(&wait, current);
</span><span class='line'>
</span><span class='line'>    /* 将当前进程的状态从TASK_RUNNING改为TASK_INTERRUPTIBLE */
</span><span class='line'>    current-&gt;state = TASK_INTERRUPTIBLE;
</span><span class='line'>
</span><span class='line'>    /* 将等待队列项添加到指定链表中 */
</span><span class='line'>    wq_write_lock_irqsave(&q-&gt;lock,flags);
</span><span class='line'>    __add_wait_queue(q, &wait); 
</span><span class='line'>    wq_write_unlock(&q-&gt;lock);
</span><span class='line'>
</span><span class='line'>    /* 进程重新调度，放弃执行权 */
</span><span class='line'>    schedule();
</span><span class='line'>
</span><span class='line'>    /* 本进程被唤醒，重新获得执行权，首要之事是将等待队列项从链表中删除 */
</span><span class='line'>    wq_write_lock_irq(&q-&gt;lock);
</span><span class='line'>    __remove_wait_queue(q, &wait);
</span><span class='line'>    wq_write_unlock_irqrestore(&q-&gt;lock,flags);
</span><span class='line'>    /* 至此，等待过程结束，本进程可以正常执行下面的逻辑 */
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>对应的唤醒操作包括wake_up_interruptible和wake_up。wake_up函数不仅可以唤醒状态为TASK_UNINTERRUPTIBLE的进程，而且可以唤醒状态为TASK_INTERRUPTIBLE的进程。</p>

<p>wake_up_interruptible只负责唤醒状态为TASK_INTERRUPTIBLE的进程。这两个宏的定义如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define wake_up(x)   __wake_up((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE, 1)
</span><span class='line'>#define wake_up_interruptible(x) __wake_up((x),TASK_INTERRUPTIBLE, 1)</span></code></pre></td></tr></table></div></figure>


<p><strong>wake_up函数主要是获取队列操作的锁，具体工作是调用</strong>wake_up_common完成的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void __wake_up(wait_queue_head_t *q, unsigned int mode, int nr)
</span><span class='line'>{
</span><span class='line'>    if (q) {
</span><span class='line'>        unsigned long flags;
</span><span class='line'>        wq_read_lock_irqsave(&q-&gt;lock, flags);
</span><span class='line'>        __wake_up_common(q, mode, nr, 0);
</span><span class='line'>        wq_read_unlock_irqrestore(&q-&gt;lock, flags);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>/<em> The core wakeup function.  Non-exclusive wakeups (nr_exclusive == 0) just wake everything up.  If it&rsquo;s an exclusive wakeup (nr_exclusive == small +ve number) then we wake all the non-exclusive tasks and one exclusive task.
There are circumstances in which we can try to wake a task which has already started to run but is not in state TASK_RUNNING.  try_to_wake_up() returns zero in this (rare) case, and we handle it by contonuing to scan the queue. </em>/</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline void __wake_up_common (wait_queue_head_t *q, unsigned int mode, int nr_exclusive, const int sync)</span></code></pre></td></tr></table></div></figure>


<p>参数q表示要操作的等待队列，mode表示要唤醒任务的状态，如TASK_UNINTERRUPTIBLE或TASK_INTERRUPTIBLE等。nr_exclusive是要唤醒的互斥进程数目，在这之前遇到的非互斥进程将被无条件唤醒。sync表示？？？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    struct list_head *tmp;
</span><span class='line'>    struct task_struct *p;
</span><span class='line'>
</span><span class='line'>    CHECK_MAGIC_WQHEAD(q);
</span><span class='line'>    WQ_CHECK_LIST_HEAD(&q-&gt;task_list);
</span><span class='line'>
</span><span class='line'>    /* 遍历等待队列 */
</span><span class='line'>    list_for_each(tmp,&q-&gt;task_list) {
</span><span class='line'>        unsigned int state;
</span><span class='line'>        /* 获得当前等待队列项 */
</span><span class='line'>        wait_queue_t *curr = list_entry(tmp, wait_queue_t, task_list);
</span><span class='line'>
</span><span class='line'>        CHECK_MAGIC(curr-&gt;__magic);
</span><span class='line'>        /* 获得对应的进程 */
</span><span class='line'>        p = curr-&gt;task;
</span><span class='line'>        state = p-&gt;state;
</span><span class='line'>
</span><span class='line'>        /* 如果我们需要处理这种状态的进程 */
</span><span class='line'>        if (state & mode) {
</span><span class='line'>            WQ_NOTE_WAKER(curr);
</span><span class='line'>            if (try_to_wake_up(p, sync) && (curr-&gt;flags&WQ_FLAG_EXCLUSIVE) && !--nr_exclusive)
</span><span class='line'>                break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>/<em> 唤醒一个进程，将它放到运行队列中，如果它还不在运行队列的话。"当前"进程总是在运行队列中的（except when the actual re-schedule is in progress)，and as such you&rsquo;re allowed to do the simpler &ldquo;current->state = TASK_RUNNING&rdquo; to mark yourself runnable without the overhead of this. </em>/</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline int try_to_wake_up(struct task_struct * p, int synchronous)
</span><span class='line'>{
</span><span class='line'>    unsigned long flags;
</span><span class='line'>    int success = 0;
</span><span class='line'>
</span><span class='line'>    /* 由于我们需要操作运行队列，必须获得对应的锁 */
</span><span class='line'>    spin_lock_irqsave(&runqueue_lock, flags);
</span><span class='line'>    /* 将进程状态设置为TASK_RUNNING */
</span><span class='line'>    p-&gt;state = TASK_RUNNING;
</span><span class='line'>    /* 如果进程已经在运行队列中，释放锁退出 */
</span><span class='line'>    if (task_on_runqueue(p))
</span><span class='line'>        goto out;
</span><span class='line'>    /* 否则将进程添加到运行队列中 */
</span><span class='line'>    add_to_runqueue(p);
</span><span class='line'>
</span><span class='line'>    /* 如果设置了同步标志 */
</span><span class='line'>    if (!synchronous || !(p-&gt;cpus_allowed & (1UL &lt;&lt; smp_processor_id())))
</span><span class='line'>        reschedule_idle(p);
</span><span class='line'>    /* 唤醒成功，释放锁退出 */
</span><span class='line'>    success = 1;
</span><span class='line'>out:
</span><span class='line'>    spin_unlock_irqrestore(&runqueue_lock, flags);
</span><span class='line'>    return success;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>等待队列应用模式</h4>

<p>等待队列的的应用涉及两个进程，假设为A和B。A是资源的消费者，B是资源的生产者。A在消费的时候必须确保资源已经生产出来，为此定义一个资源等待队列。这个队列同时要被进程A和进程B使用，我们可以将它定义为一个全局变量。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DECLARE_WAIT_QUEUE_HEAD(rsc_queue); /* 全局变量 */</span></code></pre></td></tr></table></div></figure>


<p>在进程A中，执行逻辑如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while (resource is unavaiable) {
</span><span class='line'>    interruptible_sleep_on( &wq );
</span><span class='line'>}
</span><span class='line'>consume_resource();</span></code></pre></td></tr></table></div></figure>


<p>在进程B中，执行逻辑如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>produce_resource();
</span><span class='line'>wake_up_interruptible( &wq );</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
