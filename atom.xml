<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-12-23T01:47:18+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[内核模块编译怎样绕过insmod时的版本检查]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/kernel-vermagic/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/kernel-vermagic</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_53931eca01015uky.html">http://blog.sina.com.cn/s/blog_53931eca01015uky.html</a></p>

<p>在開發kernel driver時，總是會遇到討人厭的vermagic檢查，只要目前在run的kernel版本跟driver編譯時用的kernel版本不一致，就沒辦法insmod。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash-3.2# insmod sdio.ko
</span><span class='line'>sdio: version magic '2.6.28-271-gec75a15 preempt mod_unload modversions ARMv7 '
</span><span class='line'>should be '2.6.28 preempt mod_unload ARMv7 '
</span><span class='line'>insmod: init_module 'sdio.ko' failed (Exec format error)</span></code></pre></td></tr></table></div></figure>


<p>這大大降低了開發速度，尤其是當你拿不到客戶在用的kernel時，又要開發driver給他用，真的是很麻煩……</p>

<p>那麼要怎麼利用噁心的方式繞過去呢???</p>

<h5>一、先把 Moudle version 檢查關掉。</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@host # ARCH=arm make menuconfig
</span><span class='line'>    --- Enable loadable module support                                             │ │
</span><span class='line'>    │ │         [ ]   Forced module loading                                      │ │
</span><span class='line'>    │ │         [*]   Module unloading                                           │ │
</span><span class='line'>    │ │         [*]     Forced module unloading                                  │ │
</span><span class='line'>    │ │         [ ]   Module versioning support                                  │ │
</span><span class='line'>    │ │         [ ]   Source checksum for all modules</span></code></pre></td></tr></table></div></figure>


<h5>二、 使用modinfo時，可以看到目前這driver的vermagic</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filename: external_drivers/omap3530/Linux/sdio/sdio.ko
</span><span class='line'>author: Texas Instruments Inc
</span><span class='line'>alias: TIWLAN_SDIO
</span><span class='line'>license: GPL
</span><span class='line'>description: TI WLAN SDIO driver
</span><span class='line'>depends:
</span><span class='line'>vermagic: 2.6.28-271-gec75a15 preempt mod_unload ARMv7
</span><span class='line'>parm: g_sdio_debug_level:debug level (int)</span></code></pre></td></tr></table></div></figure>


<h5>三、 修改 kernel 的 vermagic，再重新編譯driver</h5>

<p>vermagic 的第一個值 2.6.28-noneed 是由這 include/linux/utsrelease.h裡的 UTS_RELEASE 所定義。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define UTS_RELEASE "2.6.28-271-gec75a15"</span></code></pre></td></tr></table></div></figure>


<p>之後再由 include/linux/vermagic.h 裡的 macro<br/>
去組合出 VERMAGIC_STRING ， 也就是 kernel 的vermagic。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;generated/utsrelease.h&gt;
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_SMP
</span><span class='line'>#define MODULE_VERMAGIC_SMP "SMP "
</span><span class='line'>#else
</span><span class='line'>#define MODULE_VERMAGIC_SMP ""
</span><span class='line'>#endif
</span><span class='line'>#ifdef CONFIG_PREEMPT
</span><span class='line'>#define MODULE_VERMAGIC_PREEMPT "preempt "
</span><span class='line'>#else
</span><span class='line'>#define MODULE_VERMAGIC_PREEMPT ""
</span><span class='line'>#endif完成編譯後，你就可以得
</span><span class='line'>#ifdef CONFIG_MODULE_UNLOAD
</span><span class='line'>#define MODULE_VERMAGIC_MODULE_UNLOAD "mod_unload "
</span><span class='line'>#else
</span><span class='line'>#define MODULE_VERMAGIC_MODULE_UNLOAD ""
</span><span class='line'>#endif
</span><span class='line'>#ifndef CONFIG_MODVERSIONS
</span><span class='line'>#define MODULE_VERMAGIC_MODVERSIONS "modversions "
</span><span class='line'>#else
</span><span class='line'>#define MODULE_VERMAGIC_MODVERSIONS ""
</span><span class='line'>#endif
</span><span class='line'>#ifndef MODULE_ARCH_VERMAGIC
</span><span class='line'>#define MODULE_ARCH_VERMAGIC ""
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>#define VERMAGIC_STRING \
</span><span class='line'>UTS_RELEASE " " \
</span><span class='line'>MODULE_VERMAGIC_SMP MODULE_VERMAGIC_PREEMPT \
</span><span class='line'>MODULE_VERMAGIC_MODULE_UNLOAD MODULE_VERMAGIC_MODVERSIONS \
</span><span class='line'>MODULE_ARCH_VERMAGIC</span></code></pre></td></tr></table></div></figure>


<p>所以， 我們只要把 UTS_RELEASE 改成我們的數字即可，當然若是懶得去try組合後的字串，也可以直接將VERMAGIC_STRING改成你要的字串</p>

<p>建議修改完 vermagic.h, utsrelease.h後，還是把kernel重編完再編kernel，比較保險。</p>

<p>以下是修改後，用modinfo看的結果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filename: external_drivers/omap3530/Linux/sdio/sdio.ko
</span><span class='line'>author: Texas Instruments Inc
</span><span class='line'>alias: TIWLAN_SDIO
</span><span class='line'>license: GPL
</span><span class='line'>description: TI WLAN SDIO driver
</span><span class='line'>depends:
</span><span class='line'>vermagic: 2.6.28 preempt mod_unload ARMv7
</span><span class='line'>parm: g_sdio_debug_level:debug level (int)</span></code></pre></td></tr></table></div></figure>


<hr />

<hr />

<p>另外若你是用git 做版本控制 , 那就會出現git的版本號在kernel 編號上<br/>
所以要把他關掉</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>General setup  ---&gt;
</span><span class='line'> [ ] Automatically append version information to the version strin
</span><span class='line'>
</span><span class='line'>解釋;
</span><span class='line'>CONFIG_LOCALVERSION_AUTO:                                                   │ 
</span><span class='line'>  │                                                                         │ 
</span><span class='line'>  │ This will try to automatically determine if the current tree is a       │ 
</span><span class='line'>  │ release tree by looking for git tags that belong to the current         │ 
</span><span class='line'>  │ top of tree revision.                                                   │ 
</span><span class='line'>  │                                                                         │ 
</span><span class='line'>  │ A string of the format -gxxxxxxxx will be added to the localversion     │ 
</span><span class='line'>  │ if a git-based tree is found.  The string generated by this will be     │ 
</span><span class='line'>  │ appended after any matching localversion* files, and after the value    │ 
</span><span class='line'>  │ set in CONFIG_LOCALVERSION.                                             │ 
</span><span class='line'>  │                                                                         │ 
</span><span class='line'>  │ (The actual string used here is the first eight characters produced     │ 
</span><span class='line'>  │ by running the command:                                                 │ 
</span><span class='line'>  │                                                                         │ 
</span><span class='line'>  │ which is done within the script "scripts/setlocalversion".)             │ 
</span><span class='line'>  │                                                                         │ 
</span><span class='line'>  │ Symbol: LOCALVERSION_AUTO [=y]                                          │ 
</span><span class='line'>  │ Prompt: Automatically append version information to the version string  │ 
</span><span class='line'>  │   Defined at init/Kconfig:84                                            │ 
</span><span class='line'>  │   Location:                                                             │ 
</span><span class='line'>  │ ingT</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[moto sbf包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/android-sbf/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/android-sbf</id>
    <content type="html"><![CDATA[<p>解出的CG35.smg或CG35.img是boot.img, boot.img可以按照 <a href="http://abcdxyzk.github.io/blog/2014/12/22/android-img/">这里</a> 的方式编辑</p>

<p><span style="color:red">注意： motorola只有一些新的机型有方法解bootloader锁，沒解锁的bootloader会验证boot、recovery等分区的完整性（两个分区都是8M），不管有用的数据还是没用的数据都加入验证（好像是隔段距离取点数据做验证，因为替换最后100字节可以刷成功，替换多点就失败。可是实际有用的boot.img大小才4M左右）。</span></p>

<p>MOTO X解BL锁教程  <a href="http://bbs.gfan.com/android-6726986-1-1.html">http://bbs.gfan.com/android-6726986-1-1.html</a></p>

<h4>1 命令行解包</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./sbf_flash -x OLYFR_U4_1.8.3_SIGNED_OLPSATTSPE_P013_HWolympus_1g_Service1FF.sbf</span></code></pre></td></tr></table></div></figure>


<p>提取到一堆img文件</p>

<h4>2神器：MotoAndroidDepacker</h4>

<p><a href="http://www.veryhuo.com/down/html/47416.html">http://www.veryhuo.com/down/html/47416.html</a></p>

<p>就是这个软件，可以把moto的底包解开。<br/>
使用很简单：<br/>
1 点open from file菜单打开sbf底包，然后点split to files就解开了<br/>
2 将要打包的文件拷到单独的文件夹A，然后点open files，选择刚刚的文件夹A，然后点compile file，就会在文件夹A里面生成result\firmware.sbf文件</p>

<p>解包出的文件解释：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CG31/CDT是描述各文件版本号的, 相当于注释文件
</span><span class='line'>CG33/CDROM是个ISO文件, 可以用WinRAR之类的打开, 包含PC端程序(MotoHelperAgent)
</span><span class='line'>CG35/Boot包含了系统内核&lt;-boot-only就是这个
</span><span class='line'>CG39/system分区
</span><span class='line'>CG40/cache缓存分区(国行多余的部分), 显然里面什么都没有
</span><span class='line'>CG45/Baseband基带固件
</span><span class='line'>CG47/Recovery就是官方恢复, 里面也包含独立的内核, 但不用于启动
</span><span class='line'>CG61/devtree包含设备描述符
</span><span class='line'>RAMDLD/RamDisk&tmpfs, Android/Linux启动初始化的一部分, 不涉及具体设备</span></code></pre></td></tr></table></div></figure>


<p>这篇感觉没用 <a href="http://bbs.ihei5.com/thread-5883-1-1.html">http://bbs.ihei5.com/thread-5883-1-1.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GT-S5830刷机教程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/android-s5830-flash/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/android-s5830-flash</id>
    <content type="html"><![CDATA[<h5>ROM</h5>

<p>(推荐) 三星 S5830 2.3.4 ROM (国行ZCKPB) <a href="http://dl.dbank.com/c0e5aato8l">http://dl.dbank.com/c0e5aato8l</a></p>

<p>2.3.6 ROM S5830DXKT7.tar.zip  <a href="http://dl.vmall.com/c0016n1hza">http://dl.vmall.com/c0016n1hza</a></p>

<h5>工具</h5>

<p>Odin Multi Downloader v4.38.exe <a href="http://dl.dbank.com/c0ijy8bqrr">http://dl.dbank.com/c0ijy8bqrr</a>
记得装USB驱动</p>

<h3>教程</h3>

<p>[贴自] <a href="http://samsungbbs.cnmo.com/thread-10414540-1-1.html">http://samsungbbs.cnmo.com/thread-10414540-1-1.html</a></p>

<h4>1</h4>

<p>按HOME + 电源键进入recovery模式，双wipe</p>

<h4>2</h4>

<p>电源键+HOME键+音量调节下键 ， 两次出现三星log后会进入downloading模式</p>

<h4>3</h4>

<p>将手机与电脑通过USB数据线相连，然后运行刷机平台Odin Multi Downloader v4.38.exe</p>

<p><img src="http://abcdxyzk.github.io/images/system/2014-12-22-1.jpg" alt="" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  
</span><span class='line'>  CSC：全称Customer Specific Customization，里面包含的是运营商数据，不同ROM对应的区域不一样，所以CSC文件也不会相同。
</span><span class='line'>　　PDA：里面是CODE、ANDROID本身和所有的软件运行依靠的代码。
</span><span class='line'>　　PHONE：又称为MODEM，就是基带的意思，是所有通讯模块正常运行的依靠，机带情勿要随便升级替换。
</span><span class='line'>　　OPS：其实不是刷到手机中的文件，而是一个奥丁工具用来刷机的配置文件， 里面记录的是手机各个分区的信息。刷机的时候，奥丁依据这个配置将rom内的分区镜像恢复到指定分区中。如果勾选了“重新分区”，则依据这个配置重新分配分区。</span></code></pre></td></tr></table></div></figure>


<h4>4</h4>

<p>选择对应的包</p>

<p><img src="http://abcdxyzk.github.io/images/system/2014-12-22-2.jpg" alt="" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1、点击OPS命令按钮，浏览选择 Cooper_v1.0.ops    
</span><span class='line'>2、点击BOOT命令按钮，浏览选择 APBOOT_S5830****_CL382966_REV03_user_low_true.tar  
</span><span class='line'>3、点击Phone命令按钮，浏览选择 MODEM_S5830****_CL382966_REV03.tar  
</span><span class='line'>4、点击PDA命令按钮，浏览选择 CODE_S5830****_CL382966_REV03_user_low_true.tar  
</span><span class='line'>5、点击CSC命令按钮，浏览选 CSC_GT-S5830S5830O****_CL382966_REV03_user_low_true.tar  </span></code></pre></td></tr></table></div></figure>


<p><span style="color:red">注意：可以只有OPS和PDA，PDA里面也可以只有boot.img。替换别的包刷的话最好保持原来包文件名的部分前缀，不然会提示“invalid image type”</span></p>

<hr />

<h2>独立包的刷包方式</h2>

<p>因为独立包只有一个，看起来还是比较简单的。只用放一个包就好了。<br/>
在刷之前确认格式是不是tar格式，名称里面有没有home。</p>

<p><img src="http://abcdxyzk.github.io/images/system/2014-12-22-3.jpg" alt="" /></p>

<p>如果有在双击这个ROM，可以进入到压缩包里面，看到这些文件。基本上确认这个包可以刷了。</p>

<p>OPS放好之后，看这里。这3个勾一定打上,</p>

<p><img src="http://abcdxyzk.github.io/images/system/2014-12-22-4.jpg" alt="" /></p>

<p>3个勾打上之后，就只有这里面才能放包了，其他都不行</p>

<p><img src="http://abcdxyzk.github.io/images/system/2014-12-22-5.jpg" alt="" /></p>

<hr />

<h4>刷好之后是这样</h4>

<p><img src="http://abcdxyzk.github.io/images/system/2014-12-22-6.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[samsung rfs、tar包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/android-rfs-tar/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/android-rfs-tar</id>
    <content type="html"><![CDATA[<p>boot.img可以按照 <a href="http://abcdxyzk.github.io/blog/2014/12/22/android-img/">这里</a> 的方式编辑</p>

<p>GT-S5830分区</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bml1 mibib
</span><span class='line'>bml2 qcsbl
</span><span class='line'>bml3 oemsbl
</span><span class='line'>bml4 amms
</span><span class='line'>bml5 ????????FSR_STL 
</span><span class='line'>bml6 ????????FSR_STL / Empty|Empty RFS Partition???
</span><span class='line'>bml7 arm11boot
</span><span class='line'>bml8 Boot.img
</span><span class='line'>bml9 Recovery.img
</span><span class='line'>bml10 Looks like kernel init?????Contains this string:"em=330M console=NULL hw=5 fbaddr=0xb0000"
</span><span class='line'>bml11 Empty partion no partion table?? Whole file FF
</span><span class='line'>bml12 System.rfs
</span><span class='line'>bml13 Data Partition
</span><span class='line'>bml14 Cache Partition</span></code></pre></td></tr></table></div></figure>


<p>把所有要打包进ROM的文件都复制到这个文件夹内；<br/>
比如：这些刷机文件包括：boot.img</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   $ tar -cf NewRom.tar boot.img
</span><span class='line'>   $ md5sum -t NewROM.tar &gt;&gt; NewROM.tar
</span><span class='line'>   $ mv NewROM.tar NewROM.tar.md5</span></code></pre></td></tr></table></div></figure>


<p>第一句是TAR打包，第二句是md5签名，第三句是改文件名，可以省略。</p>

<p>NewROM.tar.md5就是最后生成的，可供刷机用的ROM了！</p>

<h4>编辑 rfs</h4>

<p>挂载 RFS文件factoryfs.rfs 为一个磁盘：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># su
</span><span class='line'># mount –o loop factoryfs.rfs System</span></code></pre></td></tr></table></div></figure>


<p>进入“磁盘”System目录，你就可以看到factoryfs.rfs解包后的所有内容。</p>

<p>修改好/System的内容后，在超级用户终端执行下面的语句卸载该“磁盘” ，这个操作等价于“打包”过程。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># umount System</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看所有(挂载、未挂载)的分区]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/android-partitions/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/android-partitions</id>
    <content type="html"><![CDATA[<p>blog.chinaunix.net/uid-22731254-id-3222708.html</p>

<p>下面的例子都是围绕/system目录。</p>

<p>使用df命令查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># df
</span><span class='line'>df
</span><span class='line'>Filesystem Size Used Free Blksize
</span><span class='line'>/dev       197M 64K   197M 4096
</span><span class='line'>/mnt/asec  197M 0K    197M 4096
</span><span class='line'>/mnt/obb   197M 0K    197M 4096
</span><span class='line'>/system    295M 245M  50M  4096
</span><span class='line'>/data      755M 26M   728M 4096
</span><span class='line'>/cache     188M 4M    184M 4096
</span><span class='line'>/HWUserData 2G 1024K  2G   32768
</span><span class='line'>/cust      59M 14M    44M  4096
</span><span class='line'>/mnt/sdcard 7G 753M   6G   32768
</span><span class='line'>/mnt/secure/asec 7G 753M 6G 32768</span></code></pre></td></tr></table></div></figure>


<p>看到/system分区有295MB的大小。</p>

<p>接着查看/proc下的partitions</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cat /proc/partitions
</span><span class='line'>cat /proc/partitions
</span><span class='line'>major minor #blocks name
</span><span class='line'>
</span><span class='line'>179    0    3817472 mmcblk0
</span><span class='line'>179    1    20      mmcblk0p1
</span><span class='line'>179    2    300     mmcblk0p2
</span><span class='line'>179    3    133120  mmcblk0p3
</span><span class='line'>179    4    1       mmcblk0p4
</span><span class='line'>179    5    12288   mmcblk0p5
</span><span class='line'>179    6    196608  mmcblk0p6
</span><span class='line'>179    7    4096    mmcblk0p7
</span><span class='line'>179    8    3072    mmcblk0p8
</span><span class='line'>179    9    4096    mmcblk0p9
</span><span class='line'>179    10   3072    mmcblk0p10
</span><span class='line'>179    11   3072    mmcblk0p11
</span><span class='line'>179    12   393216  mmcblk0p12
</span><span class='line'>179    13   786432  mmcblk0p13
</span><span class='line'>179    14   4096    mmcblk0p14
</span><span class='line'>179    15   8192    mmcblk0p15
</span><span class='line'>179    16   20480   mmcblk0p16
</span><span class='line'>179    17   4096    mmcblk0p17
</span><span class='line'>179    18   81920   mmcblk0p18
</span><span class='line'>179    19   2154496 mmcblk0p19
</span><span class='line'>179    32   7761920 mmcblk1
</span><span class='line'>179    33   7757824 mmcblk1p1
</span><span class='line'>31     0    4096    mtdblock0</span></code></pre></td></tr></table></div></figure>


<p>其实，可以在/proc/mounts下面看的更直接。。。</p>
]]></content>
  </entry>
  
</feed>
