<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/categories/kernel/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-22T01:36:23+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[offsetof宏 container_of宏]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/09/15/kernel-offset-container_of/"/>
    <updated>2014-09-15T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/09/15/kernel-offset-container_of</id>
    <content type="html"><![CDATA[<p>Linux内核中，用两个非常巧妙地宏实现了，一个是offsetof宏，另一个是container_of宏，下面讲解一下这两个宏。</p>

<h4>1.  offsetof宏</h4>

<h5>【定义】：</h5>

<pre><code>#define offsetof(TYPE, MEMBER) ((size_t) &amp; ((TYPE *)0)-&gt;MEMBER )
</code></pre>

<h5>【功能】： 获得一个结构体变量成员在此结构体中的偏移量。</h5>

<h5>【例子】：</h5>

<pre><code class="">    struct A 
        { 
        int x ; 
        int y; 
        int z; 
    }; 

    void main() 
    { 
        printf("the offset of z is %d",offsetof( struct A, z )  ); 
    } 
</code></pre>

<p>// 输出结果为 8</p>

<h5>【分析】：</h5>

<p>该宏，TYPE为结构体类型，MEMBER 为结构体内的变量名。<br/>
(TYPE <em>)0) 是欺骗编译器说有一个指向结构TYPE 的指针，其地址值0 <br/>
(TYPE </em>)0)->MEMBER 是要取得结构体TYPE中成员变量MEMBER的地址. 因为基址为0，所以，这时MEMBER的地址当然就是MEMBER在TYPE中的偏移了。</p>

<h4>2. container_of宏（即实现了题目中的功能）</h4>

<h5>【定义】：</h5>

<pre><code>#define container_of(ptr, type, member)   ({const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr); (type *)( (char *)__mptr - offsetof(type,member) );})
</code></pre>

<h5>【功能】：</h5>

<p>从结构体（type）某成员变量（member）指针（ptr）来求出该结构体（type）的首指针。</p>

<h5>【例子】：</h5>

<pre><code>    struct A 
    { 
        int x ; 
        int y; 
        int z; 
    }; 

    struct A myTest; 

    int *pz = &amp;myTest.z; 

    struct A* getHeaderPtr( int *pz ) 
    { 
        return container_of( pz , struct A, z ); 
    } 
</code></pre>

<h5>【分析】：</h5>

<p>（1） typeof( ( (type <em>)0)->member )为取出member成员的变量类型。<br/>
（2） 定义__mptr指针ptr为指向该成员变量的指针(即指向ptr所指向的变量处)<br/>
（3） (char </em>)__mptr - offsetof(type,member)) 用该成员变量的实际地址减去该变量在结构体中的偏移，来求出结构体起始地址。<br/>
（4） ({ })这个扩展返回程序块中最后一个表达式的值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 即时修改 启动级别 启动参数 磁盘满无法进系统 忘记密码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/14/kernel-init-edit-args/"/>
    <updated>2014-08-14T17:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/14/kernel-init-edit-args</id>
    <content type="html"><![CDATA[<h4>1、修改启动级别错误配置的方法</h4>

<p>如果你不小心把级别设成0或6，用下边的方法补救：<br/>
1. 启动系统后，在倒计时结束前按任意键，进入grub引导界面 <br/>
2. 在grub引导界面的输入‘e’，进入下一级，高亮第二行，再输入‘e’<br/>
3. 在最后输入 1[单用户模式] 按回车回到上一级（单用户模式启动不会去读取/etc/inittab）
4. 输入‘b’重启系统</p>

<p>也可以改其他启动参数
进行紧急引导最简单的方法是：<br/>
把 init=/bin/bash 或 init=/bin/sh 选项传递给内核</p>

<h5>2、磁盘满导致无法进入系统</h5>

<p>删除一些文件后重启<br/>
没法删除 说文件系统是只读的 ，重新mount 你的磁盘系统为可读写的。<br/>
<code>
mount -o remount,rw  /
</code></p>

<h5>3、忘记密码</h5>

<p>passwd user</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log_buf(ring buffer)(syslog)(printk)]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/08/kernel-syslog/"/>
    <updated>2014-08-08T09:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/08/kernel-syslog</id>
    <content type="html"><![CDATA[<h5>printk 的输出都是保存在log_buf里的</h5>

<p>How to read it the ring buffer? Here is a beautiful illustration from IBM Developerworks
dmesg would be your first resort! How does dmesg accomplish its task? By a call to syslog()! How does syslog do its job? Through the system call interface which in turn call do_syslog(). do_syslog() does the finishing act like this</p>

<p><img src="/images/kernel/2014-08-08.gif" alt="alt" /></p>

<p>// 模仿kernel/printk.c中do_syslog，在module 中读printk输出的最后4k
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    char &lt;em&gt;&lt;em&gt;log_buf;
</span><span class='line'>    int &lt;/em&gt;log_buf_len, &lt;/em&gt;log_start, *log_end;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    int MASK;
</span><span class='line'>int end, len;
</span><span class='line'>unsigned i, j, limit, count;
</span><span class='line'>char c;
</span><span class='line'>int ret;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>log_buf = (char**) 0xffffffff803270e0;
</span><span class='line'>log_buf_len = (int*)0xffffffff803270d8;
</span><span class='line'>log_start = (int*) 0xffffffff804eabd0;
</span><span class='line'>log_end = (int*) 0xffffffff804eabe0;
</span><span class='line'>
</span><span class='line'>i = 0;
</span><span class='line'>end = *log_end;
</span><span class='line'>len = *log_buf_len;
</span><span class='line'>MASK = len - 1;
</span><span class='line'>
</span><span class='line'>count = L;
</span><span class='line'>if (count &gt; len) count = len;
</span><span class='line'>limit = end;
</span><span class='line'>
</span><span class='line'>for (i=0;i&lt;count;i++) {
</span><span class='line'>        j = limit-1-i;
</span><span class='line'>        c = *(*log_buf + (j&amp;MASK));
</span><span class='line'>        if (c == '\0') c = '\n';
</span><span class='line'>        buf[count-1-i] = c;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// 输出&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    file = filp_open(file_path, O_RDWR|O_CREAT|O_APPEND, 0777);
</span><span class='line'>if(IS_ERR(file)) {
</span><span class='line'>        printk("Open file %s failed..\n", file_path);
</span><span class='line'>        return 0;
</span><span class='line'>}
</span><span class='line'>old_fs = get_fs();
</span><span class='line'>set_fs(get_ds());
</span><span class='line'>ret = file-&gt;f_op-&gt;write(file, buf, i, &amp;file-&gt;f_pos);
</span><span class='line'>file-&gt;f_op-&gt;fsync(file, file-&gt;f_dentry, 0);
</span><span class='line'>set_fs(old_fs);
</span><span class='line'>filp_close(file, NULL);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[利用kexec快速切换内核]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/04/23/kernel-kexec-setup/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-04-23T15:35:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/04/23/kernel-kexec-setup&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;kexec是一个用于在当前系统下快速切换到另一个内核的一种办法，它采用了一定的机制略过了硬件的初始化，所以切换速度会很快。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;自2.6.13以后，Linux内核就已经自置了kexec，而Debian采用的内核已经是2.6.26，而且默认就支持kexec，所以在Debian下我们只要安装kexec-tools就行了。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$ yum install kexec-tools
</span><span class='line'>$ sudo apt-get install kexec-tools
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;安装好以后，就可以开始加载其他的内核了。&lt;br/&gt;
</span><span class='line'>先看看我有哪些内核可以用：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ ls /boot/vmlinuz-2.6.26-1-*
</span><span class='line'>/boot/vmlinuz-2.6.26-1-amd64         
</span><span class='line'>/boot/vmlinuz-2.6.26-1-vserver-amd64
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>好多好多，再看看当前的内核
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ uname -r
</span><span class='line'>2.6.26-1-vserver-amd64
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>好了，现在我打算切换到2.6.26-1-amd64去：&lt;br/&gt;
</span><span class='line'>记得，需要root权限的
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ sudo -s
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>先要用kexec加载它，先看看该追加哪些参数
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ cat /boot/grub/menu.lst | grep 2.6.26-1-amd64
</span><span class='line'>title Debian GNU/Linux, kernel 2.6.26-1-amd64
</span><span class='line'>kernel /vmlinuz-2.6.26-1-amd64 root=/dev/sda1 ro
</span><span class='line'>initrd /initrd.img-2.6.26-1-amd64
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>找到了，对照上面开始用kexec加载了
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ kexec -l /boot/vmlinuz-2.6.26-1-amd64 --initrd /boot/initrd.img-2.6.26-1-amd64 --append="root=/dev/sda1 ro"
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>加载以后并不直接执行哦，所以我们要执行一下才会切换
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ kexec -e
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>不要紧张，等一下下就好了，起来以后还会提示登录的&lt;br/&gt;
</span><span class='line'>看看我的效果：&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ uname -r
</span><span class='line'>2.6.26-1-amd64
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>切换到我想要的内核了&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[内核编译模块]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2013/06/06/kernel-mod-compiler/"/&gt;
</span><span class='line'>&lt;updated&gt;2013-06-06T14:28:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2013/06/06/kernel-mod-compiler&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;    /*filename: test.c*/
</span><span class='line'>#include &lt;linux/init.h&gt;
</span><span class='line'>#include &lt;linux/kernel.h&gt;
</span><span class='line'>#include &lt;linux/module.h&gt;
</span><span class='line'>
</span><span class='line'>staticintdummy_init(void)
</span><span class='line'>{
</span><span class='line'>    printk("hello,world.\n");
</span><span class='line'>    return0;
</span><span class='line'>}
</span><span class='line'>staticvoiddummy_exit(void)
</span><span class='line'>{
</span><span class='line'>    return;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>module_init(dummy_init);
</span><span class='line'>module_exit(dummy_exit);
</span><span class='line'>
</span><span class='line'>MODULE_LICENSE("GPL")
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行如下命令：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ gcc -c -O2 -DMODULE -D__KERNEL__ -I/usr/src/linux test.c
</span><span class='line'>$ insmod test.o
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>No module found in object&lt;br/&gt;
</span><span class='line'>insmod: error inserting &lsquo;test.o&rsquo;: -1 Invalid module format&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;正确的做法是写一个Makefile,由内核的Kbuild来帮你编译。&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ cat Makefile
</span><span class='line'>obj-m :=test.o
</span><span class='line'>KDIR :=/lib/modules/$(shell uname -r)/build
</span><span class='line'>PWD :=$(shell pwd)
</span><span class='line'>default:
</span><span class='line'>    $(MAKE)-C $(KDIR)SUBDIRS=$(PWD)modules
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>执行如下命令：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$make
</span><span class='line'>make -C /lib/modules/2.6.5-1.358/build SUBDIRS=/test modules
</span><span class='line'>make[1]:Entering directory `/lib/modules/2.6.5-1.358/build'
</span><span class='line'>  CC [M]  /test/modinject/test.o
</span><span class='line'>  Building modules, stage 2.
</span><span class='line'>  MODPOST
</span><span class='line'>  CC      /test/modinject/test.mod.o
</span><span class='line'>  LD [M]  /test/modinject/test.ko
</span><span class='line'>make[1]: Leaving directory `/lib/modules/2.6.5-1.358/build'
</span><span class='line'>$ls -l
</span><span class='line'>-rw-r--r--1 root root   268 Jan  7 08:31 test.c
</span><span class='line'>-rw-r--r--1 root root  2483 Jan  8 09:19 test.ko
</span><span class='line'>-rw-r--r--1 root root   691 Jan  8 09:19 test.mod.c
</span><span class='line'>-rw-r--r--1 root root  1964 Jan  8 09:19 test.mod.o
</span><span class='line'>-rw-r--r--1 root root  1064 Jan  8 09:19 test.o
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>其实上边的test.o就是用gcc生成的test.o,而test.ko是使用下列命令来生成的。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ld -m elf_i386  -r -o test.ko test.o  test.mod.o
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;再来看看test.mod.c，它是由/usr/src/linux/scripts/modpost.c来生成的。</span></code></pre></td></tr></table></div></figure>
    $ cat test.mod.c
    #include &lt;linux/module.h>
    #include &lt;linux/vermagic.h>
    #include &lt;linux/compiler.h></p>

<pre><code>MODULE_INFO(vermagic,VERMAGIC_STRING);
#undef unix

struct module __this_module
__attribute__((section(".gnu.linkonce.this_module")))={
.name =__stringify(KBUILD_MODNAME),
.init =init_module,
#ifdef CONFIG_MODULE_UNLOAD

.exit=cleanup_module,
#endif

};
static const struct modversion_info ____versions[]
__attribute_used__
__attribute__((section("__versions")))={
    {0,"cleanup_module"},
    {0,"init_module"},
    {0,"struct_module"},
    {0,"printk"},
};
static const char __module_depends[]
__attribute_used__
__attribute__((section(".modinfo")))=
"depends=";
</code></pre>

<p>&#8220;`
可见，test.mod.o只是产生了几个ELF的节，分别是modinfo,  .gun.linkonce.this_module(用于重定位，引进了rel.gnu.linkonce.this_module),  __versions。而test.ko是test.o和test.mod.o合并的结果。</p>
]]></content>
  </entry>
  
</feed>
