<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2014~09 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/categories/2014~09/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-21T16:02:27+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通用寄存器编码表]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/09/25/debug-regs-to-num/"/>
    <updated>2014-09-25T18:14:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/09/25/debug-regs-to-num</id>
    <content type="html"><![CDATA[<ul>
<li>来源：systemtap-2.4/runtime/loc2c-runtime.h

<h4>x86_64</h4>

<pre><code>  #define pt_dwarf_register_0(regs)       regs-&gt;rax
  #define pt_dwarf_register_1(regs)       regs-&gt;rdx
  #define pt_dwarf_register_2(regs)       regs-&gt;rcx
  #define pt_dwarf_register_3(regs)       regs-&gt;rbx
  #define pt_dwarf_register_4(regs)       regs-&gt;rsi
  #define pt_dwarf_register_5(regs)       regs-&gt;rdi
  #define pt_dwarf_register_6(regs)       regs-&gt;rbp
  #define pt_dwarf_register_7(regs)       regs-&gt;rsp
  #define pt_dwarf_register_8(regs)       regs-&gt;r8
  #define pt_dwarf_register_9(regs)       regs-&gt;r9
  #define pt_dwarf_register_10(regs)      regs-&gt;r10
  #define pt_dwarf_register_11(regs)      regs-&gt;r11
  #define pt_dwarf_register_12(regs)      regs-&gt;r12
  #define pt_dwarf_register_13(regs)      regs-&gt;r13
  #define pt_dwarf_register_14(regs)      regs-&gt;r14
  #define pt_dwarf_register_15(regs)      regs-&gt;r15
</code></pre></li>
</ul>


<h4>i386</h4>

<pre><code>    #define pt_dwarf_register_0(regs)       regs-&gt;eax
    #define pt_dwarf_register_1(regs)       regs-&gt;ecx
    #define pt_dwarf_register_2(regs)       regs-&gt;edx
    #define pt_dwarf_register_3(regs)       regs-&gt;ebx
    #define pt_dwarf_register_4(regs)       (user_mode(regs) ? regs-&gt;esp : (long)&amp;regs-&gt;esp)
    #define pt_dwarf_register_5(regs)       regs-&gt;ebp
    #define pt_dwarf_register_6(regs)       regs-&gt;esi
    #define pt_dwarf_register_7(regs)       regs-&gt;edi
</code></pre>

<ul>
<li><a href="http://www.mouseos.com/x64/extend64.html">http://www.mouseos.com/x64/extend64.html</a> 这里的是错的，改正后如下
<code>
寄存器编码    8    16    32    64
000    al    ax    eax    rax
001    dl    dx    edx    rdx
010    cl    cx    ecx    rcx
011    bl    bx    ebx    rbx
100    ?    si    esi    rsi
101    ?    di    edi    rdi
110    ?    bp    ebp    rbp
111    ?    sp    esp    rsp
1000    r8b    r8w    r8d    r8
1001    r9b    r9w    r9d    r9
1010    r10b    r10w    r10d    r10
1011    r11b    r11w    r11d    r11
1100    r12b    r12w    r12d    r12
1101    r13b    r13w    r13d    r13
1110    r14b    r14w    r14d    r14
1111    r15b    r15w    r15d    r15
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dd 命令]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/09/19/command-dd/"/>
    <updated>2014-09-19T15:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/09/19/command-dd</id>
    <content type="html"><![CDATA[<p>贴自<a href="http://www.chinaunix.net/old_jh/4/1025448.html">http://www.chinaunix.net/old_jh/4/1025448.html</a>
dd 是 Linux/UNIX 下的一个非常有用的命令，作用是用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。</p>

<h4>1. 命令简介</h4>

<p>dd 的主要选项：
<code>
指定数字的地方若以下列字符结尾乘以相应的数字:
b=512, c=1, k=1024, w=2, xm=number m
if=file
输入文件名，缺省为标准输入。
of=file
输出文件名，缺省为标准输出。
ibs=bytes
一次读入 bytes 个字节(即一个块大小为 bytes 个字节)。
obs=bytes
一次写 bytes 个字节(即一个块大小为 bytes 个字节)。
bs=bytes
同时设置读写块的大小为 bytes ，可代替 ibs 和 obs 。
cbs=bytes
一次转换 bytes 个字节，即转换缓冲区大小。
skip=blocks
从输入文件开头跳过 blocks 个块后再开始复制。
seek=blocks
从输出文件开头跳过 blocks 个块后再开始复制。(通常只有当输出文件是磁盘或磁带时才有效)。
count=blocks
仅拷贝 blocks 个块，块大小等于 ibs 指定的字节数。
conv=conversion[,conversion...]
用指定的参数转换文件。
转换参数:
ascii 转换 EBCDIC 为 ASCII。
ebcdic 转换 ASCII 为 EBCDIC。
ibm 转换 ASCII 为 alternate EBCDIC.
block 把每一行转换为长度为 cbs 的记录，不足部分用空格填充。
unblock 使每一行的长度都为 cbs ，不足部分用空格填充。
lcase 把大写字符转换为小写字符。
ucase 把小写字符转换为大写字符。
swab 交换输入的每对字节。
noerror 出错时不停止。
notrunc 不截短输出文件。
sync 把每个输入块填充到ibs个字节，不足部分用空(NUL)字符补齐。
</code></p>

<h4>2.实例分析</h4>

<h5>2.1.数据备份与恢复</h5>

<h6>2.1.1整盘数据备份与恢复</h6>

<p>备份：<br/>
dd if=/dev/hdx of=/dev/hdy<br/>
将本地的/dev/hdx整盘备份到/dev/hdy <br/>
dd if=/dev/hdx of=/path/to/image<br/>
将/dev/hdx全盘数据备份到指定路径的image文件<br/>
dd if=/dev/hdx | gzip >/path/to/image.gz<br/>
备份/dev/hdx全盘数据，并利用gzip工具进行压缩，保存到指定路径<br/>
恢复：<br/>
dd if=/path/to/image of=/dev/hdx<br/>
将备份文件恢复到指定盘<br/>
gzip -dc /path/to/image.gz | dd of=/dev/hdx<br/>
将压缩的备份文件恢复到指定盘</p>

<h6>2.1.2.利用netcat远程备份</h6>

<p>dd if=/dev/hda bs=16065b | netcat &lt; targethost-IP > 1234<br/>
在源主机上执行此命令备份/dev/hda<br/>
netcat -l -p 1234 | dd of=/dev/hdc bs=16065b<br/>
在目的主机上执行此命令来接收数据并写入/dev/hdc<br/>
netcat -l -p 1234 | bzip2 > partition.img<br/>
netcat -l -p 1234 | gzip > partition.img<br/>
以上两条指令是目的主机指令的变化分别采用bzip2  gzip对数据进行压缩，并将备份文件保存在当前目录。</p>

<h6>2.1.3.备份MBR</h6>

<p>备份：<br/>
dd if=/dev/hdx of=/path/to/image count=1 bs=512<br/>
备份磁盘开始的512Byte大小的MBR信息到指定文件<br/>
恢复：<br/>
dd if=/path/to/image of=/dev/hdx<br/>
将备份的MBR信息写到磁盘开始部分</p>

<h6>2.1.4.备份软盘</h6>

<p>dd if=/dev/fd0 of=disk.img count=1 bs=1440k<br/>
将软驱数据备份到当前目录的disk.img文件</p>

<h6>2.1.5.拷贝内存资料到硬盘</h6>

<p>dd if=/dev/mem of=/root/mem.bin bs=1024<br/>
将内存里的数据拷贝到root目录下的mem.bin文件</p>

<h6>2.1.6.从光盘拷贝iso镜像</h6>

<p>dd if=/dev/cdrom of=/root/cd.iso<br/>
拷贝光盘数据到root文件夹下，并保存为cd.iso文件</p>

<h5>2.2.增加Swap分区文件大小</h5>

<p>dd if=/dev/zero of=/swapfile bs=1024 count=262144<br/>
创建一个足够大的文件（此处为256M）<br/>
mkswap /swapfile<br/>
把这个文件变成swap文件<br/>
swapon /swapfile<br/>
启用这个swap文件<br/>
/swapfile swap swap defaults 0 0<br/>
在每次开机的时候自动加载swap文件, 需要在 /etc/fstab 文件中增加一行</p>

<h5>2.3销毁磁盘数据</h5>

<p>dd if=/dev/urandom of=/dev/hda1<br/>
利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。执行此操作以后，/dev/hda1将无法挂载，创建和拷贝操作无法执行。</p>

<h5>2.4磁盘管理</h5>

<h6>2.4.1.得到最恰当的block size</h6>

<pre><code>dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file
dd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file
dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file  
dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file
</code></pre>

<p>通过比较dd指令输出中所显示的命令执行时间，即可确定系统最佳的block size大小</p>

<h6>2.4.2测试硬盘读写速度</h6>

<pre><code>dd if=/root/1Gb.file bs=64k | dd of=/dev/null
dd if=/dev/zero of=/root/1Gb.file bs=1024 count=1000000
</code></pre>

<p>通过上两个命令输出的执行时间，可以计算出测试硬盘的读／写速度</p>

<h6>2.4.3.修复硬盘</h6>

<p>dd if=/dev/sda of=/dev/sda<br/>
当硬盘较长时间（比如1，2年）放置不使用后，磁盘上会产生magnetic flux point。当磁头读到这些区域时会遇到困难，并可能导致I/O 错误。当这种情况影响到硬盘的第一个扇区时，可能导致硬盘报废。上边的命令有可能使这些数据起死回生。且这个过程是安全，高效的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[offsetof宏 container_of宏]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/09/15/kernel-offset-container_of/"/>
    <updated>2014-09-15T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/09/15/kernel-offset-container_of</id>
    <content type="html"><![CDATA[<p>Linux内核中，用两个非常巧妙地宏实现了，一个是offsetof宏，另一个是container_of宏，下面讲解一下这两个宏。</p>

<h4>1.  offsetof宏</h4>

<h5>【定义】：</h5>

<pre><code>#define offsetof(TYPE, MEMBER) ((size_t) &amp; ((TYPE *)0)-&gt;MEMBER )
</code></pre>

<h5>【功能】： 获得一个结构体变量成员在此结构体中的偏移量。</h5>

<h5>【例子】：</h5>

<pre><code class="">    struct A 
        { 
        int x ; 
        int y; 
        int z; 
    }; 

    void main() 
    { 
        printf("the offset of z is %d",offsetof( struct A, z )  ); 
    } 
</code></pre>

<p>// 输出结果为 8</p>

<h5>【分析】：</h5>

<p>该宏，TYPE为结构体类型，MEMBER 为结构体内的变量名。<br/>
(TYPE <em>)0) 是欺骗编译器说有一个指向结构TYPE 的指针，其地址值0 <br/>
(TYPE </em>)0)->MEMBER 是要取得结构体TYPE中成员变量MEMBER的地址. 因为基址为0，所以，这时MEMBER的地址当然就是MEMBER在TYPE中的偏移了。</p>

<h4>2. container_of宏（即实现了题目中的功能）</h4>

<h5>【定义】：</h5>

<pre><code>#define container_of(ptr, type, member)   ({const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr); (type *)( (char *)__mptr - offsetof(type,member) );})
</code></pre>

<h5>【功能】：</h5>

<p>从结构体（type）某成员变量（member）指针（ptr）来求出该结构体（type）的首指针。</p>

<h5>【例子】：</h5>

<pre><code>    struct A 
    { 
        int x ; 
        int y; 
        int z; 
    }; 

    struct A myTest; 

    int *pz = &amp;myTest.z; 

    struct A* getHeaderPtr( int *pz ) 
    { 
        return container_of( pz , struct A, z ); 
    } 
</code></pre>

<h5>【分析】：</h5>

<p>（1） typeof( ( (type <em>)0)->member )为取出member成员的变量类型。<br/>
（2） 定义__mptr指针ptr为指向该成员变量的指针(即指向ptr所指向的变量处)<br/>
（3） (char </em>)__mptr - offsetof(type,member)) 用该成员变量的实际地址减去该变量在结构体中的偏移，来求出结构体起始地址。<br/>
（4） ({ })这个扩展返回程序块中最后一个表达式的值。</p>
]]></content>
  </entry>
  
</feed>
