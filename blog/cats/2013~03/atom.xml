<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2013~03 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2013~03/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-30T22:48:57+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu(>=12.04) N卡双显卡 切换]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/03/26/ubuntu-use-nvidia/"/>
    <updated>2013-03-26T22:21:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/03/26/ubuntu-use-nvidia</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_6dee445401013sss.html">http://blog.sina.com.cn/s/blog_6dee445401013sss.html</a><br/>
<a href="http://www.cnblogs.com/congbo/archive/2012/09/12/2682105.html">http://www.cnblogs.com/congbo/archive/2012/09/12/2682105.html</a><br/>
<a href="http://wenku.baidu.com/view/e69d3019650e52ea551898e0.html">http://wenku.baidu.com/view/e69d3019650e52ea551898e0.html</a></p>

<p>  NVIDIA的Optimus技术可让笔记本根据性能需要在英特尔集成显卡和NVIDIA独显之间自动切换，节省电力。
但这项技术不支持Linux。现在，NVIDIA工程师透露他们正致力于实现Linux支持。
NVIDIA的Aaron Plattner在邮件列表上说，他已经在新的Linux版驱动上概念验证了Optimus，未来Linux笔记本用户有望获得Optimus支持。</p>

<p>  当你美滋滋的装好了ubuntu之后，习惯性的用自带的驱动检测工具给装上显卡驱动，以为大功告成的时候，肯跌的事情来了，当你重启你会发现，黑 屏！！！！！！！！！！！木有错，你进不去X桌面了，这就是双显卡的悲剧，咋办捏？就这样放弃么，肿么可能，用linux就必修经得起折腾，于是上网狂找 资料，发现一个第三方的玩意貌似可以解决，叫Bumblebee(大黄蜂) ，Nvidia的双显卡切换叫Optimus（擎天柱），还有一个双显卡切换的软件ironhide（铁皮）。大黄蜂是唯一完美解决的</p>

<h4>第一步：安装我们的主角Bumblebee(大黄蜂)</h4>

<pre><code>sudo add-apt-repository ppa:bumblebee/stable
sudo apt-get update
sudo apt-get install bumblebee bumblebee-nvidia
// 12.04.2 安装时出现需要：nvidia-current  但依赖：XXX 的情况不要安装nvidia-current，
// 而是添加源：sudo add-apt-repository ppa:ubuntu-x-swat/x-updates，然后再执行 sudo apt-get install bumblebee bumblebee-nvidia
sudo reboot
</code></pre>

<p>ps: Bumblebee3 已经非常完善，把所有的东西都配置好了</p>

<h4>第二步：查看显卡工作状态</h4>

<pre><code>lspci |grep VGA
结果如下：
00:02.0 VGA compatible controller: Intel Corporation 2nd Generation Core Processor Family Integrated Graphics Controller (rev 09)
01:00.0 VGA compatible controller: NVIDIA Corporation GF108 [GeForce GT 540M] (rev ff)
</code></pre>

<p>独显的状态为rev ff 即为关闭状态，OK 大功告成！</p>

<hr />

<h4>下面非必需，也许要装拓展才能运行下面的命令</h4>

<p>打开N卡设置<br/>
optirun nvidia-settings -c :8</p>

<p>下边两个命令可以对比开独显跟不开独显的性能差距<br/>
glxgears            // 直接运行</p>

<p>optirun glxgears    //使用独显运行<br/>
Ps：optirun XXX 就是调用独显的关键了，这个就是指明用独立显卡打开指定的xxx程序</p>

<ul>
<li>可以自己先装高版本nvidia，再装bumblebee，这样似乎性能更好？</li>
</ul>


<hr />

<ol>
<li><p>bumblebee并不是单纯为了省电，是为了能初步使用双显卡所特有的optimus功能（说白了就是平时显示任务重的时候用独显渲染，普通显示用集显渲染），而鉴于nvidia官方驱动目前无法支持linux下双显卡模式，只能用bumblebee替代。（最新版本nvidia官方驱动初步支持双显卡模式，但是支持的很差，而且需要xrandr1.4+版本，强烈不建议使用）</p></li>
<li><p>Nvidia的双显卡电脑是无法禁用集显而单独工作的，因为就算使用独显渲染，也必须依靠集显来显示输出。（可以简单理解为独显是通过集显间接连接在主板上）。</p></li>
<li><p>默认安装的系统是不带nvidia独显驱动的，所以默认驱动并正常工作的是集成intel显卡，而不是独显。在这种情况下，独显通电，发热，但是完全不起作用。但是你再装上nvidia的独显，由于目前linux下官方驱动并不支持双显卡的工作模式，所以结果一定是黑屏。。。</p></li>
<li><p>基于以上三点，bumblebee腾空出世。它本身并不是驱动，你可以看做是一个显卡驱动管理程序。安装好bumblebee之后，再安装bumblebee-nvidia来安装上官方驱动（你也可以自己下载安装nvidia官方驱动，或者nouveau开源驱动，但是不推荐，新手很容易出问题），这时候，你电脑上就有了intel的集显驱动和nvidia独显的官方驱动。bumblebee依赖与bbswitch（不用管他，会自动装上），会在系统运行时候，默认关闭掉独显，只使用集显（减少耗电和发热）。它并不会像windows下nvidia官方驱动那样提供智能的optimus功能，根据系统运行程序显示负担来判断是否需要独显工作。所以，如果你明确某个程序需要nvidia独显来渲染图形的时候，需要在terminal中手动输入optirun xxx来启动该程序。比如，你想用独显来显示网页，或者flash，可以用optirun firefox 命令来启动firefox， 而普通的firefox命令只会使用集显显示。</p></li>
<li><p>如果你想用独显玩dota2, 那么你需要用optirun steam来启动steam客户端，然后再启动游戏，这样游戏就是通过独显来渲染的。你也可以用普通的steam命令来启动steam，然后在dota2游戏的属性中，加入启动方式optirun %command。 这样只有在启动游戏之后独显才会工作。</p></li>
<li><p>如果安装完成bumblebee或者nvidia驱动之后，系统启动出现黑屏，解决方法很简单，ctl+alt+ 1或2或。。。。6,都可以，进入模拟终端，输入用户名和密码，删除掉/etc/X11/xorg.conf文件，再重启一定能启动图形界面。</p></li>
</ol>


<hr />

<p><a href="https://wiki.archlinux.org/index.php/Bumblebee_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">今天下完了13.04，惯例安装显卡驱动，报错</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c/c++函数扩展名]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/03/26/lang-c-file-exname/"/>
    <updated>2013-03-26T17:03:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/03/26/lang-c-file-exname</id>
    <content type="html"><![CDATA[<ul>
<li>后缀为.c的，gcc把它当作是C程序，而g++当作是c++程序；</li>
<li>后缀为.cpp的，两者都会认为是c++程序
<code>
  int printf(char*, ...);
  int main()
  {
      printf("test\n");
      return 0;
  }
</code>

<h5>一、</h5>

<p>保存为.c 文件， 用gcc编译能通过，g++编译不能通过。<br/>
g++会判定是不是你自己声明的函数，如果是，它会按照一种规则去重命名该函数。c++为了支持重载才这么做，而c没有重载。</p></li>
</ul>


<h5>二、</h5>

<p>保存为.cpp文件，用gcc、g++都编译不能通过</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh利用RSA公钥远程登录验证]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/03/12/tools-ssh-rsa/"/>
    <updated>2013-03-12T11:54:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/03/12/tools-ssh-rsa</id>
    <content type="html"><![CDATA[<h5>1、本地机器生成密钥</h5>

<pre><code>$ssh-keygen -t rsa
</code></pre>

<p>生成基于ssh协议第二版密钥，如果还是用rsa1，该升级了。</p>

<h5>2、复制生成的id_rsa.pub公钥文件到远程服务器，简单的用：</h5>

<pre><code>$scp id_rsa.pub bsduser@192.168.1.188:mykey.pub
</code></pre>

<h5>3、密码登陆远程服务器：</h5>

<pre><code>$ssh 192.168.1.188 -l bsduser
</code></pre>

<p>这里注意不是cp，而是cat；不是">&ldquo;，而是&rdquo;>>&ldquo;的操作：
<code>
%cat mykey.pub &gt;&gt; $HOME/.ssh/authorized_keys
</code></p>

<h5>4、重启sshd</h5>

<pre><code>#/etc/rc.d/sshd restart
</code></pre>

<h5>5、此时进行登录测试：</h5>

<pre><code>$ssh bsduser@192.168.1.188
</code></pre>

<p>成功，则可以不用输入繁琐和易泄露的密码。但是条件是你要保护好自己的密钥文件信息。</p>

<ul>
<li>注意authorized_keys文件权限设置600</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言运算符优先级]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/03/01/lang-c-op-order/"/>
    <updated>2013-03-01T18:41:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/03/01/lang-c-op-order</id>
    <content type="html"><![CDATA[<p>一共有十五个优先级：
<code>
1   ()  []  .  -&gt;
2   !  ~  ++  --  -(负号)  &amp;(取变量地址)  *(指针取值)   (type)(强制类型转换)  sizeof
3   * / %
4   + -
5   &gt;&gt; &lt;&lt;  
6   &gt; &gt;= &lt; &lt;=
7   == !=   
8   &amp;  
9   ^   
10  |   
11  &amp;&amp;
12  ||
13  ?:
14   =  +=  -=  *=  /=   %=  |=   ^=   &amp;=   &gt;&gt;=   &lt;&lt;=
15  ,
就着多吧   结合性：2   13  14  是从右至左   其他都是  从左至右
</code></p>
]]></content>
  </entry>
  
</feed>
