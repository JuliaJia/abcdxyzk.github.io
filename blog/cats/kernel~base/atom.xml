<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-12-13T17:36:51+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[offsetof宏 container_of宏]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/09/15/kernel-offset-container_of/"/>
    <updated>2014-09-15T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/09/15/kernel-offset-container_of</id>
    <content type="html"><![CDATA[<p>Linux内核中，用两个非常巧妙地宏实现了，一个是offsetof宏，另一个是container_of宏，下面讲解一下这两个宏。</p>

<h4>1.  offsetof宏</h4>

<h5>【定义】：</h5>

<pre><code>#define offsetof(TYPE, MEMBER) ((size_t) &amp; ((TYPE *)0)-&gt;MEMBER )
</code></pre>

<h5>【功能】： 获得一个结构体变量成员在此结构体中的偏移量。</h5>

<h5>【例子】：</h5>

<pre><code class="">    struct A 
        { 
        int x ; 
        int y; 
        int z; 
    }; 

    void main() 
    { 
        printf("the offset of z is %d",offsetof( struct A, z )  ); 
    } 
</code></pre>

<p>// 输出结果为 8</p>

<h5>【分析】：</h5>

<p>该宏，TYPE为结构体类型，MEMBER 为结构体内的变量名。<br/>
(TYPE <em>)0) 是欺骗编译器说有一个指向结构TYPE 的指针，其地址值0 <br/>
(TYPE </em>)0)->MEMBER 是要取得结构体TYPE中成员变量MEMBER的地址. 因为基址为0，所以，这时MEMBER的地址当然就是MEMBER在TYPE中的偏移了。</p>

<h4>2. container_of宏（即实现了题目中的功能）</h4>

<h5>【定义】：</h5>

<pre><code>#define container_of(ptr, type, member)   ({const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr); (type *)( (char *)__mptr - offsetof(type,member) );})
</code></pre>

<h5>【功能】：</h5>

<p>从结构体（type）某成员变量（member）指针（ptr）来求出该结构体（type）的首指针。</p>

<h5>【例子】：</h5>

<pre><code>    struct A 
    { 
        int x ; 
        int y; 
        int z; 
    }; 

    struct A myTest; 

    int *pz = &amp;myTest.z; 

    struct A* getHeaderPtr( int *pz ) 
    { 
        return container_of( pz , struct A, z ); 
    } 
</code></pre>

<h5>【分析】：</h5>

<p>（1） typeof( ( (type <em>)0)->member )为取出member成员的变量类型。<br/>
（2） 定义__mptr指针ptr为指向该成员变量的指针(即指向ptr所指向的变量处)<br/>
（3） (char </em>)__mptr - offsetof(type,member)) 用该成员变量的实际地址减去该变量在结构体中的偏移，来求出结构体起始地址。<br/>
（4） ({ })这个扩展返回程序块中最后一个表达式的值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux内核模块签名]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/21/kernel-module-signed/"/>
    <updated>2014-08-21T18:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/21/kernel-module-signed</id>
    <content type="html"><![CDATA[<h4>linux内核模块签名 Documentation/module_signing.txt</h4>

<p>内核在模块模块加载时使用加密签名验证，校验签名是否与已编译的内核公钥匹配。目前只支持RSA X.509验证。<br/>
签名验证在通过CONFIG_MODULE_SIG使能。打开签名同时还会强制做模块ELF元数据检查，然后再做签名验证。</p>

<h4>公钥生成</h4>

<p>内核编译时可以指定一系列的公钥。x509.genkey文件用来生成X509密钥。如果没有该文件，系统会自动提供一个默认的配置。Makefile会根据x509.genkey规则在内核编译根目录生成默认配置，用户可以手动更改该文件。</p>

<p>由此在内核编译过程中分别生成私钥和公钥文件分别为./signing_key.priv和./signing_key.x509。</p>

<p>默认配置是使用/dev/random生成的。如果/dev/random没有足够数据，在后台运行以下命令可以生成更多的数据：rngd -r /dev/urandom。</p>

<h4>模块签名</h4>

<p>设置了CONFIG_MODULE_SIG_ALL，所有模块将会自动添加签名。如果没有设置，需要手动添加：<br/>
scripts/sign-file <hash algo> $(MODSECKEY) $(MODPUBKEY) modules.ko<br/>
哈希算法必须为sha1, sha224, sha256, sha384, sha512。对应的加密算法必须是使能的。CONFIG_MODULE_SIG_HASH设置sign-file使用的默认算法。</p>

<p><code>MODSECKEY=&lt;secret-key-ring-path&gt;</code><br/>
加密私钥文件，默认是./signing_key.priv</p>

<p><code>MODPUBKEY=&lt;public-key-ring-path&gt;</code><br/>
加密公钥文件，默认为./signing_key.x509</p>

<h6>签名模块裁减</h6>

<p>签名模块裁减就是去除签名部分，在重新签名之前需要先裁减之前的签名。在打包内核模块发布时，并没有自动裁减。</p>

<h6>加载签名模块</h6>

<p>模块是通过insmod来加载的，模块加载时通过检查模块的签名部分来验证。</p>

<h6>不合法签名和没有签名的模块</h6>

<p>如果设 置了CONFIG_MODULE_SIG_FORCE或者在内核启动命令行设置了module.sig_enforce，内核将只加载带有公钥的合法签名 模块。如果都没有设置则会加载没有签名的模块。如果内核有密钥，但模块没有提供合法的签名就会被拒绝加载。下表说明了各种情况：</p>

<pre><code>模块状态        许可模式    强制检查
未签名           通过      EKEYREJECTED
签名，没有公钥       ENOKEY      ENOKEY
签名，公钥     通过      通过
非法签名，公钥       EKEYREJECTED    EKEYREJECTED
签名，过期密钥       EKEYEXPIRED EKEYEXPIRED
破坏的签名     EBADMSG     EBADMSG
破坏的ELF        ENOEXEC     ENOEXEC
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 即时修改 启动级别 启动参数 磁盘满无法进系统 忘记密码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/14/kernel-init-edit-args/"/>
    <updated>2014-08-14T17:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/14/kernel-init-edit-args</id>
    <content type="html"><![CDATA[<h4>1、修改启动级别错误配置的方法</h4>

<p>如果你不小心把级别设成0或6，用下边的方法补救：<br/>
1. 启动系统后，在倒计时结束前按任意键，进入grub引导界面 <br/>
2. 在grub引导界面的输入‘e’，进入下一级，高亮第二行，再输入‘e’<br/>
3. 在最后输入 1[单用户模式] 按回车回到上一级（单用户模式启动不会去读取/etc/inittab）
4. 输入‘b’重启系统</p>

<p>也可以改其他启动参数
进行紧急引导最简单的方法是：<br/>
把 init=/bin/bash 或 init=/bin/sh 选项传递给内核</p>

<h5>2、磁盘满导致无法进入系统</h5>

<p>删除一些文件后重启<br/>
没法删除 说文件系统是只读的 ，重新mount 你的磁盘系统为可读写的。<br/>
<code>
mount -o remount,rw  /
</code></p>

<h5>3、忘记密码</h5>

<p>passwd user</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log_buf(ring buffer)(syslog)(printk)]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/08/kernel-syslog/"/>
    <updated>2014-08-08T09:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/08/kernel-syslog</id>
    <content type="html"><![CDATA[<h5>printk 的输出都是保存在log_buf里的</h5>

<p>How to read it the ring buffer? Here is a beautiful illustration from IBM Developerworks
dmesg would be your first resort! How does dmesg accomplish its task? By a call to syslog()! How does syslog do its job? Through the system call interface which in turn call do_syslog(). do_syslog() does the finishing act like this</p>

<p><img src="/images/kernel/2014-08-08.gif" alt="alt" /></p>

<p>// 模仿kernel/printk.c中do_syslog，在module 中读printk输出的最后4k
```
        char <em><em>log_buf;
        int </em>log_buf_len, </em>log_start, *log_end;</p>

<pre><code>    int MASK;
    int end, len;
    unsigned i, j, limit, count;
    char c;
    int ret;


    log_buf = (char**) 0xffffffff803270e0;
    log_buf_len = (int*)0xffffffff803270d8;
    log_start = (int*) 0xffffffff804eabd0;
    log_end = (int*) 0xffffffff804eabe0;

    i = 0;
    end = *log_end;
    len = *log_buf_len;
    MASK = len - 1;

    count = L;
    if (count &gt; len) count = len;
    limit = end;

    for (i=0;i&lt;count;i++) {
            j = limit-1-i;
            c = *(*log_buf + (j&amp;MASK));
            if (c == '\0') c = '\n';
            buf[count-1-i] = c;
    }
</code></pre>

<p>// 输出</p>

<pre><code>    file = filp_open(file_path, O_RDWR|O_CREAT|O_APPEND, 0777);
    if(IS_ERR(file)) {
            printk("Open file %s failed..\n", file_path);
            return 0;
    }
    old_fs = get_fs();
    set_fs(get_ds());
    ret = file-&gt;f_op-&gt;write(file, buf, i, &amp;file-&gt;f_pos);
    file-&gt;f_op-&gt;fsync(file, file-&gt;f_dentry, 0);
    set_fs(old_fs);
    filp_close(file, NULL);
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kmalloc 函数详解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/04/22/kernel-kmalloc/"/>
    <updated>2014-04-22T10:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/04/22/kernel-kmalloc</id>
    <content type="html"><![CDATA[<pre><code>    #include &lt;linux/slab.h&gt;
    void *kmalloc(size_t size, int flags);
</code></pre>

<p>给 kmalloc 的第一个参数是要分配的块的大小. 第 2 个参数, 分配标志, 非常有趣, 因为它以几个方式控制 kmalloc 的行为.</p>

<p>最一般使用的标志, GFP_KERNEL, 意思是这个分配((内部最终通过调用 <em>_get_free_pages 来进行, 它是 GFP</em> 前缀的来源) 代表运行在内核空间的进程而进行的. 换句话说, 这意味着调用函数是代表一个进程在执行一个系统调用. 使用 GFP_KENRL 意味着 kmalloc 能够使当前进程在少内存的情况下睡眠来等待一页.</p>

<p><span style="color"red">一个使用 GFP_KERNEL 来分配内存的函数必须, 因此, 是可重入的并且不能在原子上下文中运行. 当当前进程睡眠, 内核采取正确的动作来定位一些空闲内存, 或者通过刷新缓存到磁盘或者交换出去一个用户进程的内存.</span></p>

<p>GFP_KERNEL 不一直是使用的正确分配标志; 有时 kmalloc 从一个进程的上下文的外部调用. 例如, 这类的调用可能发生在中断处理, tasklet, 和内核定时器中. 在这个情况下, 当前进程不应当被置为睡眠, 并且驱动应当使用一个 GFP_ATOMIC 标志来代替. 内核正常地试图保持一些空闲页以便来满足原子的分配. 当使用 GFP_ATOMIC 时, kmalloc 能够使用甚至最后一个空闲页. 如果这最后一个空闲页不存在, 但是, 分配失败.</p>

<p>其他用来代替或者增添 GFP_KERNEL 和 GFP_ATOMIC 的标志, 尽管它们 2 个涵盖大部分设备驱动的需要. 所有的标志定义在 &lt;linux/gfp.h>, 并且每个标志用一个双下划线做前缀, 例如 __GFP_DMA. 另外, 有符号代表常常使用的标志组合; 这些缺乏前缀并且有时被称为分配优先级. 后者包括:
<code>
    GFP_ATOMIC  用来从中断处理和进程上下文之外的其他代码中分配内存. 从不睡眠.  
    GFP_KERNEL  内核内存的正常分配. 可能睡眠.  
    GFP_USER    用来为用户空间页来分配内存; 它可能睡眠.  
    GFP_HIGHUSER    如同 GFP_USER, 但是从高端内存分配, 如果有. 高端内存在下一个子节描述.  
    GFP_NOIO  
    GFP_NOFS  
    这个标志功能如同 GFP_KERNEL, 但是它们增加限制到内核能做的来满足请求. 一个 GFP_NOFS 分配不允许进行任何文件系统调用, 而 GFP_NOIO 根本不允许任何 I/O 初始化. 它们主要地用在文件系统和虚拟内存代码, 那里允许一个分配睡眠, 但是递归的文件系统调用会是一个坏注意.
</code></p>

<h5>上面列出的这些分配标志可以是下列标志的相或来作为参数, 这些标志改变这些分配如何进行:</h5>

<pre><code>    __GFP_DMA   这个标志要求分配在能够 DMA 的内存区. 确切的含义是平台依赖的并且在下面章节来解释.  
    __GFP_HIGHMEM   这个标志指示分配的内存可以位于高端内存.  
    __GFP_COLD  正常地, 内存分配器尽力返回"缓冲热"的页 -- 可能在处理器缓冲中找到的页. 相反, 这个标志请求一个"冷"页, 它在一段时间没被使用. 它对分配页作 DMA 读是有用的, 此时在处理器缓冲中出现是无用的.  
    __GFP_NOWARN    这个很少用到的标志阻止内核来发出警告(使用 printk ), 当一个分配无法满足.  
    __GFP_HIGH  这个标志标识了一个高优先级请求, 它被允许来消耗甚至被内核保留给紧急状况的最后的内存页.  
    __GFP_REPEAT  
    __GFP_NOFAIL  
    __GFP_NORETRY  
    这些标志修改分配器如何动作, 当它有困难满足一个分配. __GFP_REPEAT 意思是" 更尽力些尝试" 通过重复尝试 -- 但是分配可能仍然失败. __GFP_NOFAIL 标志告诉分配器不要失败; 它尽最大努力来满足要求. 使用 __GFP_NOFAIL 是强烈不推荐的; 可能从不会有有效的理由在一个设备驱动中使用它. 最后, __GFP_NORETRY 告知分配器立即放弃如果得不到请求的内存.
</code></pre>

<p>kmalloc 能够分配的内存块的大小有一个上限. 这个限制随着体系和内核配置选项而变化. 如果你的代码是要完全可移植, 它不能指望可以分配任何大于 128 KB. 如果你需要多于几个 KB</p>

<p>这方面的原因：<br/>
kmalloc并不直接从分页机制中获得空闲页面而是从slab页面分配器那儿获得需要的页面，slab的实现代码限制了最大分配的大小为128k，即 131072bytes,理论上你可以通过更改slab.c中的 cache_sizes数组中的最大值使得kmalloc可以获得更大的页面数，不知道有没有甚么副效应或者没有必要这样做，因为获取较大内存的方法有很 多，想必128k是经验总结后的合适值。</p>

<p>alloc_page( )可以分配的最大连续页面是4K
<code>
    static inline struct page * alloc_pages(unsigned int gfp_mask, unsigned int order)
    {
        /*
         * Gets optimized away by the compiler.
         */
        if (order &gt;= MAX_ORDER)
        return NULL;
        return _alloc_pages(gfp_mask, order);
    }
</code>
alloc_pages最大分配页面数为512个，则可用内存数最大为2<sup>9</sup>*4K=2M</p>
]]></content>
  </entry>
  
</feed>
