<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-01-30T16:34:45+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[内核模块编译怎样绕过insmod时的版本检查]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/kernel-vermagic/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/kernel-vermagic</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_53931eca01015uky.html">http://blog.sina.com.cn/s/blog_53931eca01015uky.html</a></p>

<p>在開發kernel driver時，總是會遇到討人厭的vermagic檢查，只要目前在run的kernel版本跟driver編譯時用的kernel版本不一致，就沒辦法insmod。
<code>
    bash-3.2# insmod sdio.ko
    sdio: version magic '2.6.28-271-gec75a15 preempt mod_unload modversions ARMv7 '
    should be '2.6.28 preempt mod_unload ARMv7 '
    insmod: init_module 'sdio.ko' failed (Exec format error)
</code>
這大大降低了開發速度，尤其是當你拿不到客戶在用的kernel時，又要開發driver給他用，真的是很麻煩……</p>

<p>那麼要怎麼利用噁心的方式繞過去呢???</p>

<h5>一、先把 Moudle version 檢查關掉。</h5>

<pre><code>user@host # ARCH=arm make menuconfig
    --- Enable loadable module support                                             │ │
    │ │         [ ]   Forced module loading                                      │ │
    │ │         [*]   Module unloading                                           │ │
    │ │         [*]     Forced module unloading                                  │ │
    │ │         [ ]   Module versioning support                                  │ │
    │ │         [ ]   Source checksum for all modules
</code></pre>

<h5>二、 使用modinfo時，可以看到目前這driver的vermagic</h5>

<pre><code>    filename: external_drivers/omap3530/Linux/sdio/sdio.ko
    author: Texas Instruments Inc
    alias: TIWLAN_SDIO
    license: GPL
    description: TI WLAN SDIO driver
    depends:
    vermagic: 2.6.28-271-gec75a15 preempt mod_unload ARMv7
    parm: g_sdio_debug_level:debug level (int)
</code></pre>

<h5>三、 修改 kernel 的 vermagic，再重新編譯driver</h5>

<p>vermagic 的第一個值 2.6.28-noneed 是由這 include/linux/utsrelease.h裡的 UTS_RELEASE 所定義。
<code>
    #define UTS_RELEASE "2.6.28-271-gec75a15"
</code>
之後再由 include/linux/vermagic.h 裡的 macro<br/>
去組合出 VERMAGIC_STRING ， 也就是 kernel 的vermagic。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;generated/utsrelease.h&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#ifdef CONFIG_SMP
</span><span class='line'>#define MODULE_VERMAGIC_SMP "SMP "
</span><span class='line'>#else
</span><span class='line'>#define MODULE_VERMAGIC_SMP ""
</span><span class='line'>#endif
</span><span class='line'>#ifdef CONFIG_PREEMPT
</span><span class='line'>#define MODULE_VERMAGIC_PREEMPT "preempt "
</span><span class='line'>#else
</span><span class='line'>#define MODULE_VERMAGIC_PREEMPT ""
</span><span class='line'>#endif完成編譯後，你就可以得
</span><span class='line'>#ifdef CONFIG_MODULE_UNLOAD
</span><span class='line'>#define MODULE_VERMAGIC_MODULE_UNLOAD "mod_unload "
</span><span class='line'>#else
</span><span class='line'>#define MODULE_VERMAGIC_MODULE_UNLOAD ""
</span><span class='line'>#endif
</span><span class='line'>#ifndef CONFIG_MODVERSIONS
</span><span class='line'>#define MODULE_VERMAGIC_MODVERSIONS "modversions "
</span><span class='line'>#else
</span><span class='line'>#define MODULE_VERMAGIC_MODVERSIONS ""
</span><span class='line'>#endif
</span><span class='line'>#ifndef MODULE_ARCH_VERMAGIC
</span><span class='line'>#define MODULE_ARCH_VERMAGIC ""
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>#define VERMAGIC_STRING \
</span><span class='line'>UTS_RELEASE " " \
</span><span class='line'>MODULE_VERMAGIC_SMP MODULE_VERMAGIC_PREEMPT \
</span><span class='line'>MODULE_VERMAGIC_MODULE_UNLOAD MODULE_VERMAGIC_MODVERSIONS \
</span><span class='line'>MODULE_ARCH_VERMAGIC
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;所以， 我們只要把 UTS_RELEASE 改成我們的數字即可，當然若是懶得去try組合後的字串，也可以直接將VERMAGIC_STRING改成你要的字串
</span><span class='line'>
</span><span class='line'>建議修改完 vermagic.h, utsrelease.h後，還是把kernel重編完再編kernel，比較保險。
</span><span class='line'>
</span><span class='line'>以下是修改後，用modinfo看的結果
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;filename: external_drivers/omap3530/Linux/sdio/sdio.ko
</span><span class='line'>author: Texas Instruments Inc
</span><span class='line'>alias: TIWLAN_SDIO
</span><span class='line'>license: GPL
</span><span class='line'>description: TI WLAN SDIO driver
</span><span class='line'>depends:
</span><span class='line'>vermagic: 2.6.28 preempt mod_unload ARMv7
</span><span class='line'>parm: g_sdio_debug_level:debug level (int)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>-------------
</span><span class='line'>-------------
</span><span class='line'>
</span><span class='line'>另外若你是用git 做版本控制 , 那就會出現git的版本號在kernel 編號上  
</span><span class='line'>所以要把他關掉
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;General setup  ---&gt;
</span><span class='line'> [ ] Automatically append version information to the version strin
</span><span class='line'>
</span><span class='line'>解釋;
</span><span class='line'>CONFIG_LOCALVERSION_AUTO:                                                   │ 
</span><span class='line'>  │                                                                         │ 
</span><span class='line'>  │ This will try to automatically determine if the current tree is a       │ 
</span><span class='line'>  │ release tree by looking for git tags that belong to the current         │ 
</span><span class='line'>  │ top of tree revision.                                                   │ 
</span><span class='line'>  │                                                                         │ 
</span><span class='line'>  │ A string of the format -gxxxxxxxx will be added to the localversion     │ 
</span><span class='line'>  │ if a git-based tree is found.  The string generated by this will be     │ 
</span><span class='line'>  │ appended after any matching localversion* files, and after the value    │ 
</span><span class='line'>  │ set in CONFIG_LOCALVERSION.                                             │ 
</span><span class='line'>  │                                                                         │ 
</span><span class='line'>  │ (The actual string used here is the first eight characters produced     │ 
</span><span class='line'>  │ by running the command:                                                 │ 
</span><span class='line'>  │                                                                         │ 
</span><span class='line'>  │ which is done within the script "scripts/setlocalversion".)             │ 
</span><span class='line'>  │                                                                         │ 
</span><span class='line'>  │ Symbol: LOCALVERSION_AUTO [=y]                                          │ 
</span><span class='line'>  │ Prompt: Automatically append version information to the version string  │ 
</span><span class='line'>  │   Defined at init/Kconfig:84                                            │ 
</span><span class='line'>  │   Location:                                                             │ 
</span><span class='line'>  │ ingT
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[offsetof宏 container_of宏]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/09/15/kernel-offset-container_of/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-09-15T15:57:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/09/15/kernel-offset-container_of&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;Linux内核中，用两个非常巧妙地宏实现了，一个是offsetof宏，另一个是container_of宏，下面讲解一下这两个宏。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;1.  offsetof宏&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;【定义】：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define offsetof(TYPE, MEMBER) ((size_t) &amp; ((TYPE *)0)-&gt;MEMBER )
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;【功能】： 获得一个结构体变量成员在此结构体中的偏移量。&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;【例子】：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class=""&gt;    struct A 
</span><span class='line'>    { 
</span><span class='line'>    int x ; 
</span><span class='line'>    int y; 
</span><span class='line'>    int z; 
</span><span class='line'>}; 
</span><span class='line'>
</span><span class='line'>void main() 
</span><span class='line'>{ 
</span><span class='line'>    printf("the offset of z is %d",offsetof( struct A, z )  ); 
</span><span class='line'>} 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// 输出结果为 8&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;【分析】：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该宏，TYPE为结构体类型，MEMBER 为结构体内的变量名。&lt;br/&gt;
</span><span class='line'>(TYPE &lt;em&gt;)0) 是欺骗编译器说有一个指向结构TYPE 的指针，其地址值0 &lt;br/&gt;
</span><span class='line'>(TYPE &lt;/em&gt;)0)-&gt;MEMBER 是要取得结构体TYPE中成员变量MEMBER的地址. 因为基址为0，所以，这时MEMBER的地址当然就是MEMBER在TYPE中的偏移了。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2. container_of宏（即实现了题目中的功能）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;【定义】：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define container_of(ptr, type, member)   ({const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr); (type *)( (char *)__mptr - offsetof(type,member) );})
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;【功能】：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从结构体（type）某成员变量（member）指针（ptr）来求出该结构体（type）的首指针。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;【例子】：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    struct A 
</span><span class='line'>{ 
</span><span class='line'>    int x ; 
</span><span class='line'>    int y; 
</span><span class='line'>    int z; 
</span><span class='line'>}; 
</span><span class='line'>
</span><span class='line'>struct A myTest; 
</span><span class='line'>
</span><span class='line'>int *pz = &amp;myTest.z; 
</span><span class='line'>
</span><span class='line'>struct A* getHeaderPtr( int *pz ) 
</span><span class='line'>{ 
</span><span class='line'>    return container_of( pz , struct A, z ); 
</span><span class='line'>} 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;【分析】：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;（1） typeof( ( (type &lt;em&gt;)0)-&gt;member )为取出member成员的变量类型。&lt;br/&gt;
</span><span class='line'>（2） 定义__mptr指针ptr为指向该成员变量的指针(即指向ptr所指向的变量处)&lt;br/&gt;
</span><span class='line'>（3） (char &lt;/em&gt;)__mptr - offsetof(type,member)) 用该成员变量的实际地址减去该变量在结构体中的偏移，来求出结构体起始地址。&lt;br/&gt;
</span><span class='line'>（4） ({ })这个扩展返回程序块中最后一个表达式的值。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[linux内核模块签名]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/08/21/kernel-module-signed/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-08-21T18:23:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/08/21/kernel-module-signed&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h4&gt;linux内核模块签名 Documentation/module_signing.txt&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核在模块模块加载时使用加密签名验证，校验签名是否与已编译的内核公钥匹配。目前只支持RSA X.509验证。&lt;br/&gt;
</span><span class='line'>签名验证在通过CONFIG_MODULE_SIG使能。打开签名同时还会强制做模块ELF元数据检查，然后再做签名验证。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;公钥生成&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核编译时可以指定一系列的公钥。x509.genkey文件用来生成X509密钥。如果没有该文件，系统会自动提供一个默认的配置。Makefile会根据x509.genkey规则在内核编译根目录生成默认配置，用户可以手动更改该文件。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;由此在内核编译过程中分别生成私钥和公钥文件分别为./signing_key.priv和./signing_key.x509。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;默认配置是使用/dev/random生成的。如果/dev/random没有足够数据，在后台运行以下命令可以生成更多的数据：rngd -r /dev/urandom。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;模块签名&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;设置了CONFIG_MODULE_SIG_ALL，所有模块将会自动添加签名。如果没有设置，需要手动添加：&lt;br/&gt;
</span><span class='line'>scripts/sign-file &lt;hash algo&gt; $(MODSECKEY) $(MODPUBKEY) modules.ko&lt;br/&gt;
</span><span class='line'>哈希算法必须为sha1, sha224, sha256, sha384, sha512。对应的加密算法必须是使能的。CONFIG_MODULE_SIG_HASH设置sign-file使用的默认算法。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;MODSECKEY=&lt;secret-key-ring-path&gt;&lt;/code&gt;&lt;br/&gt;
</span><span class='line'>加密私钥文件，默认是./signing_key.priv&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;MODPUBKEY=&lt;public-key-ring-path&gt;&lt;/code&gt;&lt;br/&gt;
</span><span class='line'>加密公钥文件，默认为./signing_key.x509&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;签名模块裁减&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;签名模块裁减就是去除签名部分，在重新签名之前需要先裁减之前的签名。在打包内核模块发布时，并没有自动裁减。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;加载签名模块&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;模块是通过insmod来加载的，模块加载时通过检查模块的签名部分来验证。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;不合法签名和没有签名的模块&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果设 置了CONFIG_MODULE_SIG_FORCE或者在内核启动命令行设置了module.sig_enforce，内核将只加载带有公钥的合法签名 模块。如果都没有设置则会加载没有签名的模块。如果内核有密钥，但模块没有提供合法的签名就会被拒绝加载。下表说明了各种情况：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;模块状态        许可模式    强制检查
</span><span class='line'>未签名           通过      EKEYREJECTED
</span><span class='line'>签名，没有公钥       ENOKEY      ENOKEY
</span><span class='line'>签名，公钥     通过      通过
</span><span class='line'>非法签名，公钥       EKEYREJECTED    EKEYREJECTED
</span><span class='line'>签名，过期密钥       EKEYEXPIRED EKEYEXPIRED
</span><span class='line'>破坏的签名     EBADMSG     EBADMSG
</span><span class='line'>破坏的ELF        ENOEXEC     ENOEXEC
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[Linux 即时修改 启动级别 启动参数 磁盘满无法进系统 忘记密码]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/08/14/kernel-init-edit-args/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-08-14T17:20:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/08/14/kernel-init-edit-args&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h4&gt;1、修改启动级别错误配置的方法&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果你不小心把级别设成0或6，用下边的方法补救：&lt;br/&gt;
</span><span class='line'>1. 启动系统后，在倒计时结束前按任意键，进入grub引导界面 &lt;br/&gt;
</span><span class='line'>2. 在grub引导界面的输入‘e’，进入下一级，高亮第二行，再输入‘e’&lt;br/&gt;
</span><span class='line'>3. 在最后输入 1[单用户模式] 按回车回到上一级（单用户模式启动不会去读取/etc/inittab）
</span><span class='line'>4. 输入‘b’重启系统&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;也可以改其他启动参数
</span><span class='line'>进行紧急引导最简单的方法是：&lt;br/&gt;
</span><span class='line'>把 init=/bin/bash 或 init=/bin/sh 选项传递给内核&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2、磁盘满导致无法进入系统&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;删除一些文件后重启&lt;br/&gt;
</span><span class='line'>没法删除 说文件系统是只读的 ，重新mount 你的磁盘系统为可读写的。&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>mount -o remount,rw  /
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;3、忘记密码&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;passwd user&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[log_buf(ring buffer)(syslog)(printk)]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/08/08/kernel-syslog/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-08-08T09:43:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/08/08/kernel-syslog&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h5&gt;printk 的输出都是保存在log_buf里的&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;How to read it the ring buffer? Here is a beautiful illustration from IBM Developerworks
</span><span class='line'>dmesg would be your first resort! How does dmesg accomplish its task? By a call to syslog()! How does syslog do its job? Through the system call interface which in turn call do_syslog(). do_syslog() does the finishing act like this&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2014-08-08.gif" alt="alt" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// 模仿kernel/printk.c中do_syslog，在module 中读printk输出的最后4k</span></code></pre></td></tr></table></div></figure>
        char <em><em>log_buf;
        int </em>log_buf_len, </em>log_start, *log_end;</p>

<pre><code>    int MASK;
    int end, len;
    unsigned i, j, limit, count;
    char c;
    int ret;


    log_buf = (char**) 0xffffffff803270e0;
    log_buf_len = (int*)0xffffffff803270d8;
    log_start = (int*) 0xffffffff804eabd0;
    log_end = (int*) 0xffffffff804eabe0;

    i = 0;
    end = *log_end;
    len = *log_buf_len;
    MASK = len - 1;

    count = L;
    if (count &gt; len) count = len;
    limit = end;

    for (i=0;i&lt;count;i++) {
            j = limit-1-i;
            c = *(*log_buf + (j&amp;MASK));
            if (c == '\0') c = '\n';
            buf[count-1-i] = c;
    }
</code></pre>

<p>// 输出</p>

<pre><code>    file = filp_open(file_path, O_RDWR|O_CREAT|O_APPEND, 0777);
    if(IS_ERR(file)) {
            printk("Open file %s failed..\n", file_path);
            return 0;
    }
    old_fs = get_fs();
    set_fs(get_ds());
    ret = file-&gt;f_op-&gt;write(file, buf, i, &amp;file-&gt;f_pos);
    file-&gt;f_op-&gt;fsync(file, file-&gt;f_dentry, 0);
    set_fs(old_fs);
    filp_close(file, NULL);
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
