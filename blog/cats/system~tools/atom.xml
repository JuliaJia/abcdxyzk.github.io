<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system~tools | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system~tools/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-26T18:42:02+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LD_PRELOAD环境变量]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/22/tools-LD_PRELOAD/"/>
    <updated>2013-10-22T16:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/22/tools-LD_PRELOAD</id>
    <content type="html"><![CDATA[<p>在Linux的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入恶意程序，从而达到那不可告人的罪恶的目的。</p>

<p>我们知道，Linux的用的都是glibc，有一个叫libc.so.6的文件，这是几乎所有Linux下命令的动态链接中，其中有标准C的各种函数。对于GCC而言，默认情况下，所编译的程序中对标准C函数的链接，都是通过动态链接方式来链接libc.so.6这个函数库的。</p>

<p>OK。还是让我用一个例子来看一下用LD_PRELOAD来hack别人的程序。</p>

<h5>示例一</h5>

<p>我们写下面一段例程：
<code>
    /* 文件名：verifypasswd.c */
    /* 这是一段判断用户口令的程序，其中使用到了标准C函数strcmp*/
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;
    int main(int argc, char **argv)
    {
        char passwd[] = "password";
        if (argc &lt; 2) {
            printf("usage: %s &lt;password&gt;/n", argv[0]);
            return 1;
        }
        if (!strcmp(passwd, argv[1])) {
            printf("Correct Password!/n");
            return 1;
        }
        printf("Invalid Password!/n");
        return 0;
    }
</code>
在上面这段程序中，我们使用了strcmp函数来判断两个字符串是否相等。下面，我们使用一个动态函数库来重载strcmp函数：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/&lt;em&gt; 文件名：hack.c &lt;/em&gt;/
</span><span class='line'>#include &lt;stdio.h&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#include &lt;string.h&gt;
</span><span class='line'>int strcmp(const char *s1, const char *s2)
</span><span class='line'>{
</span><span class='line'>printf("hack function invoked. s1=&lt;%s&gt; s2=&lt;%s&gt;/n", s1, s2);
</span><span class='line'>/* 永远返回0，表示两个字符串相等 */
</span><span class='line'>return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;编译程序：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ gcc -o verifypasswd verifypasswd.c
</span><span class='line'>$ gcc -shared -o hack.so hack.c
</span><span class='line'>&lt;code&gt;
</span><span class='line'>测试一下程序：（得到正确结果）
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>$ ./verifypasswd asdf
</span><span class='line'>Invalid Password!</span></code></pre></td></tr></table></div></figure></p>

<h5>设置LD_PRELOAD变量：</h5>

<p>（使我们重写过的strcmp函数的hack.so成为优先载入链接库）
<code>
$ export LD_PRELOAD="./hack.so"
</code>
再次运行程序：
<code>
$ ./verifypasswd  asdf
hack function invoked. s1=&lt;password&gt; s2=&lt;asdf&gt;
Correct Password!
</code>
我们可以看到，<br/>
1）我们的hack.so中的strcmp被调用了。<br/>
2）主程序中运行结果被影响了。<br/>
如果这是一个系统登录程序，那么这也就意味着我们用任意口令都可以进入系统了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thunderbird]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/15/tools-thunderbird/"/>
    <updated>2013-10-15T10:10:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/15/tools-thunderbird</id>
    <content type="html"><![CDATA[<h4>Mozilla Thunderbird 最小化附加组建</h4>

<p>在工具->附加组建中<br/>
1、搜索minimize，安装firetray<br/>
2、firetray 首选项->邮件->邮件通知类型   选第二个：显示新邮件图示<br/>
不想最小化到托盘： firetray 首选项->视窗   去掉第二个勾选</p>

<h4>Mozilla Thunderbird 导入导出邮件</h4>

<p>一种Mozilla Thunderbird的扩展ImportExportTools。<br/>
<a href="https://addons.mozilla.org/zh-CN/thunderbird/addon/importexporttools/">https://addons.mozilla.org/zh-CN/thunderbird/addon/importexporttools/</a></p>

<h5>安装流程 （本地安装）</h5>

<pre><code>1 进入Mozilla Thunderbird
2 点击菜单栏的“工具”-&gt;“附加软件”
3 从附加组件搜索框旁边的选项按钮中，选择“从文件安装附加组件...”选项
4 选择本地文件（ImportExportTools-X.X.xpi）位置 安装
5 安装完成 重启Mozilla Thunderbird
</code></pre>

<h5>如何用呢</h5>

<pre><code>1 进入Mozilla Thunderbird
2 右键“收件箱”
3 “导入/导出”
4 “汇出此资料夹所以的邮件” 进行选择格式
5 汇出完成 查看本地文件夹
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-svn]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/08/29/tools-git-svn-base/"/>
    <updated>2013-08-29T14:37:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/08/29/tools-git-svn-base</id>
    <content type="html"><![CDATA[<h4>常用</h4>

<pre><code>1、git-svn clone your_svn_repository
2、git add/commit
3、git-svn rebase  获取中心svn repository的更新；
4、git-svn dcommit 将本地git库的修改同步到中心svn库。
</code></pre>

<hr />

<p>git-svn默认包含在Git的安装包中，不过在Ubuntu中，git-svn是作为一个独立的Package需要额外安装的(sudo apt-get install git-svn)。安装后你就可以使用git svn xxx命令来操作中心SVN代码库了。当然如果你要使用与git svn等价的git-svn命令的话，你还需要将/usr/lib/git-core配置到你的PATH环境变量中，否则Shell会提示你无法找到 git-svn这个命令。</p>

<ul>
<li><p>检出一个已存在svn repository(类似于svn checkout)<br/>
我们可以通过git-svn clone命令完成这个操作： git-svn clone your_svn_repository_url</p></li>
<li><p>从中心服务器的svn repository获取最新更新<br/>
这个操作可以通过"git-svn rebase"完成。注意这里用的是rebase，而不是update。update命令对于通过git-svn检出的svn repostory的git版本库是不可用的。</p></li>
<li><p>查看提交历史日志<br/>
这个简单，使用"git-svn log"，加上-v选项，还可以提供每次commit操作涉及的相关文件的详细信息。</p></li>
<li><p>将本地代码同步到Svn服务器<br/>
完成这一操作需要通过"git-svn dcommit"命令。这个命令会将你在本地使用git commit提交到本地代码库的所有更改逐一提交到svn库中。加上-n选项，则该命令不会真正执行commit到svn的操作，而是会显示会有哪些本地 变动将被commit到svn服务器。git-svn dcommit似乎不能单独提交某个本地版本的修改，而是一次批量提交所有与svn中心版本库的差异。</p></li>
</ul>


<h5>下面是一个git-svn的一般使用流程：</h5>

<p>1、git-svn clone your_svn_repository；<br/>
2、修改本地代码，使用git add/commit将修改提交到本地git库；<br/>
3、定期使用git-svn rebase获取中心svn repository的更新；<br/>
4、使用git-svn dcommit命令将本地git库的修改同步到中心svn库。</p>

<h5>冲突</h5>

<p>使用git-svn处理代码冲突的步骤有些繁琐，不过瑕不掩瑜吧。这里用一个小例子来说明一下。</p>

<p>假设某svn中心库上的某个项目foo中只有一个源码文件foo.c：<br/>
* 我在使用git-svn clone检出版本时，foo.c当时只有一个commit版本信息："svn v1"；<br/>
* clone出来后，我在本地git库中修改foo.c，并通过git commit提交到本地git库中，版本为"git v1"；<br/>
* 不过与此同时另外一个同事也在修改foo.c这个文件，并已经将他的修改提交到了svn库中，版本为"svn v2"；<br/>
* 此时我使用git-svn dcommit尝试提交我的改动，git-svn提示我：<br/>
  Committing to svn://10.10.1.1:80/foo &hellip;<br/>
  M foo.c<br/>
  事务过时: 过期: ”foo/foo.c“在事务“260-1” at /usr/lib/git-core/git-svn line 570<br/>
* 使用git-svn rebase获取svn服务器上的最新foo.c，导致与foo.c冲突，不过此时svn版本信息已经添加到本地git库中(通过git log可以查看)，git-svn rebase提示你在解决foo.c的冲突后，运行git rebase &ndash;continue完成rebase操作；<br/>
* 打开foo.c，修改代码，解决冲突；<br/>
* 执行git rebase &ndash;continue，git提示我：<br/>
    You must edit all merge conflicts and then<br/>
    mark them as resolved using git add<br/>
* 执行git add foo.c，告知git已完成冲突解决；<br/>
* 再次执行git rebase &ndash;continue，提示"Applying: git v1"，此时"git v1"版本又一次成功加入本地版本库，你可通过git log查看；<br/>
* 执行git-svn dcommit将foo.c的改动同步到svn中心库，到此算是完成一次冲突解决。</p>

<ul>
<li>设置忽略文件<br/>
要忽略某些文件, 需要首先执行如下命令:<br/>
git config &ndash;global core.excludesfile ~/.gitignore<br/>
然后编辑 vi ~/.gitignore.<br/>
例如: 需要忽略vim的临时文件，就写:<br/>
.*.swp</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建FTP服务器]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/02/18/tools-vsftp/"/>
    <updated>2013-02-18T18:59:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/02/18/tools-vsftp</id>
    <content type="html"><![CDATA[<h4>用VSFTP搭建FTP服务器</h4>

<p>FTP服务器是平时应用最为广泛的服务之一。VSFTP是Very Secure FTP的缩写，意指非常安全的FTP服务。VSFTP功能强大，通过结合本地系统的用户认证模块及其多功能的配置项目，可以快速有效的搭建强大的多用户FTP服务。</p>

<h4>一、主要配置选项</h4>

<p>VSFTP的主配置文件是/etc/vsftpd.conf 。由于可配置的选项实在太多，无法一一详谈，只能截取比较常用的功能配置选项来加以说明。完整说明可参考man vsftpd.conf。 <br/>
这里需要注意的是，每个配置选项都是由“配置项目名称＝配置值“所定义。在每个配置变量后，要紧跟等号，再紧跟设置的变量值。中间不允许出现空格之类的分隔符，否则导致配置错误，无法生效！
另外，如果需要开通上传功能，则应注意用来登录FTP的本地系统用户对要操作的目录需要具备写权限，否则无法上传文件！</p>

<p>版本vsftpd: version 2.0.6 <br/>
启动VSFTPD：sudo /etc/init.d/vsftpd start <br/>
停止VSFTPD：sudo /etc/init.d/vsftpd stop <br/>
重启VSFTPD：sudo /etc/init.d/vsftpd restart <br/>
以下为常用的配置选项：
<code>
1、listen=YES
若设置为YES，开启监听网络。
2、anonymous_enable
若设置为YES，则允许匿名用户访问；若设置为NO则拒绝匿名用户访问。
如果开启的话，则可以通过用户名ftp或者anonymous来访问，密码随便。
3、local_enable
若设置为YES，则允许通过本地用户帐号访问；若设置为NO，则拒绝本地用户帐号访问。如果你拒绝了陌生人访问，那么这个必须设置为YES吧，否则谁能访问你的FTP呢？
4、write_enable
若设置为YES，则开启FTP全局的写权限；若设置为NO，则不开。
若为NO则所有FTP用户都无法写入，包括无法新建、修改、删除文件、目录等操作，也就是说用户都没办法上传文件！！
5、anon_upload_enable
若设置为YES，开启匿名用户的上传权限。前提是write_enable有开启，并且用户具有对当前目录的可写权限。 若设置为NO，则关闭匿名用户的上传权限。
6、anon_mkdir_write_enable
若设置为YES，开启匿名用户新建目录的权限。前提是write_enable有开启，并且用户具有对当前目录的可写权限。 若设置为NO，则关闭匿名用户新建目录的权限。
7、dirmessage_enable
若设置为YES，则可开启目录信息推送，也就是用户登录FTP后可以列出当前目录底下的文件、目录。 这个应该要开启吧！
8、xferlog_enable
若设置为YES，则开启登录、上传、下载等事件的日志功能。应开启！
9、xferlog_file=/var/log/vsftpd.log
指定默认的日志文件，可指定为其他文件。
10、xferlog_std_format
若设置为YES，则启用标准的ftpd日志格式。可以不启用。
11、connect_from_port_20
若设置为YES，则服务器的端口设为20。
如果不想用端口20，可以另外通过ftp_data_port来指定端口号。
12、chown_uploads
若设置为YES，则匿名用户上传文件后系统将自动修改文件的所有者。
若要开启，则chown_username=whoever也需指定具体的某个用户，用来作为匿名用户上传文件后的所有者。
13、idle_session_timeout=600
不活动用户的超时时间，超过这个时间则中断连接。
14、data_connection_timeout=120
数据连接超时时间 。
15、ftpd_banner=Welcome to blah FTP service.
FTP用户登入时显示的信息 。
16、local_root=/home/ftp
指定一个目录，用做在每个本地系统用户登录后的默认目录。
17、anon_root=/home/ftp
指定一个目录，用做匿名用户登录后的默认目录。
18、chroot_local_user、 chroot_list_enable、chroot_list_file
这个组合用于指示用户可否切换到默认目录以外的目录。
其中，chroot_list_file默认是/etc/vsftpd.chroot_list，该文件定义一个用户列表。
若chroot_local_user 设置为NO，chroot_list_enable设置为NO，则所有用户都是可以切换到默认目录以外的。
若chroot_local_user 设置为YES，chroot_list_enable设置为NO，则锁定FTP登录用户只能在其默认目录活动，不允许切换到默认目录以外。
若chroot_local_user 设置为YES，chroot_list_enable设置为YES，则chroot_list_file所指定的文件里面的用户列表都可以访问默认目录以外的目录，而列表以外的用户则被限定在各自的默认目录活动。
若chroot_local_user设置为NO，chroot_list_enable设置为YES，则chroot_list_file所指定的文件里面的用户列表都被限定在各自的默认目录活动，而列表以外的用户则可以访问默认目录以外的目录。
建议设置：chroot_local_user与chroot_list_enable都设置为YES。这样就只有chroot_list_file所指定的文件里面的用户列表可以访问默认目录以外的目录，而列表以外的用户则被限定在各自的默认目录活动！
好处：所有人都被限制在特定的目录里面。如果某些特定用户需要访问其他目录的权限，只需将其用户名写入chroot_list_file文件就可以赋予其访问其他目录的权限！
19、userlist_file、userlist_enable、userlist_deny
这个组合用于指示用户可否访问FTP服务。
其中，userlist_file默认是/etc/vsftpd.user_list，该文件定义一个用户列表。
若userlist_enable设置为YES，userlist_deny设置为NO，则只有userlist_file所指定的文件里面的用户列表里面的用户可以访问FTP。
若userlist_enable设置为YES，userlist_deny设置为YES，则userlist_file所指定的文件里面的用户列表里面的用户都被拒绝访问FTP。
若userlist_enable设置为NO，userlist_deny设置为YES，则这个列表没有实际用处，起不到限制的作用！因为所有用户都可访问FTP。
建议设置：userlist_enable与userlist_deny都设置为YES。这样则userlist_file所指定的文件里面的用户列表里面的用户都被拒绝访问FTP。
好处：只需将某用户帐号加入到userlist_file所指定文件里面的用户列表，就可以起到暂时冻结该用户的功能！
20、user_config_dir
指定一个目录用于存放针对每个用户各自的配置文件，比如用户kkk登录后，会以该用户名建立一个对应的配置文件。
比 如指定user_config_dir=/etc/vsftpd_user_conf,  则kkk登录后会产生一个/etc/vsftpd_user_conf/kkk的文件，这个文件保存的配置都是针对kkk这个用户的。可以修改这个文件而  不用担心影响到其他用户的配置。
</code></p>

<h4>二、一种VSFTP的配置方案</h4>

<h5>首先要安装VSFTP。</h5>

<p>源码编译或软件包安装都可以。
<code>sudo apt-get install vsptpd</code>
以下方案实现以下功能：<br/>
1、锁定用户在/home/ftp默认目录活动，<br/>
     并保留/etc/vsftpd.chroot_list文件里面的用户列表可访问其他目录。<br/>
2、具备暂时冻结FTP用户的功能，将需暂停的用户名加入到/etc/vsftpd.usr_list即可。</p>

<h5>设置配置文件：</h5>

<p>复制以下文件并保存为/etc/vsftpd.conf<br/>
新建两文件：touch /etc/vsftpd.chroot_list<br/>
          touch /etc/vsftpd.user_list<br/>
新建目录：mkdir /home/ftp<br/>
新建群组：addgroup ftp<br/>
修改/home/ftp属性：chown <a href="ftp:ftp">ftp:ftp</a> /home/ftp<br/>
新增FTP用户： adduser &ndash;shell /bin/false &ndash;home /home/ftp your_usr_name<br/>
把需要开通FTP的用户名加入到ftp群组：usermod -aG ftp your_usr_name<br/>
注意：<br/>
如果你的/etc/shells里面没有包含/bin/false，则你用上述的方法建立的用户将法访问#FTP，解决方法：编辑/etc/shells，加入/bin/false这行。</p>

<h4>三、前面提到的问题</h4>

<h5>1、如何添加FTP用户？</h5>

<p>设置local_enable为YES可以开放系统用户访问FTP。
在系统里面添加用户，将shell设置为/bin/false，并将其家目录若设置为/home/ftp或者其他目录。这样就可以建立只访问FTP而无法登录shell环境的用户。
注意：可以新建一个ftp组，把/home/ftp的所有者设为ftp，群组也设为ftp。然后所有新添加的FTP用户只需加入到FTP群组就可以具有对/home/ftp的访问权限了。这样也方便管理用户量比较大的FTP系统。如：<br/>
sudo addgroup ftp #如果有了就不用添加<br/>
sudo chown <a href="ftp:ftp">ftp:ftp</a> /home/ftp #如果改过了就不用再改<br/>
sudo adduser &ndash;shell /bin/false &ndash;home /home/ftp user1 #添加用户user1<br/>
sudo usermod  -aG ftp  user1  #把用户user1加入到ftp组<br/>
这样便可以通过用户名user1来访问FTP服务了。</p>

<h5>2、如何临时冻结某FTP用户？</h5>

<p>将 userlist_enable与userlist_deny都设置为YES。这样userlist_file所指定的文件里面的用户列表里面的用户都  被拒绝访问FTP。只需将某用户帐号加入到userlist_file所指定文件里面的用户列表，就可以起到暂时冻结该用户的功能！如需重新开通使用权  限，则只需从该文件中去掉相应的用户名。</p>

<h5>3、FTP用户登入后的默认目录？是否可以改变？</h5>

<p>可以通过local_root、anon_root来指定相应的默认目录。</p>

<h5>4、如何锁定FTP用户可访问的目录范围？</h5>

<p>将 chroot_local_user与chroot_list_enable都设置为YES。这样就只有chroot_list_file所指定的文件  里面的用户列表可以访问默认目录以外的目录，而列表以外的用户则被限定在各自的默认目录活动！如果某些特定用户需要访问其他目录的权限，只需将其用户名写  入chroot_list_file文件就可以赋予其访问其他目录的权限！</p>

<h5>5、FTP用户可以有哪些访问权限？可否上传文件？</h5>

<p>设置write_enable可以开启全局的写权限。这样FTP用户就可以在本地帐号管理系统允许的范围内进行写操作了</p>

<h5>6、root用户无法登录ftp？</h5>

<p>编辑/etc/ftpusers，将root注视掉就ok了</p>

<h4>四、可能遇到的主要问题</h4>

<h5>一、</h5>

<p>登录失败，解决方法：在/etc/shells中加入下面这句：/bin/false    就可以正常登录了</p>

<h5>二、</h5>

<p>上传文件时总是出现550 Permission denied错误，<br/>
查看vsftpd的配置文件sudo vim /etc/vsftpd.conf,<br/>
发现write_enable=YES这句配置项默认是被注释掉的即#write_enable=YES, <br/>
把前面的注释去掉，重启vsvfpd，一切正常了。</p>

<h5>三、</h5>

<p>user_config_dir 指定一个目录用于存放针对每个用户各自的配置文件。 <br/>
比 如指定user_config_dir=/etc/vsftpd_user_conf, 新建/etc/vsftpd_user_conf/kkk文件，输入下面内容：<br/>
write_enable=YES<br/>
anon_world_readable_only=NO<br/>
anon_upload_enable=YES<br/>
anon_mkdir_write_enable=YES<br/>
anon_other_write_enable=YES<br/>
local_root=/srv/ftp/ftp<br/>
这个文件保存的配置都是针对kkk这个用户的。可以修改这个文件而  不用担心影响到其他用户的配置。</p>

<h5>四、</h5>

<p>报下面的错误<br/>
<code>ftp:500 Illegal PORT command. 425</code><br/>
<code>ftp:Use PORT or PASV first</code><br/>
或者是下面的错误<br/>
<code>ftp:500 Illegal PORT command.</code><br/>
<code>ftp: bind: Address already in use</code><br/>
主要是由于Iptables防火墙不支持<br/>
ip_nat_ftp<br/>
ip_conntrack_ftp<br/>
在linux的ftp服务器上执行下列命令即可解决<br/>
modprobe ip_nat_ftp<br/>
modprobe ip_conntrack_ftp</p>

<h5>五、</h5>

<p>553 Could not create file<br/>
用 chown 或 chmod</p>

<h5>六、</h5>

<p>限定用户访问目录<br/>
local_root=/srv/ftp<br/>
chroot_local_user=YES<br/>
chroot_list_enable=NO</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[统计git提交行数的脚本]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/16/tools-git-count-lines/"/>
    <updated>2012-10-16T14:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/16/tools-git-count-lines</id>
    <content type="html"><![CDATA[<p>可以保存为count.sh运行 ./count.sh your_name
```
    #!/bin/sh
    insert=0
    delete=0
    git log&ndash;author=$1&ndash;shortstat&ndash;pretty=format:&ldquo;&rdquo;|sed/^$/d >.tmp.count</p>

<pre><code>whilereadline ;do
current=`echo$line|awk-F',''{printf $2}'|awk'{printf $1}'`
insert=`expr$insert+ $current`
current=`echo$line|awk-F',''{printf $3}'|awk'{printf $1}'`
delete=`expr$delete+ $current`
done&lt;.tmp.count

rm .tmp.count
echo$1$insertinsertions, $deletedeletions
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
