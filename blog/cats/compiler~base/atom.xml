<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: compiler~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/compiler~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-12-05T20:05:46+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[编译Android的kernel]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/04/compiler-android-kernel/"/>
    <updated>2014-12-04T17:34:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/04/compiler-android-kernel</id>
    <content type="html"><![CDATA[<h4>一 下载</h4>

<ol>
<li><p>下载arm编译器<br/>
<a href="https://launchpad.net/gcc-arm-embedded/+download">https://launchpad.net/gcc-arm-embedded/+download</a></p></li>
<li><p>进入到你的android源代码目录，敲入下面命令：<br/>
git clone <a href="http://android.googlesource.com/kernel/goldfish.git">http://android.googlesource.com/kernel/goldfish.git</a> kernel</p></li>
<li><p>cd kernel  进入我们刚才创建的kernel文件夹</p></li>
<li><p>git branch -avv 查看远程的git 库<br/>
我们选择remotes/origin/android-goldfish-2.6.29分支来下载</p></li>
<li><p>git checkout -b android-goldfish-2.6.29 remotes/origin/android-goldfish-2.6.29</p></li>
</ol>


<h4>二  编译kernel代码</h4>

<ol>
<li><p>设置环境变量<br/>
export PATH=$PATH:~/andr-perf/gcc-arm-none-eabi-4_8-2014q3/bin</p></li>
<li><p>修改kernel下面的makefile文件，修改<br/>
ARCH        ?= $(SUBARCH)<br/>
CROSS_COMPILE    ?=<br/>
这两个字段成如下内容：<br/>
ARCH        ?= arm<br/>
CROSS_COMPILE    ?= arm-none-eabi-</p></li>
<li><p>开始编译,敲入如下命令<br/>
make goldfish_defconfig<br/>
或者看arch/arm/configs/目录下有什么，就挑一个make XXX</p></li>
<li><p>正式编译,敲入如下命令<br/>
make</p></li>
</ol>


<p>正式编译成功之后，我们会看到如下文字：<br/>
OBJCOPY arch/arm/boot/zImage<br/>
Kernel: arch/arm/boot/zImage is ready</p>

<h4>三  利用新编译的kernel来启动模拟器</h4>

<ol>
<li><p>在启动模拟器之前，先设置模拟器的目录到环境变量$PATH中去：<br/>
  USER-NAME@MACHINE-NAME:~/Android$ export PATH=$PATH:~/android_prj/out/host/linux-x86/bin</p></li>
<li><p>设置ANDROID_PRODUCT_OUT环境变量：<br/>
USER-NAME@MACHINE-NAME:~/Android$ export ANDROID_PRODUCT_OUT=~/android_prj/out/target/product/generic<br/>
同样，如果你的源代码目录不是android_prj，请注意修改下。另外，如果你已经配置了环境变量。则不必如此。建议最好写到配置文件 ~/.bash_rc配置文件里面去。 免得每次都要配置</p></li>
<li><p>启动模拟器<br/>
cd ~/android_prj  回到源代码目录<br/>
sandy@ubuntu:~/android_prj$ emulator -kernel ./kernel/arch/arm/boot/zImage 利用刚才我们编译的kernel内核启动模拟器</p></li>
<li><p>验证结果<br/>
待模拟器启动完毕之后，我们敲入adb shell<br/>
第一次会说device offline，不管它，再敲入一遍，就会进入adb 调试<br/>
然后cd proc 进入proc目录，cat version</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[部分GCC选项]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/04/compiler-gcc-args/"/>
    <updated>2014-12-04T17:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/04/compiler-gcc-args</id>
    <content type="html"><![CDATA[<h5>-Werror 和 -I 很有用</h5>

<table>
<tr bgcolor="#c0c0c0">
<th>命令</th><th>描述</th>
</tr>
<tr>
<td>-l&nbsp;<em>library</em>-l<em>library</em></td>
<td>进行链接时搜索名为library的库。例子： $ gcc test.c -lm -o test</td>
</tr>
<tr>
<td>-I<em>dir</em></td>
<td>把<em>dir</em>加入到搜索头文件的路径列表中。例子： $ gcc test.c -I../inc -o test</td>
</tr>
<tr>
<td>-L<em>dir</em></td>
<td>把<em>dir</em>加入到搜索库文件的路径列表中。例子： $ gcc -I/home/foo -L/home/foo -ltest test.c -o test</td>
</tr>
<tr>
<td>-D<em>name</em></td>
<td>预定义一个名为<em>name</em>的宏，值为1。例子： $ gcc -DTEST_CONFIG test.c -o test</td>
</tr>
<tr>
<td>-D<em>name</em>=<em>definition</em></td>
<td>预定义名为<em>name</em>，值为<em>definition</em>的宏。</td>
</tr>
<tr>
<td>-ggdb&nbsp;-ggdb<em>level</em></td>
<td>为调试器 gdb 生成调试信息。<em>level</em>可以为1，2，3，默认值为2。</td>
</tr>
<tr>
<td>-g&nbsp;-g<em>level</em></td>
<td>生成操作系统本地格式的调试信息。-g 和 -ggdb 并不太相同， -g 会生成 gdb 之外的信息。<em>level</em>取值同上。</td>
</tr>
<tr>
<td>-s</td>
<td>去除可执行文件中的符号表和重定位信息。用于减小可执行文件的大小。</td>
</tr>
<tr>
<td>-M</td>
<td>告诉预处理器输出一个适合make的规则，用于描述各目标文件的依赖关系。对于每个 源文件，预处理器输出 一个make规则，该规则的目标项(target)是源文件对应的目标文件名，依赖项(dependency)是源文件中 #include引用的所有文件。生成的规则可 以是单行，但如果太长，就用`/'-换行符续成多行。规则 显示在标准输出，不产生预处理过的C程序。</td>
</tr>
<tr>
<td>-C</td>
<td>告诉预处理器不要丢弃注释。配合`-E'选项使用。</td>
</tr>
<tr>
<td>-P</td>
<td>告诉预处理器不要产生`#line'命令。配合`-E'选项使用。</td>
</tr>
<tr>
<td>-static</td>
<td>在支持动态链接的系统上，阻止连接共享库。该选项在其它系统上 无效。</td>
</tr>
<tr>
<td>-nostdlib</td>
<td>不连接系统标准启动文件和标准库文件，只把指定的文件传递给连接器。</td>
</tr>
<tr bgcolor="#c0c0c0">
<th>Warnings</th><th></th>
</tr>
<tr>
<td>-Wall</td>
<td>会打开一些很有用的警告选项，建议编译时加此选项。</td>
</tr>
<tr>
<td>-W&nbsp;-Wextra</td>
<td>打印一些额外的警告信息。</td>
</tr>
<tr>
<td>-w</td>
<td>禁止显示所有警告信息。</td>
</tr>
<tr>
<td>-Wshadow</td>
<td>当一个局部变量遮盖住了另一个局部变量，或者全局变量时，给出警告。很有用的选项，建议打开。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Wpointer-arith</td>
<td>对函数指针或者void *类型的指针进行算术操作时给出警告。也很有用。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Wcast-qual</td>
<td>当强制转化丢掉了类型修饰符时给出警告。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Waggregate-return</td>
<td>如果定义或调用了返回结构体或联合体的函数，编译器就发出警告。</td>
</tr>
<tr>
<td>-Winline</td>
<td>无论是声明为 inline 或者是指定了-finline-functions 选项，如果某函数不能内联，编译器都将发出警告。如果你的代码含有很多 inline 函数的话，这是很有用的选项。</td>
</tr>
<tr>
<td>-Werror</td>
<td>把警告当作错误。出现任何警告就放弃编译。</td>
</tr>
<tr>
<td>-Wunreachable-code</td>
<td>如果编译器探测到永远不会执行到的代码，就给出警告。也是比较有用的选项。</td>
</tr>
<tr>
<td>-Wcast-align</td>
<td>一旦某个指针类型强制转换导致目标所需的地址对齐增加时，编译器就发出警告。</td>
</tr>
<tr>
<td>-Wundef</td>
<td>当一个没有定义的符号出现在 #if 中时，给出警告。</td>
</tr>
<tr>
<td>-Wredundant-decls</td>
<td>如果在同一个可见域内某定义多次声明，编译器就发出警告，即使这些重复声明有效并且毫无差别。</td>
</tr>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C 语言文法 ( C Language Grammar )]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/07/23/compiler-c-grammar/"/>
    <updated>2011-07-23T13:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/07/23/compiler-c-grammar</id>
    <content type="html"><![CDATA[<pre><code>    %token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF
    %token TYPE_NAME

    %token TYPEDEF EXTERN STATIC AUTO REGISTER
    %token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
    %token STRUCT UNION ENUM

    %token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

    %start translation_unit
    %%
    translation_unit
        : external_declaration
        | translation_unit external_declaration
        ;

    external_declaration
        : function_definition
        | declaration
        ;

    function_definition
        : declaration_specifiers declarator declaration_list compound_statement
        | declaration_specifiers declarator compound_statement
        | declarator declaration_list compound_statement
        | declarator compound_statement
        ;

    declaration_list
        : declaration
        | declaration_list declaration
        ;

    declaration
        : declaration_specifiers ';'
        | declaration_specifiers init_declarator_list ';'
        ;

    declaration_specifiers
        : storage_class_specifier
        | storage_class_specifier declaration_specifiers
        | type_specifier
        | type_specifier declaration_specifiers
        | type_qualifier
        | type_qualifier declaration_specifiers
        ;

    specifier_qualifier_list
        : type_specifier specifier_qualifier_list
        | type_specifier
        | type_qualifier specifier_qualifier_list
        | type_qualifier

    type_qualifier_list
        : type_qualifier
        | type_qualifier_list type_qualifier
        ;

    type_qualifier
        : CONST
        | VOLATILE
        ;

    storage_class_specifier
        : TYPEDEF
        | EXTERN
        | STATIC
        | AUTO
        | REGISTER
        ;

    type_specifier
        : VOID
        | CHAR
        | SHORT
        | INT
        | LONG
        | FLOAT
        | DOUBLE
        | SIGNED
        | UNSIGNED
        | struct_or_union_specifier
        | enum_specifier
        | TYPE_NAME
        ;

    struct_or_union_specifier
        : struct_or_union IDENTIFIER '{' struct_declaration_list '}'
        | struct_or_union '{' struct_declaration_list '}'
        | struct_or_union IDENTIFIER
        ;

    struct_or_union
        : STRUCT
        | UNION
        ;

    struct_declaration_list
        : struct_declaration
        | struct_declaration_list struct_declaration
        ;

    struct_declaration
        : specifier_qualifier_list struct_declarator_list ';'
        ;

    struct_declarator_list
        : struct_declarator
        | struct_declarator_list ',' struct_declarator
        ;

    struct_declarator
        : declarator
        | ':' constant_expression
        | declarator ':' constant_expression
        ;

    enum_specifier
        : ENUM '{' enumerator_list '}'
        | ENUM IDENTIFIER '{' enumerator_list '}'
        | ENUM IDENTIFIER
        ;

    enumerator_list
        : enumerator
        | enumerator_list ',' enumerator
        ;

    enumerator
        : IDENTIFIER
        | IDENTIFIER '=' constant_expression
        ;       

    init_declarator_list
        : init_declarator
        | init_declarator_list ',' init_declarator
        ;       

    init_declarator
        : declarator
        | declarator '=' initializer
        ;

    initializer_list
        : initializer
        | initializer_list ',' initializer
        ;        

    initializer
        : assignment_expression
        | '{' initializer_list '}'
        | '{' initializer_list ',' '}'
        ;

    parameter_type_list
        : parameter_list
        | parameter_list ',' '...'
        ;

    parameter_list
        : parameter_declaration
        | parameter_list ',' parameter_declaration

    parameter_declaration
        : declaration_specifiers declarator
        | declaration_specifiers abstract_declarator
        | declaration_specifiers
        ;

    identifier_list
        : IDENTIFIER
        | identifier_list ',' IDENTIFIER
        ;

    type_name
        : specifier_qualifier_list
        | specifier_qualifier_list abstract_declarator
        ;

    abstract_declarator
        : pointer
        | direct_abstract_declarator
        | pointer direct_abstract_declarator
        ;

    direct_abstract_declarator
        : '(' abstract_declarator ')'
        | '[' ']'
        | '[' constant_expression ']'
        | direct_abstract_declarator '[' ']'
        | direct_abstract_declarator '[' constant_expression ']'
        | '(' ')'
        | '(' parameter_type_list ')'
        | direct_abstract_declarator '(' ')'
        | direct_abstract_declarator '(' parameter_type_list ')'
        ;

    declarator
        : pointer direct_declarator
        | direct_declarator
        ;

    direct_declarator
        : IDENTIFIER
        | '(' declarator ')'
        | direct_declarator '[' constant_expression ']'
        | direct_declarator '[' ']'
        | direct_declarator '(' parameter_type_list ')'
        | direct_declarator '(' identifier_list ')'
        | direct_declarator '(' ')'
        ;

    pointer
        : '*'
        | '*' type_qualifier_list
        | '*' pointer
        | '*' type_qualifier_list pointer
        ;        

    statement
        : labeled_statement
        | compound_statement
        | expression_statement
        | selection_statement
        | iteration_statement
        | jump_statement
        ;

    labeled_statement
        : IDENTIFIER ':' statement
        | CASE constant_expression ':' statement
        | DEFAULT ':' statement
        ;

    compound_statement
        : '{' '}'
        | '{' statement_list '}'
        | '{' declaration_list '}'
        | '{' declaration_list statement_list '}'
        ;        

    statement_list
        : statement
        | statement_list statement
        ;

    expression_statement
        : ';'
        | expression ';'
        ;

    selection_statement
        : IF '(' expression ')' statement
        | IF '(' expression ')' statement ELSE statement
        | SWITCH '(' expression ')' statement
        ;

    iteration_statement
        : WHILE '(' expression ')' statement
        | DO statement WHILE '(' expression ')' ';'
        | FOR '(' expression_statement expression_statement ')' statement
        | FOR '(' expression_statement expression_statement expression ')' statement
        ;

    jump_statement
        : GOTO IDENTIFIER ';'
        | CONTINUE ';'
        | BREAK ';'
        | RETURN ';'
        | RETURN expression ';'
        ;        

    expression
        : assignment_expression
        | expression ',' assignment_expression
        ;

    assignment_expression
        : conditional_expression
        | unary_expression assignment_operator assignment_expression
        ;

    assignment_operator
        : '='
        | '*='
        | '/='
        | '%='
        | '+='
        | '-='
        | '&lt;&lt;='
        | '&gt;&gt;='
        | '&amp;='
        | '^='
        | '|='
        ;

    constant_expression
        : conditional_expression
        ;

    conditional_expression
        : logical_or_expression
        | logical_or_expression '?' expression ':' conditional_expression
        ;

    logical_or_expression
        : logical_and_expression
        | logical_or_expression '||' logical_and_expression
        ;

    logical_and_expression
        : inclusive_or_expression
        | logical_and_expression '&amp;&amp;' inclusive_or_expression
        ;

    inclusive_or_expression
        : exclusive_or_expression
        | inclusive_or_expression '|' exclusive_or_expression
        ;

    exclusive_or_expression
        : and_expression
        | exclusive_or_expression '^' and_expression
        ;

    and_expression
        : equality_expression
        | and_expression '&amp;' equality_expression
        ;

    equality_expression
        : relational_expression
        | equality_expression '==' relational_expression
        | equality_expression '!=' relational_expression
        ;

    relational_expression
        : shift_expression
        | relational_expression '&lt;' shift_expression
        | relational_expression '&gt;' shift_expression
        | relational_expression '&lt;=' shift_expression
        | relational_expression '&gt;=' shift_expression
        ;

    shift_expression
        : additive_expression
        | shift_expression '&lt;&lt;' additive_expression
        | shift_expression '&gt;&gt;' additive_expression
        ;

    additive_expression
        : multiplicative_expression
        | additive_expression '+' multiplicative_expression
        | additive_expression '-' multiplicative_expression
        ;

    multiplicative_expression
        : cast_expression
        | multiplicative_expression '*' cast_expression
        | multiplicative_expression '/' cast_expression
        | multiplicative_expression '%' cast_expression
        ;

    cast_expression
        : unary_expression
        | '(' type_name ')' cast_expression
        ;

    unary_expression
        : postfix_expression
        | '++' unary_expression
        | '--' unary_expression
        | unary_operator cast_expression
        | SIZEOF unary_expression
        | SIZEOF '(' type_name ')'
        ;

    unary_operator
        : '&amp;'
        | '*'
        | '+'
        | '-'
        | '~'
        | '!'
        ;

    argument_expression_list
        : assignment_expression
        | argument_expression_list ',' assignment_expression
        ;

    postfix_expression
        : primary_expression
        | postfix_expression '[' expression ']'
        | postfix_expression '(' ')'
        | postfix_expression '(' argument_expression_list ')'
        | postfix_expression '.' IDENTIFIER
        | postfix_expression '-&gt;' IDENTIFIER
        | postfix_expression '++'
        | postfix_expression '--'
        ;

    primary_expression
        : IDENTIFIER
        | CONSTANT
        | STRING_LITERAL
        | '(' expression ')'
        ;
    %%
</code></pre>
]]></content>
  </entry>
  
</feed>
