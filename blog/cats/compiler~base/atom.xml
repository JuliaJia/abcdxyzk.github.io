<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: compiler~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/compiler~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-12-11T01:25:43+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[编译Android的kernel]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/04/compiler-android-kernel/"/>
    <updated>2014-12-04T17:34:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/04/compiler-android-kernel</id>
    <content type="html"><![CDATA[<h4>一 下载</h4>

<ol>
<li><p>下载arm编译器<br/>
<a href="https://launchpad.net/gcc-arm-embedded/+download">https://launchpad.net/gcc-arm-embedded/+download</a></p></li>
<li><p>进入到你的android源代码目录，敲入下面命令：<br/>
git clone <a href="http://android.googlesource.com/kernel/goldfish.git">http://android.googlesource.com/kernel/goldfish.git</a> kernel</p></li>
<li><p>cd kernel  进入我们刚才创建的kernel文件夹</p></li>
<li><p>git branch -avv 查看远程的git 库<br/>
我们选择remotes/origin/android-goldfish-2.6.29分支来下载</p></li>
<li><p>git checkout -b android-goldfish-2.6.29 remotes/origin/android-goldfish-2.6.29</p></li>
</ol>


<h4>二  编译kernel代码</h4>

<ol>
<li><p>设置环境变量<br/>
export PATH=$PATH:~/andr-perf/gcc-arm-none-eabi-4_8-2014q3/bin</p></li>
<li><p>修改kernel下面的makefile文件，修改<br/>
ARCH        ?= $(SUBARCH)<br/>
CROSS_COMPILE    ?=<br/>
这两个字段成如下内容：<br/>
ARCH        ?= arm<br/>
CROSS_COMPILE    ?= arm-none-eabi-</p></li>
<li><p>开始编译,敲入如下命令<br/>
make goldfish_defconfig<br/>
或者看arch/arm/configs/目录下有什么，就挑一个make XXX</p></li>
<li><p>正式编译,敲入如下命令<br/>
make</p></li>
</ol>


<p>正式编译成功之后，我们会看到如下文字：<br/>
OBJCOPY arch/arm/boot/zImage<br/>
Kernel: arch/arm/boot/zImage is ready</p>

<h4>三  利用新编译的kernel来启动模拟器</h4>

<ol>
<li><p>在启动模拟器之前，先设置模拟器的目录到环境变量$PATH中去：<br/>
  USER-NAME@MACHINE-NAME:~/Android$ export PATH=$PATH:~/android_prj/out/host/linux-x86/bin</p></li>
<li><p>设置ANDROID_PRODUCT_OUT环境变量：<br/>
USER-NAME@MACHINE-NAME:~/Android$ export ANDROID_PRODUCT_OUT=~/android_prj/out/target/product/generic<br/>
同样，如果你的源代码目录不是android_prj，请注意修改下。另外，如果你已经配置了环境变量。则不必如此。建议最好写到配置文件 ~/.bash_rc配置文件里面去。 免得每次都要配置</p></li>
<li><p>启动模拟器<br/>
cd ~/android_prj  回到源代码目录<br/>
sandy@ubuntu:~/android_prj$ emulator -kernel ./kernel/arch/arm/boot/zImage 利用刚才我们编译的kernel内核启动模拟器</p></li>
<li><p>验证结果<br/>
待模拟器启动完毕之后，我们敲入adb shell<br/>
第一次会说device offline，不管它，再敲入一遍，就会进入adb 调试<br/>
然后cd proc 进入proc目录，cat version</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[部分GCC选项]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/04/compiler-gcc-args/"/>
    <updated>2014-12-04T17:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/04/compiler-gcc-args</id>
    <content type="html"><![CDATA[<h5>-Werror 和 -I 很有用</h5>

<table>
<tr bgcolor="#c0c0c0">
<th>命令</th><th>描述</th>
</tr>
<tr>
<td>-l&nbsp;<em>library</em>-l<em>library</em></td>
<td>进行链接时搜索名为library的库。例子： $ gcc test.c -lm -o test</td>
</tr>
<tr>
<td>-I<em>dir</em></td>
<td>把<em>dir</em>加入到搜索头文件的路径列表中。例子： $ gcc test.c -I../inc -o test</td>
</tr>
<tr>
<td>-L<em>dir</em></td>
<td>把<em>dir</em>加入到搜索库文件的路径列表中。例子： $ gcc -I/home/foo -L/home/foo -ltest test.c -o test</td>
</tr>
<tr>
<td>-D<em>name</em></td>
<td>预定义一个名为<em>name</em>的宏，值为1。例子： $ gcc -DTEST_CONFIG test.c -o test</td>
</tr>
<tr>
<td>-D<em>name</em>=<em>definition</em></td>
<td>预定义名为<em>name</em>，值为<em>definition</em>的宏。</td>
</tr>
<tr>
<td>-ggdb&nbsp;-ggdb<em>level</em></td>
<td>为调试器 gdb 生成调试信息。<em>level</em>可以为1，2，3，默认值为2。</td>
</tr>
<tr>
<td>-g&nbsp;-g<em>level</em></td>
<td>生成操作系统本地格式的调试信息。-g 和 -ggdb 并不太相同， -g 会生成 gdb 之外的信息。<em>level</em>取值同上。</td>
</tr>
<tr>
<td>-s</td>
<td>去除可执行文件中的符号表和重定位信息。用于减小可执行文件的大小。</td>
</tr>
<tr>
<td>-M</td>
<td>告诉预处理器输出一个适合make的规则，用于描述各目标文件的依赖关系。对于每个 源文件，预处理器输出 一个make规则，该规则的目标项(target)是源文件对应的目标文件名，依赖项(dependency)是源文件中 #include引用的所有文件。生成的规则可 以是单行，但如果太长，就用`/'-换行符续成多行。规则 显示在标准输出，不产生预处理过的C程序。</td>
</tr>
<tr>
<td>-C</td>
<td>告诉预处理器不要丢弃注释。配合`-E'选项使用。</td>
</tr>
<tr>
<td>-P</td>
<td>告诉预处理器不要产生`#line'命令。配合`-E'选项使用。</td>
</tr>
<tr>
<td>-static</td>
<td>在支持动态链接的系统上，阻止连接共享库。该选项在其它系统上 无效。</td>
</tr>
<tr>
<td>-nostdlib</td>
<td>不连接系统标准启动文件和标准库文件，只把指定的文件传递给连接器。</td>
</tr>
<tr bgcolor="#c0c0c0">
<th>Warnings</th><th></th>
</tr>
<tr>
<td>-Wall</td>
<td>会打开一些很有用的警告选项，建议编译时加此选项。</td>
</tr>
<tr>
<td>-W&nbsp;-Wextra</td>
<td>打印一些额外的警告信息。</td>
</tr>
<tr>
<td>-w</td>
<td>禁止显示所有警告信息。</td>
</tr>
<tr>
<td>-Wshadow</td>
<td>当一个局部变量遮盖住了另一个局部变量，或者全局变量时，给出警告。很有用的选项，建议打开。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Wpointer-arith</td>
<td>对函数指针或者void *类型的指针进行算术操作时给出警告。也很有用。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Wcast-qual</td>
<td>当强制转化丢掉了类型修饰符时给出警告。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Waggregate-return</td>
<td>如果定义或调用了返回结构体或联合体的函数，编译器就发出警告。</td>
</tr>
<tr>
<td>-Winline</td>
<td>无论是声明为 inline 或者是指定了-finline-functions 选项，如果某函数不能内联，编译器都将发出警告。如果你的代码含有很多 inline 函数的话，这是很有用的选项。</td>
</tr>
<tr>
<td>-Werror</td>
<td>把警告当作错误。出现任何警告就放弃编译。</td>
</tr>
<tr>
<td>-Wunreachable-code</td>
<td>如果编译器探测到永远不会执行到的代码，就给出警告。也是比较有用的选项。</td>
</tr>
<tr>
<td>-Wcast-align</td>
<td>一旦某个指针类型强制转换导致目标所需的地址对齐增加时，编译器就发出警告。</td>
</tr>
<tr>
<td>-Wundef</td>
<td>当一个没有定义的符号出现在 #if 中时，给出警告。</td>
</tr>
<tr>
<td>-Wredundant-decls</td>
<td>如果在同一个可见域内某定义多次声明，编译器就发出警告，即使这些重复声明有效并且毫无差别。</td>
</tr>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译期间求值]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/11/05/compiler-cal/"/>
    <updated>2013-11-05T14:26:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/11/05/compiler-cal</id>
    <content type="html"><![CDATA[<p>编译期求阶乘</p>

<h4>c++ 中的模板可以用来计算一些值，在编译的时候就是实现计算，而不是运行的时候。</h4>

<p>求阶乘 n!，一般 me 们会写个这样的程序：
```
    #include <iostream>
    long Factorial(long n)
    {
        return n == 0 ? 1 : n*Factorial(n-1);
    }</p>

<pre><code>int main()
{
    long fac=1, n=20;
    for(int i=1; i&lt;=n; ++i)fac *= i;
    std::cout &lt;&lt; "20! = " &lt;&lt; fac &lt;&lt; " " &lt;&lt; Factorial(20) &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<pre><code>现在使用模板技术，类似于递归的方法求 20 !。
</code></pre>

<pre><code>#include &lt;iostream&gt;

template&lt;int N&gt;
class Factorial{
public:
    static const long value = N*Factorial&lt;N-1&gt;::value;
};

template&lt;&gt;
class Factorial&lt;0&gt;{
public:
    static const long value = 1;
};

int main()
{
    std::cout &lt;&lt; "20! = " &lt;&lt; Factorial&lt;20&gt;::value &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<pre><code>说明：  
  template 通常用来参数化类型，通常 class T 或是 typename T(T 用来代替一个类型的名字)，不过也可以带一个整型参数 N (貌似规定只能是整型)。  
  template &lt;&gt; 是用来特殊指定一些情形，比如上面给的 Factorial&lt;0&gt; 指定 N = 0 时的情形，这有点像递归中的 if(n==0) return 1;  
  class 类中可以带有 static const 变量，这种变量可以在类内初始化(只能是整型)；当然既是 const 变量，又是 static 变量；  
  Factorila&lt;20&gt; 实际是一个类，而 ::value 是其 static 变量；在生成Factorila&lt;20&gt; 的时候同时生成了众多的Factorila&lt;N&gt; ( N &gt;0 &amp;&amp; N &lt; 20)类；  

更多例子  
模板类，或是模版函数，或是模板成员函数，都是编译器根据程序的实际情况而生成的，需要什么就生成什么，不需要就不生成。上面的例子中， 程序中使用 Factorial&lt;20&gt; 这个类，就生成这个类，因为 Factorial&lt;20&gt; 依赖 Factorial&lt;19&gt; 所以又生成 Factorial&lt;19&gt; ，这样一直依赖下去，直到 Factorial&lt;0&gt;( me 们已经指定了)。因为是编译期生成，也是编译器求值，所以实际程序中只能使用 static const 类似的 —— 常量，而不能使用普通的 int n。所以，模板元编程中，么发使用循环，只能类似递归的技术。  
通常 me 们会将递归程序转换为循环程序，实际上循环程序基本也都可以递归解决。(是不是一定呢？O__O"…)  
求斐波那契数
</code></pre>

<pre><code>#include &lt;iostream&gt;

template &lt;long N&gt;
struct Fibonacci{
    static const long value = Fibonacci&lt;N-1&gt;::value + Fibonacci&lt;N-2&gt;::value;
};

template&lt;&gt;
struct Fibonacci&lt;0&gt;{
    static const long value = 0;
};

template&lt;&gt;
struct Fibonacci&lt;1&gt;{
    static const long value = 1;
};

int main()
{
    std::cout &lt;&lt; Fibonacci&lt;12&gt;::value &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<pre><code>第 12 个斐波那契数是 144，这是唯一一个 Fib(n) = n*n 的数。
求 1+2+3+...+n
</code></pre>

<pre><code>#include &lt;iostream&gt;

template &lt;long N&gt;
struct Sum{
    static const long value = N+Sum&lt;N-1&gt;::value;
};

template&lt;&gt;
struct Sum&lt;1&gt;{
    static const long value = 1;
};

int main()
{
    std::cout &lt;&lt; Sum&lt;100&gt;::value &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<pre><code>这个和 n! 的用法基本一样。

#### constexpr编译期求值
  模板只是在编译的时候完成工作的一种方法，实际上上面的模板元编程也只是在编译期求了一些常量而已；为了简化使用模板进行元编程的难度，c++11 引入了 constexpr 关键字 —— 声明常量或是函数，实现在编译期求值。上面的三个程序都可以大大简化：
</code></pre>

<pre><code>#include &lt;iostream&gt;

constexpr long factorial(long n)
{
    return n&lt;=1 ? 1 : n*factorial(n-1);
}
constexpr long fibonacci(long n)
{
    return n&lt;=1 ? n : fibonacci(n-1)+fibonacci(n-2);
}
constexpr long sum(long n)
{
    return n&lt;=1 ? n : n+sum(n-1);
}

int main()
{
    std::cout &lt;&lt; "10! F(12) 1+2+...+100 =&gt; " &lt;&lt; factorial(10) &lt;&lt; " " &lt;&lt; fibonacci(12) &lt;&lt; " " &lt;&lt; sum(100) &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>```
不用多数，看应该看得懂神马意思，要提的就是 constexpr 都是编译的时候求值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gcc编译安装]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/25/compiler-gcc-make/"/>
    <updated>2013-10-25T09:42:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/25/compiler-gcc-make</id>
    <content type="html"><![CDATA[<h5>gcc编译安装过程</h5>

<h4>1.先安装三个库 gmp mprc mpc 这三个库的源码要到官网去下载</h4>

<h5>1）安装gmp：</h5>

<p>  首先建立源码同级目录 gmp-build,输入命令，第一次编译不通过，发现缺少一个叫m4的东西 于是就用apt-get下载了一个，继续编译，没有报错。make的时候出现大量信息并且生成一些文件在当前文件夹下，之后用make check检查一下，最后用make install安装</p>

<h5>2）安装mpfr：</h5>

<p>  首先建立源码文件夹同级目录mpfr-build<br/>
然后进入该目录输入../mpfr-2.4.2/configure &ndash;prefix=/usr/local/mpfr-2.4.2 &ndash;with-gmp=/usr/local/gmp-4.3.2<br/>
然后<br/>
 make<br/>
 make check<br/>
 make install</p>

<h5>3）安装mpc</h5>

<p>类似与上面 不过要把依赖关系包含进去具体命令如下<br/>
../mpc-0.8.1/configure &ndash;prefix=/usr/local/mpc-0.8.1 &ndash;with-gmp=/usr/local/gmp-4.3.2 &ndash;with-mpfr=/usr/local/mpfr-2.4.2
然后同样是
  make<br/>
  make check<br/>
  make install</p>

<h4>2.编译gcc</h4>

<h5>1）建立一个objdir来存放目标文件 然后进入该文件夹输入</h5>

<p> /home/wulei/sourcecode/gcc-4.6.2/configure &ndash;prefix=/usr/local/gcc-4.6.2 &ndash;enable-threads=posix &ndash;disable-checking &ndash;disable-multilib &ndash;enable-languages=c &ndash;with-gmp=/usr/local/gmp-4.3.2/ &ndash;with-mpfr=/usr/local/mpfr-2.4.2/ &ndash;with-mpc=/usr/local/mpc-0.8.1/
最终用：../gcc-4.6.2/configure &ndash;prefix=/usr/gcc-4.6.9 &ndash;enable-threads=posix &ndash;disable-checking &ndash;disable-multilib &ndash;enable-languages=c &ndash;with-gmp=/usr/gmp-4.3.2 &ndash;with-mpfr=/usr/mpfr-2.4.2 &ndash;with-mpc=/usr/mpc-0.8.1</p>

<h5>2）</h5>

<p>  make
  make check
  make install</p>

<h5>出现问题make的时候提示如下：</h5>

<pre><code>Checking for suffix of object files... configure: error: in `/home/wulei/sourcecode/gcc-4.6.2/i686-pc-linux-gnu/libgcc':
configure: error: cannot compute suffix of object files: cannot compile
See `config.log' for more details.
make[2]: *** [configure-stage1-target-libgcc] 错误 1
make[2]:正在离开目录 `/home/wulei/sourcecode/gcc-4.6.2'
make[1]: *** [stage1-bubble] 错误 2
make[1]:正在离开目录 `/home/wulei/sourcecode/gcc-4.6.2'
make: *** [all] 错误 2
</code></pre>

<p>于是 进入/home/wulei/sourcecode/gcc-4.6.2/i686-pc-linux-gnu/libgcc查看这个路径下的config.log<br/>
发现如下的错误提示：<br/>
/home/wulei/sourcecode/gcc-4.6.2/host-i686-pc-linux-gnu/gcc/cc1: error while loading shared libraries: libmpfr.so.1: cannot open shared object file: No such file or directory</p>

<h4>原因是因为linux在make的时候没有自动寻找新加入的库所以要用命令加入</h4>

<p>export LD_LIBRARY_PATH=/usr/local/mpc-0.8.1/lib:/usr/local/mpfr-2.4.2/lib:/usr/local/gmp-4.3.2/lib</p>

<h4>Makefile:161: ../.././gcc/libgcc.mvars: No such file or directory</h4>

<p>编译gcc时，需要注意一个原则：不要再gcc的源码中直接执行./configure、make、make install等命令，需要在源码目录下另外新建一个目录，在新建的目录中执行以上命令。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[上下文无关文法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/03/19/compiler-syntx-grammar/"/>
    <updated>2013-03-19T17:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/03/19/compiler-syntx-grammar</id>
    <content type="html"><![CDATA[<p>  上下文无关文法有足够的能力描述现今程序设计语言的语法结构，比如描述算术表达式，描述各种语句等。</p>

<h4>1.上下文无关文法语法树</h4>

<p>  给定文法G=(VN，VT，P，S)，对于G的任何句型都能构造与之关联的语法树(推导树)。这棵树满足下列4个条件：<br/>
  ① 每个结点都有一个标记，此标记是V的 一个符号。<br/>
  ② 根的标记是S。<br/>
  ③ 若一结点标记A,至少有一个从它出发的分枝，则A肯定在VN中<br/>
  ④ 如果标记为A，有n个从它出发的分枝，并且这些分枝的结点的标记（从左到右）为B1, B2，…，Bn，那么A→B1B2，…，Bn一定是P中的一个产生式。<br/>
例:
<code>
G[S]:
S→aAS
A→SbA
A→SS
S→a
A→ba
</code>
写出aabbaa句型的推导过程：
<code>
(1)Ｓ＝＞aAS=&gt;aAa=&gt;aSbAa=&gt;aSbbaa=&gt;aabbaa(最右推导）
(2)Ｓ＝＞aAS=&gt;aSbAS=&gt;aabAS=&gt;aabbaS=&gt;aabbaa(最左推导）
</code></p>

<h4>2.句型、推导</h4>

<pre><code>G[E]： E→E+T|T
T→T*F|F
F→(E)|a
</code></pre>

<p>  判断a+a*a是否是合法的句子,采用最左推导和最右推导
<code>
Ｅ＝＞Ｅ＋Ｔ＝＞Ｔ＋Ｔ＝＞Ｆ＋Ｔ＝＞a＋Ｔ＝＞a+Ｔ*Ｆ＝＞a＋Ｆ＊Ｆ＝＞a＋a＊Ｆ=&gt;a＋a*a(最左推导）
Ｅ＝＞Ｅ+Ｔ＝＞Ｅ＋Ｔ＊Ｆ＝＞Ｅ＋Ｔ＊a＝＞Ｅ＋Ｆ＊a =&gt;Ｅ＋a*a＝＞Ｔ＋a*a＝＞Ｆ＋a*a＝＞a+a*a(最右推导）
</code></p>

<h4>3.规范推导、规范句型</h4>

<p>  最左（最右）推导：在推导的任何一步αTβ，其中α、β是句型，都是对α中的最左（右）非终结符进行替换。最右推导被称为规范推导。</p>

<p>  由规范推导所得的句型称为规范句型。任何句子都有规范推导，但句型不一定有规范推导。<br/>
例：设语言L1＝{n|n是无符号整数}且文法G：  N =>ND N =>D<br/>
D =>0|1|2|3|……|9<br/>
对于该文法，3D是句型，但不存在规范句型。 <br/>
而33是存在规范句型。 <br/>
N＝>ND=>DD=>3D (不是最右推导） <br/>
N＝>ND=>N3=>D3=>33 (是最右推导）</p>

<h4>4.构造语法树</h4>

<pre><code>G[E]：
E→E+T|T
T→T*F|F
F→(E)|a
</code></pre>

<p>画出a+a*a句型的语法树</p>

<p><img src="/images/compiler/2013-03-19-1.jpg" alt="" /></p>

<p>  一棵语法树表示了一个句型的可能的不同推导过程，包括最左(最右)推导。但是，一个句型是否只对应唯一的一棵语法树呢?一个句型是否只有唯一的一个最左(最右)推导呢？<br/>
例：
<code>
Ｇ［Ｅ］
Ｅ－＞i
Ｅ－＞Ｅ＋Ｅ
Ｅ－＞Ｅ＊Ｅ
Ｅ－＞（Ｅ）
</code></p>

<p><img src="/images/compiler/2013-03-19-1.jpg" alt="" /></p>

<p>句型i*i+i两个不同的最左推导
<code>
Ｅ＝＞Ｅ＋Ｅ＝＞Ｅ＊Ｅ＋Ｅ＝＞i＊Ｅ＋Ｅ＝＞i*i+Ｅ＝＞i*i+i
Ｅ＝＞Ｅ＊Ｅ＝＞i*Ｅ=&gt;i*Ｅ＋Ｅ＝＞i*i＋Ｅ＝＞i*i+i
</code></p>

<h4>5.二义文法</h4>

<p>  若一个文法存在某个句子对应两棵不同的语法树，则称这个文法是二义的或者，若一个文法存在某个句子有两个不同的最左（右）推导，则称这个文法是二义的。<br/>
  对于一个程序设计语言来说，常常希望它的文法是无二义的，因为希望对它的每个语句的分析是唯一的。 <br/>
二义文法改造为无二义文法
<code>
G[E]:   E → i             G[E]： E → T|E+T
        E → E+E                       T → F|T*F
        E → E*E                       F → （E）|i
        E → (E)               规定优先顺序和结合律
</code></p>
]]></content>
  </entry>
  
</feed>
