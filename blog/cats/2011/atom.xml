<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2011 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2011/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-25T00:55:30+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux ptrace函数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/11/29/tools-ptrace/"/>
    <updated>2011-11-29T19:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/11/29/tools-ptrace</id>
    <content type="html"><![CDATA[<pre><code>    #include &lt;sys/ptrace.h&gt;
    int ptrace(int request, int pid, int addr, int data);
</code></pre>

<h5>描述</h5>

<p>Ptrace提供了一种父进程可以控制子进程运行，并可以检查和改变它的核心image。它主要用于实现断点调试。一个被跟踪的进程运行中，直到发生一个信号。则进程被中止，并且通知其父进程。在进程中止的状态下，进程的内存空间可以被读写。父进程还可以使子进程继续执行，并选择是否是否忽略引起中止的信号。</p>

<!--more-->


<p>Request参数决定了系统调用的功能：</p>

<p>PTRACE_TRACEME<br/>
本进程被其父进程所跟踪。其父进程应该希望跟踪子进程。</p>

<p>PTRACE_PEEKTEXT, PTRACE_PEEKDATA<br/>
从内存地址中读取一个字节，内存地址由addr给出。</p>

<p>PTRACE_PEEKUSR<br/>
从USER区域中读取一个字节，偏移量为addr。</p>

<p>PTRACE_POKETEXT, PTRACE_POKEDATA<br/>
往内存地址中写入一个字节。内存地址由addr给出。</p>

<p>PTRACE_POKEUSR<br/>
往USER区域中写入一个字节。偏移量为addr。</p>

<p>PTRACE_SYSCALL, PTRACE_CONT<br/>
重新运行。</p>

<p>PTRACE_KILL<br/>
杀掉子进程，使它退出。</p>

<p>PTRACE_SINGLESTEP<br/>
设置单步执行标志</p>

<p>PTRACE_ATTACH<br/>
跟踪指定pid 进程。</p>

<p>PTRACE_DETACH<br/>
结束跟踪</p>

<p>Intel386特有：
PTRACE_GETREGS<br/>
读取寄存器</p>

<p>PTRACE_SETREGS<br/>
设置寄存器</p>

<p>PTRACE_GETFPREGS<br/>
读取浮点寄存器</p>

<p>PTRACE_SETFPREGS<br/>
设置浮点寄存器
init进程不可以使用此函数</p>

<h5>返回值</h5>

<p>成功返回0。错误返回-1。errno被设置。</p>

<h5>错误</h5>

<p>EPERM<br/>
特殊进程不可以被跟踪或进程已经被跟踪。</p>

<p>ESRCH<br/>
指定的进程不存在</p>

<p>EIO<br/>
请求非法ptrace系统函数。</p>

<p>ptrace提供了一种使父进程得以监视和控制其它进程的方式，它还能够改变子进程中的寄存器和内核映像，因而可以实现断点调试和系统调用的跟踪。使用ptrace，你可以在用户层拦截和修改系统调用(syscall).</p>

<h5>功能详细描述</h5>

<p>1)   PTRACE_TRACEME<br/>
形式：ptrace(PTRACE_TRACEME,0 ,0 ,0)<br/>
描述：本进程被其父进程所跟踪。其父进程应该希望跟踪子进程。</p>

<p>2)  PTRACE_PEEKTEXT,PTRACE_PEEKDATA<br/>
形式：ptrace(PTRACE_PEEKTEXT, pid, addr, data)<br/>
描述：从内存地址中读取一个字节，pid表示被跟踪的子进程，内存地址由addr给出，data为用户变量地址用于返回读到的数据。在Linux（i386）中用户代码段与用户数据段重合所以读取代码段和数据段数据处理是一样的。</p>

<p>3)  PTRACE_POKETEXT,PTRACE_POKEDATA<br/>
形式：ptrace(PTRACE_POKETEXT, pid, addr, data)<br/>
描述：往内存地址中写入一个字节。pid表示被跟踪的子进程，内存地址由addr给出，data为所要写入的数据。</p>

<p>4)  TRACE_PEEKUSR<br/>
形式：ptrace(PTRACE_PEEKUSR, pid, addr, data)<br/>
描述：从USER区域中读取一个字节，pid表示被跟踪的子进程，USER区域地址由addr给出，data为用户变量地址用于返回读到的数据。USER结构为core文件的前面一部分，它描述了进程中止时的一些状态，如：寄存器值，代码、数据段大小，代码、数据段开始地址等。在Linux（i386）中通过PTRACE_PEEKUSER和PTRACE_POKEUSR可以访问USER结构的数据有寄存器和调试寄存器。</p>

<p>5)  PTRACE_POKEUSR<br/>
形式：ptrace(PTRACE_POKEUSR, pid, addr, data)<br/>
描述：往USER区域中写入一个字节，pid表示被跟踪的子进程，USER区域地址由addr给出，data为需写入的数据。</p>

<p>6)   PTRACE_CONT<br/>
形式：ptrace(PTRACE_CONT, pid, 0, signal)<br/>
描述：继续执行。pid表示被跟踪的子进程，signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。</p>

<p>7)  PTRACE_SYSCALL<br/>
形式：ptrace(PTRACE_SYS, pid, 0, signal)<br/>
描述：继续执行。pid表示被跟踪的子进程，signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。与PTRACE_CONT不同的是进行系统调用跟踪。在被跟踪进程继续运行直到调用系统调用开始或结束时，被跟踪进程被中止，并通知父进程。</p>

<p>8)   PTRACE_KILL<br/>
形式：ptrace(PTRACE_KILL,pid)<br/>
描述：杀掉子进程，使它退出。pid表示被跟踪的子进程。</p>

<p>9)   PTRACE_SINGLESTEP<br/>
形式：ptrace(PTRACE_KILL, pid, 0, signle)<br/>
描述：设置单步执行标志，单步执行一条指令。pid表示被跟踪的子进程。signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。当被跟踪进程单步执行完一个指令后，被跟踪进程被中止，并通知父进程。</p>

<p>10)  PTRACE_ATTACH<br/>
形式：ptrace(PTRACE_ATTACH,pid)<br/>
描述：跟踪指定pid 进程。pid表示被跟踪进程。被跟踪进程将成为当前进程的子进程，并进入中止状态。</p>

<p>11)  PTRACE_DETACH
形式：ptrace(PTRACE_DETACH,pid)
描述：结束跟踪。 pid表示被跟踪的子进程。结束跟踪后被跟踪进程将继续执行。</p>

<p>12)  PTRACE_GETREGS<br/>
形式：ptrace(PTRACE_GETREGS, pid, 0, data)<br/>
描述：读取寄存器值，pid表示被跟踪的子进程，data为用户变量地址用于返回读到的数据。此功能将读取所有17个基本寄存器的值。</p>

<p>13)  PTRACE_SETREGS<br/>
形式：ptrace(PTRACE_SETREGS, pid, 0, data)<br/>
描述：设置寄存器值，pid表示被跟踪的子进程，data为用户数据地址。此功能将设置所有17个基本寄存器的值。</p>

<p>14)  PTRACE_GETFPREGS
形式：ptrace(PTRACE_GETFPREGS, pid, 0, data)<br/>
描述：读取浮点寄存器值，pid表示被跟踪的子进程，data为用户变量地址用于返回读到的数据。此功能将读取所有浮点协处理器387的所有寄存器的值。</p>

<p>15)  PTRACE_SETFPREGS<br/>
形式：ptrace(PTRACE_SETREGS, pid, 0, data)<br/>
描述：设置浮点寄存器值，pid表示被跟踪的子进程，data为用户数据地址。此功能将设置所有浮点协处理器387的所有寄存器的值。</p>

<hr />

<p>在用户模式中，虽然只有一个函数可用，即ptrace(int <em>request, pid_t </em>pid, caddr_t <em>addr, int </em>data)，
但是这个函数能做所有的事情！如果你愿意，也可以花费几个小时来编写自己的小调试器，以解决特定的问题。</p>

<p>ptrace函数的_request参数是最重要的一个参数，因为它确定你将做什么。BSD和Linux的头文件使用不同的定义，这使得将ptrace应用从一个平台移植到另一个平台变得很复杂。默认地，我们使用BSD头文件中的定义。</p>

<p>r  PT_TRACE_ME（PTRACE_TRACEME）<br/>
将当前进程切换到停止状态。它通常总是与fork/exec一起使用，虽然也能遇到自我追踪的应用程序。
对于每一个进程，PT_TRACE_ME只能被调用一次。
追踪一个正被追踪的进程是会失败的（另一个较不重要的结果是进程不能追踪它自己。
如果要这样做，应该首先从自身派生一个进程）。大量的反调试技术都是以这一事实为基础的。
为了克服这类技术，必须使用绕过ptrace的调试器。
一个信号被发送到正被调试的进程，并将该进程切换到停止状态，
该进程可以使用从父进程上下文中调用的PT_CONTINUE和PT_STEP命令从停止状态退出。
wait函数会延迟父进程的执行，直到被调试的进程切换为停止状态或者终止为止（终止时，返回值为1407）。
其他的所有参数都被忽略。</p>

<p>r  PT_ATTACH（PTRACE_ATTACH）<br/>
将进程标志为pid的运行进程切换为停止状态，在这种情形下，
调试器进程成为“父进程”。其他的所有参数都被忽略。进程必须具有与调试进程相同的用户标志（UID），
并且不能是setuid/setduid进程（否则就要用root来调试）。</p>

<p>r  PT_DETACH（PTRACE_DETACH）
停止进程标志为pid进程（由PT_ATTACH和PT_TRACE_ME指定）的调试，
并继续其常态运行。其他的所有参数都被忽略。</p>

<p>r  PT_CONTINUE（PTRACE_CONT）<br/>
继续进程标志为pid的被调试进程的执行，而不中断与调试器进程的通信。
如果addr ＝＝ 1（在Linux中为0），从上次停止的地址继续执行；否则，从指定的地址继续执行。
参数_data指定发送到被调试进程的信号数量（零说明没有信号）。</p>

<p>r  PT_STEP（PTRACE_SINGLESTEP）<br/>
进行进程标志为pid的进程的单步执行，即执行下一条机器指令并切换为停止状态（在i386中，这是根据设置追踪标志来实现的，虽然有些“黑客”函数库使用硬件断点）。BSD要求将参数addr置为1，而Linux要求将该参数置为0。其他的所有参数都被忽略。</p>

<p>r  PT_READ_I和PT_READ_D（PTRACE_PEEKTEXT和PTRACE_PEEKDATA）<br/>
分别从代码区和正被调试进程的地址空间区读取机器字。在许多当代的平台中，这两个指令是等价的。
ptrace函数接收目标地址addr，并返回读到的结果。</p>

<p>r  PT_WRITE_I和PR_READ_D（PTRACE_POKETEXT和PTRACE_POKEDATA）<br/>
将由_data传入的机器字写入addr所指定的地址。</p>

<p>r  PT_GETREGS，PT_GETFPREGS和PT_GETDBREGS（PTRACE_GETREGS，PTRACE<em> FPREGS和PT_GETFPXREGS）<br/>
将一般用途寄存器、段寄存器和调试寄存器的值读入到地址由</em>addr指针所指定的调试器进程的内存区中。
只有i386平台接收这些与系统相关的命令。寄存器结构的描述放在头文件machine/reg.h文件中。</p>

<p>r  PT_SETREGS，PT_SETFPREGS和PT_SETDBREGS（PTRACE_SETREGS，PTRACE<em> SETFPREGS和PT_SETFPXREGS）<br/>
通过拷贝由</em>addr指针所指定的内存区域的内容来设置被调试进程的寄存器的值。</p>

<p>r  PT_KILL（PTRACE_KILL）<br/>
将sigkill发送到被调试进程，以终止其执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 汇编基础]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/08/27/assembly-base/"/>
    <updated>2011-08-27T16:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/08/27/assembly-base</id>
    <content type="html"><![CDATA[<p>绝顶好书<a href="/download/assembly/Professional_Assembly_Language.pdf">Professional_Assembly_Language</a></p>

<h4>一、简介</h4>

<p>作为最基本的编程语言之一，汇编语言虽然应用的范围不算很广，但重要性却勿庸置疑，因为它能够完成许多其它语言所无法完成的功能。就拿 Linux 内核来讲，虽然绝大部分代码是用 C 语言编写的，但仍然不可避免地在某些关键地方使用了汇编代码，其中主要是在 Linux 的启动部分。由于这部分代码与硬件的关系非常密切，即使是 C 语言也会有些力不从心，而汇编语言则能够很好扬长避短，最大限度地发挥硬件的性能。</p>

<p>大多数情况下 Linux 程序员不需要使用汇编语言，因为即便是硬件驱动这样的底层程序在 Linux 操作系统中也可以用完全用 C 语言来实现，再加上 GCC 这一优秀的编译器目前已经能够对最终生成的代码进行很好的优化，的确有足够的理由让我们可以暂时将汇编语言抛在一边了。但实现情况是 Linux 程序员有时还是需要使用汇编，或者不得不使用汇编，理由很简单：精简、高效和 libc 无关性。假设要移植 Linux 到某一特定的嵌入式硬件环境下，首先必然面临如何减少系统大小、提高执行效率等问题，此时或许只有汇编语言能帮上忙了。</p>

<p>汇编语言直接同计算机的底层软件甚至硬件进行交互，它具有如下一些优点：
能够直接访问与硬件相关的存储器或 I/O 端口； 能够不受编译器的限制，对生成的二进制代码进行完全的控制； 能够对关键代码进行更准确的控制，避免因线程共同访问或者硬件设备共享引起的死锁； 能够根据特定的应用对代码做最佳的优化，提高运行速度； 能够最大限度地发挥硬件的功能。</p>

<p>同时还应该认识到，汇编语言是一种层次非常低的语言，它仅仅高于直接手工编写二进制的机器指令码，因此不可避免地存在一些缺点：
编写的代码非常难懂，不好维护； 很容易产生 bug，难于调试； 只能针对特定的体系结构和处理器进行优化； 开发效率很低，时间长且单调。</p>

<p>Linux 下用汇编语言编写的代码具有两种不同的形式。第一种是完全的汇编代码，指的是整个程序全部用汇编语言编写。尽管是完全的汇编代码，Linux 平台下的汇编工具也吸收了 C 语言的长处，使得程序员可以使用 #include、#ifdef 等预处理指令，并能够通过宏定义来简化代码。第二种是内嵌的汇编代码，指的是可以嵌入到C语言程序中的汇编代码片段。虽然 ANSI 的 C 语言标准中没有关于内嵌汇编代码的相应规定，但各种实际使用的 C 编译器都做了这方面的扩充，这其中当然就包括 Linux 平台下的 GCC。</p>

<!--more-->


<h4>二、Linux 汇编语法格式</h4>

<p>绝大多数 Linux 程序员以前只接触过DOS/Windows 下的汇编语言，这些汇编代码都是 Intel 风格的。但在 Unix 和 Linux 系统中，更多采用的还是 AT&amp;T 格式，两者在语法格式上有着很大的不同：</p>

<p>在 AT&amp;T 汇编格式中，寄存器名要加上 &lsquo;%&rsquo; 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：<br/>
AT&amp;T 格式 Intel 格式<br/>
pushl %eax push eax</p>

<p>在 AT&amp;T 汇编格式中，用 &lsquo;$&rsquo; 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：<br/>
AT&amp;T 格式 Intel 格式<br/>
pushl $1 push 1</p>

<p>AT&amp;T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&amp;T 汇编格式中，目标操作数在源操作数的右边。例如：<br/>
AT&amp;T 格式 Intel 格式<br/>
addl $1, %eax add eax, 1</p>

<p>在 AT&amp;T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀&#8217;b&#8217;、&#8217;w&#8217;、&#8217;l&#8217;分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 &ldquo;byte ptr&rdquo; 和 &ldquo;word ptr&rdquo; 等前缀来表示的。例如：
AT&amp;T 格式Intel 格式movb val, %almov al, byte ptr val在 AT&amp;T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上&#8217;*&lsquo;作为前缀，而在 Intel 格式中则不需要。</p>

<p>远程转移指令和远程子调用指令的操作码，在 AT&amp;T 汇编格式中为 &ldquo;ljump&rdquo; 和 &ldquo;lcall&#8221;，而在 Intel 汇编格式中则为 &#8220;jmp far&rdquo; 和 &ldquo;call far&#8221;，即：
AT&amp;T 格式Intel 格式ljump $section, $offsetjmp far section:offsetlcall $section, $offsetcall far section:offset</p>

<p>与之相应的远程返回指令则为：<br/>
AT&amp;T 格式 Intel 格式<br/>
lret $stack_adjust  ret far stack_adjust</p>

<p>在 AT&amp;T 汇编格式中，内存操作数的寻址方式是<br/>
section:disp(base, index, scale)<br/>
而在 Intel 汇编格式中，内存操作数的寻址方式为：<br/>
section:[base + index*scale + disp]</p>

<p>由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：<br/>
disp + base + index * scale</p>

<p>下面是一些内存操作数的例子：<br/>
AT&amp;T 格式Intel 格式
<code>
    movl -4(%ebp), %eax  mov eax, [ebp - 4]
    movl array(, %eax, 4), %eax  mov eax, [eax*4 + array]
    movw array(%ebx, %eax, 4), %cx  mov cx, [ebx + 4*eax + array]
    movb $4, %fs:(%eax)  mov fs:eax, 4
</code></p>

<h4>三、Hello World!</h4>

<p>真不知道打破这个传统会带来什么样的后果，但既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 &ldquo;Hello World!&#8221;，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。</p>

<p>在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。</p>

<p>Linux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&amp;T 汇编语言格式：</p>

<p>例1. AT&amp;T 格式<br/>
&#8220;`
    hello.s
    .data # 数据段声明
    msg : .string &ldquo;Hello, world!\n&rdquo; # 要输出的字符串
    len = . - msg # 字串长度
    .text # 代码段声明
    .global _start # 指定入口函数</p>

<pre><code>_start: # 在屏幕上显示一个字符串
movl $len, %edx # 参数三：字符串长度
movl $msg, %ecx # 参数二：要显示的字符串
movl $1, %ebx # 参数一：文件描述符(stdout)
movl $4, %eax # 系统调用号(sys_write)
int $0x80 # 调用内核功能

# 退出程序
movl $0,%ebx # 参数一：退出代码
movl $1,%eax # 系统调用号(sys_exit)
int $0x80 # 调用内核功能
</code></pre>

<pre><code>初次接触到 AT&amp;T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：

例2. Intel 格式
; hello.asm
</code></pre>

<pre><code>section .data ; 数据段声明
msg db "Hello, world!", 0xA ; 要输出的字符串
len equ $ - msg ; 字串长度
section .text ; 代码段声明
global _start ; 指定入口函数
_start: ; 在屏幕上显示一个字符串
mov edx, len ; 参数三：字符串长度
mov ecx, msg ; 参数二：要显示的字符串
mov ebx, 1 ; 参数一：文件描述符(stdout)
mov eax, 4 ; 系统调用号(sys_write)
int 0x80 ; 调用内核功能
; 退出程序
mov ebx, 0 ; 参数一：退出代码
mov eax, 1 ; 系统调用号(sys_exit)
int 0x80 ; 调用内核功能
</code></pre>

<pre><code>上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。

#### 四、Linux 汇编工具

Linux 平台下的汇编工具虽然种类很多，但同 DOS/Windows 一样，最基本的仍然是汇编器、连接器和调试器。

##### 1.汇编器

汇编器（assembler）的作用是将用汇编语言编写的源程序转换成二进制形式的目标代码。Linux 平台的标准汇编器是 GAS，它是 GCC 所依赖的后台汇编工具，通常包含在 binutils 软件包中。GAS 使用标准的 AT&amp;T 汇编语法，可以用来汇编用 AT&amp;T 格式编写的程序：

    $ as -o hello.o hello.s

Linux 平台上另一个经常用到的汇编器是 NASM，它提供了很好的宏指令功能，并能够支持相当多的目标代码格式，包括 bin、a.out、coff、elf、rdf 等。NASM 采用的是人工编写的语法分析器，因而执行速度要比 GAS 快很多，更重要的是它使用的是 Intel 汇编语法，可以用来编译用 Intel 语法格式编写的汇编程序：

    $ nasm -f elf hello.asm

##### 2.链接器

由汇编器产生的目标代码是不能直接在计算机上运行的，它必须经过链接器的处理才能生成可执行代码。链接器通常用来将多个目标代码连接成一个可执行代码，这样可以先将整个程序分成几个模块来单独开发，然后才将它们组合(链接)成一个应用程序。Linux 使用 ld 作为标准的链接程序，它同样也包含在 binutils 软件包中。汇编程序在成功通过 GAS 或 NASM 的编译并生成目标代码后，就可以使用 ld 将其链接成可执行程序了：

    $ ld -s -o hello hello.o

##### 3.调试器

有人说程序不是编出来而是调出来的，足见调试在软件开发中的重要作用，在用汇编语言编写程序时尤其如此。Linux 下调试汇编代码既可以用 GDB、DDD 这类通用的调试器，也可以使用专门用来调试汇编代码的 ALD(Assembly Language Debugger)。

从调试的角度来看，使用 GAS 的好处是可以在生成的目标代码中包含符号表(symbol table)，这样就可以使用 GDB 和 DDD 来进行源码级的调试了。要在生成的可执行程序中包含符号表，可以采用下面的方式进行编译和链接：

    $ as --gstabs -o hello.o hello.s
    $ ld -o hello hello.o

执行 as 命令时带上参数 --gstabs 可以告诉汇编器在生成的目标代码中加上符号表，同时需要注意的是，在用 ld 命令进行链接时不要加上 -s 参数，否则目标代码中的符号表在链接时将被删去。

在 GDB 和 DDD 中调试汇编代码和调试 C 语言代码是一样的，你可以通过设置断点来中断程序的运行，查看变量和寄存器的当前值，并可以对代码进行单步跟踪。

#### 五、系统调用

即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。

在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。

和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。

所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_&lt;name&gt; 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：
ssize_t write(int fd, const void *buf, size_t count);

该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。

或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：
void * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);

当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。

由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点，Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。

##### 六、命令行参数

在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：

例3. 处理命令行参数
</code></pre>

<pre><code># args.s
.text
.globl _start

_start:
popl %ecx # argc
vnext:
popl %ecx # argv
test %ecx, %ecx # 空指针表明结束
jz exit
movl %ecx, %ebx
xorl %edx, %edx
strlen:
movb (%ebx), %al
inc %edx
inc %ebx
test %al, %al
jnz strlen
movb $10, -1(%ebx)
movl $4, %eax # 系统调用号(sys_write)
movl $1, %ebx # 文件描述符(stdout)
int $0x80
jmp vnext
exit:
movl $1,%eax # 系统调用号(sys_exit)
xorl %ebx, %ebx # 退出代码
int $0x80

ret
</code></pre>

<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C 语言文法 ( C Language Grammar )]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/07/23/compiler-c-grammar/"/>
    <updated>2011-07-23T13:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/07/23/compiler-c-grammar</id>
    <content type="html"><![CDATA[<pre><code>    %token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF
    %token TYPE_NAME

    %token TYPEDEF EXTERN STATIC AUTO REGISTER
    %token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
    %token STRUCT UNION ENUM

    %token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

    %start translation_unit
    %%
    translation_unit
        : external_declaration
        | translation_unit external_declaration
        ;

    external_declaration
        : function_definition
        | declaration
        ;

    function_definition
        : declaration_specifiers declarator declaration_list compound_statement
        | declaration_specifiers declarator compound_statement
        | declarator declaration_list compound_statement
        | declarator compound_statement
        ;

    declaration_list
        : declaration
        | declaration_list declaration
        ;

    declaration
        : declaration_specifiers ';'
        | declaration_specifiers init_declarator_list ';'
        ;

    declaration_specifiers
        : storage_class_specifier
        | storage_class_specifier declaration_specifiers
        | type_specifier
        | type_specifier declaration_specifiers
        | type_qualifier
        | type_qualifier declaration_specifiers
        ;

    specifier_qualifier_list
        : type_specifier specifier_qualifier_list
        | type_specifier
        | type_qualifier specifier_qualifier_list
        | type_qualifier

    type_qualifier_list
        : type_qualifier
        | type_qualifier_list type_qualifier
        ;

    type_qualifier
        : CONST
        | VOLATILE
        ;

    storage_class_specifier
        : TYPEDEF
        | EXTERN
        | STATIC
        | AUTO
        | REGISTER
        ;

    type_specifier
        : VOID
        | CHAR
        | SHORT
        | INT
        | LONG
        | FLOAT
        | DOUBLE
        | SIGNED
        | UNSIGNED
        | struct_or_union_specifier
        | enum_specifier
        | TYPE_NAME
        ;

    struct_or_union_specifier
        : struct_or_union IDENTIFIER '{' struct_declaration_list '}'
        | struct_or_union '{' struct_declaration_list '}'
        | struct_or_union IDENTIFIER
        ;

    struct_or_union
        : STRUCT
        | UNION
        ;

    struct_declaration_list
        : struct_declaration
        | struct_declaration_list struct_declaration
        ;

    struct_declaration
        : specifier_qualifier_list struct_declarator_list ';'
        ;

    struct_declarator_list
        : struct_declarator
        | struct_declarator_list ',' struct_declarator
        ;

    struct_declarator
        : declarator
        | ':' constant_expression
        | declarator ':' constant_expression
        ;

    enum_specifier
        : ENUM '{' enumerator_list '}'
        | ENUM IDENTIFIER '{' enumerator_list '}'
        | ENUM IDENTIFIER
        ;

    enumerator_list
        : enumerator
        | enumerator_list ',' enumerator
        ;

    enumerator
        : IDENTIFIER
        | IDENTIFIER '=' constant_expression
        ;       

    init_declarator_list
        : init_declarator
        | init_declarator_list ',' init_declarator
        ;       

    init_declarator
        : declarator
        | declarator '=' initializer
        ;

    initializer_list
        : initializer
        | initializer_list ',' initializer
        ;        

    initializer
        : assignment_expression
        | '{' initializer_list '}'
        | '{' initializer_list ',' '}'
        ;

    parameter_type_list
        : parameter_list
        | parameter_list ',' '...'
        ;

    parameter_list
        : parameter_declaration
        | parameter_list ',' parameter_declaration

    parameter_declaration
        : declaration_specifiers declarator
        | declaration_specifiers abstract_declarator
        | declaration_specifiers
        ;

    identifier_list
        : IDENTIFIER
        | identifier_list ',' IDENTIFIER
        ;

    type_name
        : specifier_qualifier_list
        | specifier_qualifier_list abstract_declarator
        ;

    abstract_declarator
        : pointer
        | direct_abstract_declarator
        | pointer direct_abstract_declarator
        ;

    direct_abstract_declarator
        : '(' abstract_declarator ')'
        | '[' ']'
        | '[' constant_expression ']'
        | direct_abstract_declarator '[' ']'
        | direct_abstract_declarator '[' constant_expression ']'
        | '(' ')'
        | '(' parameter_type_list ')'
        | direct_abstract_declarator '(' ')'
        | direct_abstract_declarator '(' parameter_type_list ')'
        ;

    declarator
        : pointer direct_declarator
        | direct_declarator
        ;

    direct_declarator
        : IDENTIFIER
        | '(' declarator ')'
        | direct_declarator '[' constant_expression ']'
        | direct_declarator '[' ']'
        | direct_declarator '(' parameter_type_list ')'
        | direct_declarator '(' identifier_list ')'
        | direct_declarator '(' ')'
        ;

    pointer
        : '*'
        | '*' type_qualifier_list
        | '*' pointer
        | '*' type_qualifier_list pointer
        ;        

    statement
        : labeled_statement
        | compound_statement
        | expression_statement
        | selection_statement
        | iteration_statement
        | jump_statement
        ;

    labeled_statement
        : IDENTIFIER ':' statement
        | CASE constant_expression ':' statement
        | DEFAULT ':' statement
        ;

    compound_statement
        : '{' '}'
        | '{' statement_list '}'
        | '{' declaration_list '}'
        | '{' declaration_list statement_list '}'
        ;        

    statement_list
        : statement
        | statement_list statement
        ;

    expression_statement
        : ';'
        | expression ';'
        ;

    selection_statement
        : IF '(' expression ')' statement
        | IF '(' expression ')' statement ELSE statement
        | SWITCH '(' expression ')' statement
        ;

    iteration_statement
        : WHILE '(' expression ')' statement
        | DO statement WHILE '(' expression ')' ';'
        | FOR '(' expression_statement expression_statement ')' statement
        | FOR '(' expression_statement expression_statement expression ')' statement
        ;

    jump_statement
        : GOTO IDENTIFIER ';'
        | CONTINUE ';'
        | BREAK ';'
        | RETURN ';'
        | RETURN expression ';'
        ;        

    expression
        : assignment_expression
        | expression ',' assignment_expression
        ;

    assignment_expression
        : conditional_expression
        | unary_expression assignment_operator assignment_expression
        ;

    assignment_operator
        : '='
        | '*='
        | '/='
        | '%='
        | '+='
        | '-='
        | '&lt;&lt;='
        | '&gt;&gt;='
        | '&amp;='
        | '^='
        | '|='
        ;

    constant_expression
        : conditional_expression
        ;

    conditional_expression
        : logical_or_expression
        | logical_or_expression '?' expression ':' conditional_expression
        ;

    logical_or_expression
        : logical_and_expression
        | logical_or_expression '||' logical_and_expression
        ;

    logical_and_expression
        : inclusive_or_expression
        | logical_and_expression '&amp;&amp;' inclusive_or_expression
        ;

    inclusive_or_expression
        : exclusive_or_expression
        | inclusive_or_expression '|' exclusive_or_expression
        ;

    exclusive_or_expression
        : and_expression
        | exclusive_or_expression '^' and_expression
        ;

    and_expression
        : equality_expression
        | and_expression '&amp;' equality_expression
        ;

    equality_expression
        : relational_expression
        | equality_expression '==' relational_expression
        | equality_expression '!=' relational_expression
        ;

    relational_expression
        : shift_expression
        | relational_expression '&lt;' shift_expression
        | relational_expression '&gt;' shift_expression
        | relational_expression '&lt;=' shift_expression
        | relational_expression '&gt;=' shift_expression
        ;

    shift_expression
        : additive_expression
        | shift_expression '&lt;&lt;' additive_expression
        | shift_expression '&gt;&gt;' additive_expression
        ;

    additive_expression
        : multiplicative_expression
        | additive_expression '+' multiplicative_expression
        | additive_expression '-' multiplicative_expression
        ;

    multiplicative_expression
        : cast_expression
        | multiplicative_expression '*' cast_expression
        | multiplicative_expression '/' cast_expression
        | multiplicative_expression '%' cast_expression
        ;

    cast_expression
        : unary_expression
        | '(' type_name ')' cast_expression
        ;

    unary_expression
        : postfix_expression
        | '++' unary_expression
        | '--' unary_expression
        | unary_operator cast_expression
        | SIZEOF unary_expression
        | SIZEOF '(' type_name ')'
        ;

    unary_operator
        : '&amp;'
        | '*'
        | '+'
        | '-'
        | '~'
        | '!'
        ;

    argument_expression_list
        : assignment_expression
        | argument_expression_list ',' assignment_expression
        ;

    postfix_expression
        : primary_expression
        | postfix_expression '[' expression ']'
        | postfix_expression '(' ')'
        | postfix_expression '(' argument_expression_list ')'
        | postfix_expression '.' IDENTIFIER
        | postfix_expression '-&gt;' IDENTIFIER
        | postfix_expression '++'
        | postfix_expression '--'
        ;

    primary_expression
        : IDENTIFIER
        | CONSTANT
        | STRING_LITERAL
        | '(' expression ')'
        ;
    %%
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平衡二叉树]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/04/10/alg-avltree-base/"/>
    <updated>2011-04-10T11:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/04/10/alg-avltree-base</id>
    <content type="html"><![CDATA[<pre><code>/**
 * 平衡二叉搜索（排序）树
 *
 * 平衡二叉搜索树双称为AVL树，它也是一棵二叉搜索树，是对二叉搜索树的一种改进，或都是具有下列性质的二叉树：它
 * 的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。
 *
 * 平衡因子（Balance Factor,BF）定义为该节点的左子树的深度减去其右子树的深度，则平衡二叉树上所有节点的平
 * 衡因子只可能是-1、0和1。只要树上有一个节点的平衡因子的绝对值大于1，则该二叉树就是不平衡的了。
 *
 * 使用二叉排序树保持平衡的基本思想是：每当在二叉排序树中插入一个节点时，首先检查是否因插入而破坏了平衡，若
 * 是，则找出其中的最小不平衡二叉树，在保持二叉排序树特性的情况下，调整最小不平衡子s树中节点之间的关系，以达
 * 到新的平衡。所谓最小不平衡子树指离插入节点最近且以平衡因子的绝对值大于1的节点作为根的子树。
 *
 * 对于平衡二叉搜索树，保持树的平衡的基本机制就是旋转。旋转是对树的元素顺序进行调节。旋转的目的是消除由于临
 * 时插入和删除对树的平衡产生的影响。
 *
 * 有四种旋转：
 * 1)绕某元素左旋转
 *          80 ← p               90
 *         / \                   / \
 *        60 90 ← r    →         80   120
 *           /\                /\    /
 *         85 120            60 85 100
 *            /
 *          100
 *            
 * 2)绕某元素右旋转
 *      p → 100                      85
 *           /\                      / \
 *     l → 85 120          →         60   100
 *         /\                       \    /\
 *        60 90                     80  90 120
 *         \
 *         80
 *
 * 3)绕某元素的左子节点左旋转，接着再绕该元素自己右旋转。此情况下就是 左旋与右旋 的结合，具体操作时可以分
 * 解成这两种操作，只是围绕点不一样而已
 *
 * 先绕100的左子节点80左旋转，接着再绕100左旋转
 *
 *                左旋                 右旋
 *         100     →     p → 100        →         90
 *         /\                /\                 /\
 *   p → 80 120        l → 90 120            80 100
 *       /\                /                  /\   \
 *     60 90 ← r         80                 60 85  120
 *        /              / \
 *       85             60 85
 *        
 * 4)绕某元素的右子节点右旋转，接着再绕该元素自己左旋转。此情况下就是 右旋与左旋 的结合，具体操作时可以分解
 * 成这两种操作，只是围绕点不一样而已
 *
 * 先绕80的右子节点80右旋转，接着再绕80左旋转
 *                     右旋             左旋
 *          80          →      80 ← p     →       85
 *          /\                /\               /\
 *        60 100 ← p        60 85 ← r        80 100
 *           /\                  \           /    /\
 *     l → 85 120                100        60  90 120
 *          \                     /\
 *           90                 90 120
 *           
 * 平衡二叉树实现类 AVLTree 中的很多方法与排序二叉树是一新的，详细请参考 BinSearchTree 类中相应方法
 *
 * AVLTree中的Entry对象与BinSearchTree中的Entry对象是有区别的，所以AVLTree类不能是BinSearchTree的
 * 了类，虽然很多的方法是一样的（如：contains、getEntry、successor、iterator），还有一些方法（add、de
 * leteEntry）只是在操作后增加了节点平衡因子调整动作，但不能直接继承于它。
 *
 * 二叉搜索树与平衡二叉搜索树没有在Java集合框架中实现，但RED-BLACK树在TreeMap实现过，当然TreeSet也是，
 * 因为它是基于TreeMap实现的，TreeSet对象基本上就是一个忽略了每个元素值部分的TreeMap对象。
 *
 */
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[划分树--查询区间k-th number]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/03/23/alg-ds-div-tree/"/>
    <updated>2011-03-23T23:10:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/03/23/alg-ds-div-tree</id>
    <content type="html"><![CDATA[<h4>划分树 &ndash; 查询区间 k-th number</h4>

<p><a href="http://poj.org/problem?id=2104">http://poj.org/problem?id=2104</a><br/>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2665">http://acm.hdu.edu.cn/showproblem.php?pid=2665</a><br/>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3727">http://acm.hdu.edu.cn/showproblem.php?pid=3727</a><br/>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3473">http://acm.hdu.edu.cn/showproblem.php?pid=3473</a></p>

<pre><code>tr[ log(N) ][ N ]
1. 先对原来的数 稳定排序 ，tr[0][i] = 原先的数 a[i] 在排序后的位置。
2. dep = 0; s = 1; t = n;
3. 递归建树 
build_tree(dep, s, t)
{
    if(s &gt;= t) return;
    mid = (s+t)/2;  j = s;  k = mid+1;
    for(i=s;i&lt;=t;i++) if( tr[dep][i] &lt;= mid )  tr[dep+1][j++] = tr[dep][i]; else tr[dep+1][k++] = tr[dep][i];
    //  把s 到 t 一分为二， s 到 t 的每个数 如果排序后它排在该区间的前半部分就移到下一层的前半部。
    //  如果要计算小于和大于 k-th number 的数的和要多算 sum[dep][x] 即 dep+1 层中 s 到 x(x&lt;=mid) 的和 或 mid+1 到 x(x&gt;mid) 的和。
    tr[dep][i] = j-1;  // s 到 t 区间， tr[dep][i] 记录 s 到 i 分到前半部分的最后位置
    build_tree(dep+1, s, mid);  build_tree(dep+1, mid+1, t);
}
4. 查找区间 [i,j] 中的 k-th number ，其中 1&lt;=k&lt;=j-i+1;
find_tree(dep, s, t, i, j, k)
{
    if(s == t) return s;
    v = i 到 j 中分到左边的数
    if(v &gt;= k) return find_tree(dep+1, s, mid, ci, cj, k); // ci, cj 对应 i, j 分到前半部分的位置。 分到右半部分的和加到大于k-th number 上
    else    return find_tree(dep+1, mid+1, t, ci, cj, k-v); // 分到左半部分的和加到小于k-th number 上
 }

时间复杂度 O( n*log(n) 预处理， log(n) 查询 ) ，空间大小 n*log(n)

序列 ： 2 5 9 8 4 3 1
排序后  1 2 3 4 5 8 9
所以 原序列对应的最终位置为 2 5 7 6 4 3 1

        按最终位置分                                   指向分到前半部分的最后位置
tr[0][] = 2 5 7 6 4 3 1                        处理后 tr[0][] = 1 1 1 1 2 3 4
tr[1][] = 2 4 3 1 || 5 7 6                            tr[1][] = 1 1 1 2 || 5 5 6
tr[2][] = 2 1 || 4 3 || 5 6 || 7                      tr[2][] = 0 1 || 2 3 || 5 5 || 7
tr[3][] = 1 || 2 || 3 || 4 || 5 || 6   
</code></pre>
]]></content>
  </entry>
  
</feed>
