<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~sched | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~sched/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-03-19T18:36:29+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux进程调度之FIFO和RR调度策略]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/03/13/kernel-sched-rt/"/>
    <updated>2015-03-13T00:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/03/13/kernel-sched-rt</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-24774106-id-3379478.html">http://blog.chinaunix.net/uid-24774106-id-3379478.html</a></p>

<p>严格地说，对于优先级对于实时进程和普通进程的意义是不一样的。</p>

<p>1、在一定程度上，实时进程优先级高，实时进程存在，就没有普通进程占用CPU的机会，（但是前一篇博文也讲过了，实时组调度出现在内核以后，允许普通进程占用少量的CPU时间,取决于配置)。</p>

<p>2、对于实时进程而言，高优先级的进程存在，低优先级的进程是轮不上的，没机会跑在CPU上，所谓实时进程的调度策略,指的是相同优先级之间的调度策略。如果是FIFO实时进程在占用CPU，除非出现以下事情，否则FIFO一条道跑到黑。<br/>
  a）FIFO进程良心发现，调用了系统调用sched_yield 自愿让出CPU<br/>
  b) 更高优先级的进程横空出世，抢占FIFO进程的CPU。有些人觉得很奇怪，怎么FIFO占着CPU，为啥还能有更高优先级的进程出现呢。别忘记，我们是多核多CPU ,如果其他CPU上出现了一个比FIFO优先级高的进程，可能会push到FIFO进程所在的CPU上。<br/>
  c) FIFO进程停止（TASK_STOPPED or TASK_TRACED状态）或者被杀死（EXIT_ZOMBIE or EXIT_DEAD状态）<br/>
  d) FIFO进程执行了阻塞调用并进入睡眠（TASK_INTERRUPTIBLE OR TASK_UNINTERRUPTIBLE）。</p>

<p>  如果是进程的调度策略是时间片轮转RR，那么，除了前面提到的abcd，RR实时进程耗尽自己的时间片后，自动退到对应优先级实时队列的队尾，重新调度。</p>

<pre><code>    struct sched_param {
        /* ... */
        int sched_priority;
        /* ... */
    };
    int sched_setscheduler (pid_t pid,
                            int policy,
                            const struct sched_param *sp);
</code></pre>

<p>  sched_setscheduler函数的第二个参数调度方法 ：
<code>
    #define SCHED_OTHER 0
    #define SCHED_FIFO 1
    #define SCHED_RR 2
    #ifdef __USE_GNU
    # define SCHED_BATCH 3
    #endif
</code>
  SCHED_OTHER表示普通进程，对于普通进程，第三个参数sp->sched_priority只能是0<br/>
  SCHED_FIFO 和SCHED_RR表示实时进程的调度策略，第三个参数的取值范围为[1,99]。<br/>
  如果sched_setscheduler 优先级设置的值和调度策略不符合的话，会返回失败的。</p>

<p>应用层和内核层的优先级含义是不同的：<br/>
  首先说实时进程：实时进程的优先级设置可以通过sched_setsheduler设置，也可以通过sched_setparam设置优先级的大小。
int sched_setparam (pid_t pid, const struct sched_param *sp);</p>

<p>  在用户层或者应用层，1表示优先级最低，99表示优先级最高。但是在内核中，[0,99]表示的实时进程的优先级，0最高，99最低。[100,139]是普通进程折腾的范围。应用层比较天真率直，就看大小，数字大，则优先级高。ps查看进程的优先级也是如此。有意思的是，应用层实时进程最高优先级的99，在ps看进程优先级的时候，输出的是139.</p>

<p>  对于普通进程，是通过nice系统调用来调整优先级的。从内核角度讲[100,139]是普通进程的优先级的范围，100最高，139最低，默认是120。普通进程的优先级的作用和实时进程不同，普通进程优先级表示的是占的CPU时间。深入linux内核架构中提到，普通优先级越高（100最高，139最低），享受的CPU time越多，相邻的两个优先级，高一级的进程比低一级的进程多占用10%的CPU，比如内核优先级数值为120的进程要比数值是121的进程多占用10%的CPU。</p>

<p>  内核中有一个数组：prio_to_weight[20]表示的是默认优先级120的权重，数值为1024，prio_to_weight[21]表示nice值为1，优先级为121的进程的权重，数值为820。这就到了CFS的原理了
<code>
    static const int prio_to_weight[40] = {
     /* -20 */ 88761, 71755, 56483, 46273, 36291,
     /* -15 */ 29154, 23254, 18705, 14949, 11916,
     /* -10 */ 9548, 7620, 6100, 4904, 3906,
     /* -5 */ 3121, 2501, 1991, 1586, 1277,
     /* 0 */ 1024, 820, 655, 526, 423,
     /* 5 */ 335, 272, 215, 172, 137,
     /* 10 */ 110, 87, 70, 56, 45,
     /* 15 */ 36, 29, 23, 18, 15,
    };
</code>
  假如有1台电脑，10个人玩，怎么才公平。<br/>
  1 约定好时间片，每人玩1小时，玩完后记账，张XX 1小时，谁玩的时间短，谁去玩<br/>
  2 引入优先级的概念，李四有紧急情况，需要提高他玩电脑的时间，怎么办，玩1个小时，记账半小时，那么同等情况下，李四会比其他人被选中玩电脑的频率要高，就体现了这个优先级的概念。<br/>
  3  王五也有紧急情况，但是以考察，不如李四的紧急，好吧，玩1个小时，记账45分钟。<br/>
  4  情况有变化，听说这里有电脑，突然又来了10个人，如果按照每人玩1小时的时间片，排在最后的那哥们早就开始骂人了，怎么办？时间片动态变化，根据人数来确定时间片。人越多，每个人玩的时间越少，防止哥们老捞不着玩，耐心耗尽，开始骂人。</p>

<p>  这个记账就是我们prio_to_weight的作用。我就不多说了，prio_to_weight[20]就是基准，玩一小时，记账一小时，数组20以前的值是特权一级，玩1小时记账20分钟之类的享有特权的，数组20之后是倒霉蛋，玩1小时，记账1.5小时之类的倒霉蛋。 CFS这种调度好在大家都能捞着玩。</p>

<p>对于FIFO而言，一旦sleep过后，高优先级运行，低优先级是没戏运行的，同等优先级的进程，先运行的不运行完，后运行的也没戏。<br/>
对于RR而言，高优先级的先运行，同等优先级的进程过家家，你玩完，我玩，我玩完你再玩，每个进程耗费一个时间片的时间。对于Linux，RR时间片是100ms：
<code>
    #define DEF_TIMESLICE        (100 * HZ / 1000)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux内核中异步通知机制--信号处理机制]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-signal/"/>
    <updated>2015-02-11T15:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-signal</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/yusiguyuan/article/details/23168363">http://blog.csdn.net/yusiguyuan/article/details/23168363</a></p>

<p>  什么是异步通知：很简单，一旦设备准备好，就主动通知应用程序，这种情况下应用程序就不需要查询设备状态， 特像硬件上常提的“中断的概念”。 比较准确的说法其实应该叫做“信号驱动的异步I/O”,信号是在软件层次上对中断机制的一种模拟。阻塞I/O意味着一直等待设备可访问再访问，非阻塞I/O意味着使用poll()来查询是否可访问，而异步通知则意味着设备通知应用程序自身可访问。（希望用这么一句话能表达我的意思）</p>

<h4>一、系统中存在的异步机制</h4>

<p>  我认为异步机制是一种理念，并不是某一种具体实现，同步/异步的核心理解应该是如何获取消息的问题，你自身（在计算机中当然是进程本身了）亲自去获取消息，那么就是同步机制，但是如果别人使用某种方式通知你某一个消息，那么你采用的就是异步机制。内核中使用到异步机制的大概有：信号，这是一种进程间通信的异步机制；epoll，这是一种高效处理IO的异步通信机制。也就是从通信和IO两个方面通过不同的方式使用了异步机制。（可能还有别的，暂时不知道）</p>

<p>下面进入正题：</p>

<h4>二、信号的基本概念</h4>

<h5>1）信号的本质</h5>

<p>  软中断信号（signal，又简称为信号）用来通知进程发生了异步事件。在软件层次上是对中断机制的一种模拟，在原理上，一个进程收到一个信号与处理器收到一个中断请求可以说是一样的。信号是进程间通信机制中唯一的异步通信机制，一个进程不必通过任何操作来等待信号的到达，事实上，进程也不知道信号到底什么时候到达。进程之间可以互相通过系统调用kill发送软中断信号。内核也可以因为内部事件而给进程发送信号，通知进程发生了某个事件。信号机制除了基本通知功能外，还可以传递附加信息。</p>

<p>收到信号的进程对各种信号有不同的处理方法。处理方法可以分为三类：<br/>
第一种是类似中断的处理程序，对于需要处理的信号，进程可以指定处理函数，由该函数来处理。<br/>
第二种方法是，忽略某个信号，对该信号不做任何处理，就象未发生过一样。<br/>
第三种方法是，对该信号的处理保留系统的默认值，这种缺省操作，对大部分的信号的缺省操作是使得进程终止。进程通过系统调用signal来指定进程对某个信号的处理行为。</p>

<p>  在进程表的表项中有一个软中断信号域，该域中每一位对应一个信号，当有信号发送给进程时，对应位置位。由此可以看出，进程对不同的信号可以同时保留，但对于同一个信号，进程并不知道在处理之前来过多少个。</p>

<h5>2）信号的种类</h5>

<p>可以从两个不同的分类角度对信号进行分类：<br/>
可靠性方面：可靠信号与不可靠信号；<br/>
与时间的关系上：实时信号与非实时信号。</p>

<h5>3）可靠信号与不可靠信号</h5>

<p>  Linux信号机制基本上是从Unix系统中继承过来的。早期Unix系统中的信号机制比较简单和原始，信号值小于SIGRTMIN的信号都是不可靠信号。这就是"不可靠信号"的来源。它的主要问题是信号可能丢失。</p>

<p>  随着时间的发展，实践证明了有必要对信号的原始机制加以改进和扩充。由于原来定义的信号已有许多应用，不好再做改动，最终只好又新增加了一些信号，并在一开始就把它们定义为可靠信号，这些信号支持排队，不会丢失。</p>

<p>  信号值位于SIGRTMIN和SIGRTMAX之间的信号都是可靠信号，可靠信号克服了信号可能丢失的问题。Linux在支持新版本的信号安装函数sigation()以及信号发送函数sigqueue()的同时，仍然支持早期的signal()信号安装函数，支持信号发送函数kill()。</p>

<p>信号的可靠与不可靠只与信号值有关，与信号的发送及安装函数无关。目前linux中的signal()是通过sigation()函数实现的，因此，即使通过signal()安装的信号，在信号处理函数的结尾也不必再调用一次信号安装函数。同时，由signal()安装的实时信号支持排队，同样不会丢失。</p>

<p>  对于目前linux的两个信号安装函数：signal()及sigaction()来说，它们都不能把SIGRTMIN以前的信号变成可靠信号（都不支持排队，仍有可能丢失，仍然是不可靠信号），而且对SIGRTMIN以后的信号都支持排队。这两个函数的最大区别在于，经过sigaction安装的信号都能传递信息给信号处理函数，而经过signal安装的信号不能向信号处理函数传递信息。对于信号发送函数来说也是一样的。</p>

<h5>4）实时信号与非实时信号</h5>

<p>  早期Unix系统只定义了32种信号，前32种信号已经有了预定义值，每个信号有了确定的用途及含义，并且每种信号都有各自的缺省动作。如按键盘的CTRL ^C时，会产生SIGINT信号，对该信号的默认反应就是进程终止。后32个信号表示实时信号，等同于前面阐述的可靠信号。这保证了发送的多个实时信号都被接收。</p>

<p>非实时信号都不支持排队，都是不可靠信号；实时信号都支持排队，都是可靠信号。</p>

<h5>5)linux 下信号的生命周期如下：</h5>

<p>  在目的进程中安装该信号。即是设置捕获该信号时进程进程该执行的操作码。采用signal（）;sigaction（）系统调用来实现。<br/>
  信号被某个进程产生，同时设置该信号的目的进程（使用pid），之后交给操作系统进行管理。采用kill()、arise()、alarm()等系统调用来实现。<br/>
  信号在目的进程被注册。信号被添加进进程的PCB（task_struct）中相关的数据结构里——未决信号的数据成员。信号在进程中注册就是把信号值加入到进程的未决信号集里。并且，信号携带的其他信息被保留到未决信的队列的某个sigqueue结构中。<br/>
  信号在进程中注销。在执行信号处理函数前，要把信号在进程中注销。对于非实时信号（不可靠信号），其在信号未决信号信息链中最多只有一个sigqueue结构，因此该结构被释放后，相应的信号要在未决信号集删除。而实时信号（可靠信号），如果有多个sigqueue，则不会把信号从进程的未决信号集中删除。<br/>
  信号生命的终结。进程终止当前的工作，保护上下文，执行信号处理函数，之后回复。如果内核是可抢占的，那么还需要调度。</p>

<h4>三、信 号 机 制</h4>

<p>  上 一节中介绍了信号的基本概念，在这一节中，我们将介绍内核如何实现信号机制。即内核如何向一个进程发送信号、进程如何接收一个信号、进程怎样控制自己对信 号的反应、内核在什么时机处理和怎样处理进程收到的信号。还要介绍一下setjmp和longjmp在信号中起到的作用。</p>

<h5>1、内核对信号的基本处理方法</h5>

<p>  内核给一个进程发送软中断信号的方法，是在进程所在的进程表项的信号域设置对应于该信号的位。这里要补充的是，如果信号发送给一个正在睡眠的进程，那么要看 该进程进入睡眠的优先级，如果进程睡眠在可被中断的优先级上，则唤醒进程；否则仅设置进程表中信号域相应的位，而不唤醒进程。这一点比较重要，因为进程检 查是否收到信号的时机是：一个进程在即将从内核态返回到用户态时；或者，在一个进程要进入或离开一个适当的低调度优先级睡眠状态时。</p>

<p>进程的task_struct结构中有关于本进程中未决信号的数据成员：struct sigpending pending：
<code>
    struct sigpending{
        struct sigqueue *head, *tail;
        sigset_t signal;
    };
</code>
第三个成员是进程中所有未决信号集，第一、第二个成员分别指向一个sigqueue类型的结构链（称之为"未决信号信息链"）的首尾，信息链中的每个sigqueue结构刻画一个特定信号所携带的信息，并指向下一个sigqueue结构:
<code>
    struct sigqueue{
        struct sigqueue *next;
        siginfo_t info;
    }
</code>
信号在进程中注册指的就是信号值加入到进程的未决信号集sigset_t signal（每个信号占用一位）中，并且信号所携带的信息被保留到未决信号信息链的某个sigqueue结构中。只要信号在进程的未决信号集中，表明进程已经知道这些信号的存在，但还没来得及处理，或者该信号被进程阻塞。</p>

<p>当一个实时信号发送给一个进程时，不管该信号是否已经在进程中注册，都会被再注册一次，因此，信号不会丢失，因此，实时信号又叫做"可靠信号"。这意味着同一个实时信号可以在同一个进程的未决信号信息链中占有多个sigqueue结构（进程每收到一个实时信号，都会为它分配一个结构来登记该信号信息，并把该结构添加在未决信号链尾，即所有诞生的实时信号都会在目标进程中注册）。</p>

<p>当一个非实时信号发送给一个进程时，如果该信号已经在进程中注册（通过sigset_t signal指示），则该信号将被丢弃，造成信号丢失。因此，非实时信号又叫做"不可靠信号"。这意味着同一个非实时信号在进程的未决信号信息链中，至多占有一个sigqueue结构。</p>

<p>总之信号注册与否，与发送信号的函数（如kill()或sigqueue()等）以及信号安装函数（signal()及sigaction()）无关，只与信号值有关（信号值小于SIGRTMIN的信号最多只注册一次，信号值在SIGRTMIN及SIGRTMAX之间的信号，只要被进程接收到就被注册）</p>

<p>内核处理一个进程收到的信号的时机是在一个进程从内核态返回用户态时。所以，当一个进程在内核态下运行时，软中断信号并不立即起作用，要等到将返回用户态时才处理。进程只有处理完信号才会返回用户态，进程在用户态下不会有未处理完的信号。</p>

<p>内核处理一个进程收到的软中断信号是在该进程的上下文中，因此，进程必须处于运行状态。前面介绍概念的时候讲过，处理信号有三种类型：进程接收到信号后退 出；进程忽略该信号；进程收到信号后执行用户设定用系统调用signal的函数。当进程接收到一个它忽略的信号时，进程丢弃该信号，就象没有收到该信号似 的继续运行。如果进程收到一个要捕捉的信号，那么进程从内核态返回用户态时执行用户定义的函数。而且执行用户定义的函数的方法很巧妙，内核是在用户栈上创 建一个新的层，该层中将返回地址的值设置成用户定义的处理函数的地址，这样进程从内核返回弹出栈顶时就返回到用户定义的函数处，从函数返回再弹出栈顶时， 才返回原先进入内核的地方。这样做的原因是用户定义的处理函数不能且不允许在内核态下执行（如果用户定义的函数在内核态下运行的话，用户就可以获得任何权 限）。</p>

<p>对于非实时信号来说，由于在未决信号信息链中最多只占用一个sigqueue结构，因此该结构被释放后，应该把信号在进程未决信号集中删除（信号注销完毕）；而对于实时信号来说，可能在未决信号信息链中占用多个sigqueue结构，因此应该针对占用sigqueue结构的数目区别对待：如果只占用一个sigqueue结构（进程只收到该信号一次），则执行完相应的处理函数后应该把信号在进程的未决信号集中删除（信号注销完毕）。否则待该信号的所有sigqueue处理完毕后再在进程的未决信号集中删除该信号。</p>

<p>当所有未被屏蔽的信号都处理完毕后，即可返回用户空间。对于被屏蔽的信号，当取消屏蔽后，在返回到用户空间时会再次执行上述检查处理的一套流程。</p>

<h6>在信号的处理方法中有几点特别要引起注意。</h6>

<p>第一，在一些系统中，当一个进程处理完中断信号返回用户态之前，内核清除用户区中设 定的对该信号的处理例程的地址，即下一次进程对该信号的处理方法又改为默认值，除非在下一次信号到来之前再次使用signal系统调用。这可能会使得进程 在调用signal之前又得到该信号而导致退出。在BSD中，内核不再清除该地址。但不清除该地址可能使得进程因为过多过快的得到某个信号而导致堆栈溢 出。为了避免出现上述情况。在BSD系统中，内核模拟了对硬件中断的处理方法，即在处理某个中断时，阻止接收新的该类中断。</p>

<p>第二个要 引起注意的是，如果要捕捉的信号发生于进程正在一个系统调用中时，并且该进程睡眠在可中断的优先级上，这时该信号引起进程作一次longjmp，跳出睡眠 状态，返回用户态并执行信号处理例程。当从信号处理例程返回时，进程就象从系统调用返回一样，但返回了一个错误代码，指出该次系统调用曾经被中断。这要注 意的是，BSD系统中内核可以自动地重新开始系统调用。</p>

<p>第三个要注意的地方：若进程睡眠在可中断的优先级上，则当它收到一个要忽略的信号时，该进程被唤醒，但不做longjmp，一般是继续睡眠。但用户感觉不到进程曾经被唤醒，而是象没有发生过该信号一样。</p>

<p>第四个要注意的地方：内核对子进程终止（SIGCLD）信号的处理方法与其他信号有所区别。当进程检查出收到了一个子进程终止的信号时，缺省情况下，该进程 就象没有收到该信号似的，如果父进程执行了系统调用wait，进程将从系统调用wait中醒来并返回wait调用，执行一系列wait调用的后续操作（找 出僵死的子进程，释放子进程的进程表项），然后从wait中返回。SIGCLD信号的作用是唤醒一个睡眠在可被中断优先级上的进程。如果该进程捕捉了这个 信号，就象普通信号处理一样转到处理例程。如果进程忽略该信号，那么系统调用wait的动作就有所不同，因为SIGCLD的作用仅仅是唤醒一个睡眠在可被 中断优先级上的进程，那么执行wait调用的父进程被唤醒继续执行wait调用的后续操作，然后等待其他的子进程。</p>

<p> 如果一个进程调用signal系统调用，并设置了SIGCLD的处理方法，并且该进程有子进程处于僵死状态，则内核将向该进程发一个SIGCLD信号。</p>

<h5>2、setjmp和longjmp的作用</h5>

<p>  前面在介绍信号处理机制时，多次提到了setjmp和longjmp，但没有仔细说明它们的作用和实现方法。这里就此作一个简单的介绍。 <br/>
  在 介绍信号的时候，我们看到多个地方要求进程在检查收到信号后，从原来的系统调用中直接返回，而不是等到该调用完成。这种进程突然改变其上下文的情况，就是 使用setjmp和longjmp的结果。setjmp将保存的上下文存入用户区，并继续在旧的上下文中执行。这就是说，进程执行一个系统调用，当因为资 源或其他原因要去睡眠时，内核为进程作了一次setjmp，如果在睡眠中被信号唤醒，进程不能再进入睡眠时，内核为进程调用longjmp，该操作是内核 为进程将原先setjmp调用保存在进程用户区的上下文恢复成现在的上下文，这样就使得进程可以恢复等待资源前的状态，而且内核为setjmp返回1，使 得进程知道该次系统调用失败。这就是它们的作用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核CPU负载均衡机制]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-balance/"/>
    <updated>2015-02-11T14:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-balance</id>
    <content type="html"><![CDATA[<p><a href="http://www.oenhan.com/cpu-load-balance">http://www.oenhan.com/cpu-load-balance</a></p>

<p> 还是神奇的进程调度问题引发的，参看Linux进程组调度机制分析，组调度机制是看清楚了，发现在重启过程中，很多内核调用栈阻塞在了double_rq_lock函数上，而double_rq_lock则是load_balance触发的，怀疑当时的核间调度出现了问题，在某个负责场景下产生了多核互锁，后面看了一下CPU负载平衡下的代码实现，写一下总结。</p>

<p>内核代码版本：kernel-3.0.13-0.27。</p>

<p>内核代码函数起自load_balance函数,从load_balance函数看引用它的函数可以一直找到schedule函数这里，便从这里开始往下看，在__schedule中有下面一句话。
<code>
    if (unlikely(!rq-&gt;nr_running))
        idle_balance(cpu, rq);
</code>
从上面可以看出什么时候内核会尝试进行CPU负载平衡：即当前CPU运行队列为NULL的时候。</p>

<p>CPU负载平衡有两种方式：pull和push，即空闲CPU从其他忙的CPU队列中拉一个进程到当前CPU队列；或者忙的CPU队列将一个进程推送到空闲的CPU队列中。idle_balance干的则是pull的事情，具体push下面会提到。</p>

<p>在idle_balance里面，有一个proc阀门控制当前CPU是否pull:
<code>
    if (this_rq-&gt;avg_idle &lt; sysctl_sched_migration_cost)
        return;
</code>
sysctl_sched_migration_cost对应proc控制文件是/proc/sys/kernel/sched_migration_cost，开关代表如果CPU队列空闲了500ms（sysctl_sched_migration_cost默认值）以上，则进行pull，否则则返回。</p>

<p>for_each_domain(this_cpu, sd) 则是遍历当前CPU所在的调度域，可以直观的理解成一个CPU组，类似task_group，核间平衡指组内的平衡。负载平衡有一个矛盾就是：负载平衡的频度和CPU cache的命中率是矛盾的，CPU调度域就是将各个CPU分成层次不同的组，低层次搞定的平衡就绝不上升到高层次处理，避免影响cache的命中率。</p>

<p>图例如下;</p>

<p><img src="/images/kernel/2015-02-11-1.jpg" alt="" /></p>

<p>最终通过load_balance进入正题。</p>

<p>首先通过find_busiest_group获取当前调度域中的最忙的调度组，首先update_sd_lb_stats更新sd的状态，也就是遍历对应的sd，将sds里面的结构体数据填满，如下：
```
    struct sd_lb_stats {
        struct sched_group <em>busiest; /</em> Busiest group in this sd <em>/
        struct sched_group </em>this;  /<em> Local group in this sd </em>/
        unsigned long total_load;  /<em> Total load of all groups in sd </em>/
        unsigned long total_pwr;   /<em>   Total power of all groups in sd </em>/
        unsigned long avg_load;    /<em> Average load across all groups in sd </em>/</p>

<pre><code>    /** Statistics of this group */
    unsigned long this_load; //当前调度组的负载
    unsigned long this_load_per_task; //当前调度组的平均负载
    unsigned long this_nr_running; //当前调度组内运行队列中进程的总数
    unsigned long this_has_capacity;
    unsigned int  this_idle_cpus;

    /* Statistics of the busiest group */
    unsigned int  busiest_idle_cpus;
    unsigned long max_load; //最忙的组的负载量
    unsigned long busiest_load_per_task; //最忙的组中平均每个任务的负载量
    unsigned long busiest_nr_running; //最忙的组中所有运行队列中进程的个数
    unsigned long busiest_group_capacity;
    unsigned long busiest_has_capacity;
    unsigned int  busiest_group_weight;
</code></pre>

<pre><code></code></pre>

<pre><code>do
{
    local_group = cpumask_test_cpu(this_cpu, sched_group_cpus(sg));
    if (local_group) {
                  //如果是当前CPU上的group，则进行赋值
        sds-&gt;this_load = sgs.avg_load;
        sds-&gt;this = sg;
        sds-&gt;this_nr_running = sgs.sum_nr_running;
        sds-&gt;this_load_per_task = sgs.sum_weighted_load;
        sds-&gt;this_has_capacity = sgs.group_has_capacity;
        sds-&gt;this_idle_cpus = sgs.idle_cpus;
    } else if (update_sd_pick_busiest(sd, sds, sg, &amp;sgs, this_cpu)) {
                 //在update_sd_pick_busiest判断当前sgs的是否超过了之前的最大值，如果是
                 //则将sgs值赋给sds
        sds-&gt;max_load = sgs.avg_load;
        sds-&gt;busiest = sg;
        sds-&gt;busiest_nr_running = sgs.sum_nr_running;
        sds-&gt;busiest_idle_cpus = sgs.idle_cpus;
        sds-&gt;busiest_group_capacity = sgs.group_capacity;
        sds-&gt;busiest_load_per_task = sgs.sum_weighted_load;
        sds-&gt;busiest_has_capacity = sgs.group_has_capacity;
        sds-&gt;busiest_group_weight = sgs.group_weight;
        sds-&gt;group_imb = sgs.group_imb;
    }
    sg = sg-&gt;next;
} while (sg != sd-&gt;groups);
</code></pre>

<pre><code>
决定选择调度域中最忙的组的参照标准是该组内所有 CPU上负载(load) 的和， 找到组中找到忙的运行队列的参照标准是该CPU运行队列的长度， 即负载，并且 load 值越大就表示越忙。在平衡的过程中，通过比较当前队列与以前记录的busiest 的负载情况，及时更新这些变量，让 busiest 始终指向域内最忙的一组，以便于查找。

调度域的平均负载计算
</code></pre>

<pre><code>sds.avg_load = (SCHED_POWER_SCALE * sds.total_load) / sds.total_pwr;
if (sds.this_load &gt;= sds.avg_load)
    goto out_balanced;
</code></pre>

<pre><code>在比较负载大小的过程中， 当发现当前运行的CPU所在的组中busiest为空时，或者当前正在运行的 CPU队列就是最忙的时， 或者当前 CPU队列的负载不小于本组内的平均负载时，或者不平衡的额度不大时，都会返回 NULL 值，即组组之间不需要进行平衡；当最忙的组的负载小于该调度域的平均负载时，只需要进行小范围的负载平衡；当要转移的任务量小于每个进程的平均负载时，如此便拿到了最忙的调度组。

然后find_busiest_queue中找到最忙的调度队列，遍历该组中的所有 CPU 队列，经过依次比较各个队列的负载，找到最忙的那个队列。
</code></pre>

<pre><code>for_each_cpu(i, sched_group_cpus(group)) {
    /*rq-&gt;cpu_power表示所在处理器的计算能力,在函式sched_init初始化时,会把这值设定为SCHED_LOAD_SCALE (=Nice 0的Load Weight=1024).并可透过函式update_cpu_power (in kernel/sched_fair.c)更新这个值.*/
    unsigned long power = power_of(i);
    unsigned long capacity = DIV_ROUND_CLOSEST(power,SCHED_POWER_SCALE);
    unsigned long wl;
    if (!cpumask_test_cpu(i, cpus))
        continue;

    rq = cpu_rq(i);
</code></pre>

<p>/<em>获取队列负载cpu_rq(cpu)->load.weight;</em>/
        wl = weighted_cpuload(i);</p>

<pre><code>    /*
     * When comparing with imbalance, use weighted_cpuload()
     * which is not scaled with the cpu power.
     */
    if (capacity &amp;&amp; rq-&gt;nr_running == 1 &amp;&amp; wl &gt; imbalance)
        continue;

    /*
     * For the load comparisons with the other cpu's, consider
     * the weighted_cpuload() scaled with the cpu power, so that
     * the load can be moved away from the cpu that is potentially
     * running at a lower capacity.
     */
    wl = (wl * SCHED_POWER_SCALE) / power;

    if (wl &gt; max_load) {
        max_load = wl;
        busiest = rq;
    }
</code></pre>

<pre><code>通过上面的计算，便拿到了最忙队列。  
当busiest-&gt;nr_running运行数大于1的时候，进行pull操作，pull前对move_tasks,先进行double_rq_lock加锁处理。
</code></pre>

<pre><code>double_rq_lock(this_rq, busiest);
ld_moved = move_tasks(this_rq, this_cpu, busiest,
        imbalance, sd, idle, &amp;all_pinned);
double_rq_unlock(this_rq, busiest);
</code></pre>

<pre><code>move_tasks进程pull task是允许失败的，即move_tasks-&gt;balance_tasks，在此处，有sysctl_sched_nr_migrate开关控制进程迁移个数，对应proc的是/proc/sys/kernel/sched_nr_migrate。

下面有can_migrate_task函数检查选定的进程是否可以进行迁移，迁移失败的原因有3个，1.迁移的进程处于运行状态；2.进程被绑核了，不能迁移到目标CPU上；3.进程的cache仍然是hot，此处也是为了保证cache命中率。
</code></pre>

<pre><code>/*关于cache cold的情况下，如果迁移失败的个数太多，仍然进行迁移
 * Aggressive migration if:
 * 1) task is cache cold, or
 * 2) too many balance attempts have failed.
 */

tsk_cache_hot = task_hot(p, rq-&gt;clock_task, sd);
if (!tsk_cache_hot ||
    sd-&gt;nr_balance_failed &gt; sd-&gt;cache_nice_tries) {
</code></pre>

<h1>ifdef CONFIG_SCHEDSTATS</h1>

<pre><code>    if (tsk_cache_hot) {
        schedstat_inc(sd, lb_hot_gained[idle]);
        schedstat_inc(p, se.statistics.nr_forced_migrations);
    }
</code></pre>

<h1>endif</h1>

<pre><code>    return 1;
}
</code></pre>

<pre><code>
判断进程cache是否有效，判断条件，进程的运行的时间大于proc控制开关sysctl_sched_migration_cost，对应目录/proc/sys/kernel/sched_migration_cost_ns
</code></pre>

<pre><code>static int
task_hot(struct task_struct *p, u64 now, struct sched_domain *sd)
{
        s64 delta;
    delta = now - p-&gt;se.exec_start;
    return delta &lt; (s64)sysctl_sched_migration_cost;
}
</code></pre>

<pre><code>在load_balance中，move_tasks返回失败也就是ld_moved==0，其中sd-&gt;nr_balance_failed++对应can_migrate_task中的”too many balance attempts have failed”,然后busiest-&gt;active_balance = 1设置，active_balance = 1。
</code></pre>

<pre><code>if (active_balance)
//如果pull失败了，开始触发push操作
stop_one_cpu_nowait(cpu_of(busiest),
    active_load_balance_cpu_stop, busiest,
    &amp;busiest-&gt;active_balance_work);
</code></pre>

<pre><code>push整个触发操作代码机制比较绕，stop_one_cpu_nowait把active_load_balance_cpu_stop添加到cpu_stopper每CPU变量的任务队列里面，如下：
</code></pre>

<pre><code>void stop_one_cpu_nowait(unsigned int cpu, cpu_stop_fn_t fn, void *arg,
            struct cpu_stop_work *work_buf)
{
    *work_buf = (struct cpu_stop_work){ .fn = fn, .arg = arg, };
    cpu_stop_queue_work(&amp;per_cpu(cpu_stopper, cpu), work_buf);
}
</code></pre>

<pre><code>而cpu_stopper则是cpu_stop_init函数通过cpu_stop_cpu_callback创建的migration内核线程，触发任务队列调度。因为migration内核线程是绑定每个核心上的，进程迁移失败的1和3问题就可以通过push解决。active_load_balance_cpu_stop则调用move_one_task函数迁移指定的进程。

上面描述的则是整个pull和push的过程，需要补充的pull触发除了schedule后触发，还有scheduler_tick通过触发中断，调用run_rebalance_domains再调用rebalance_domains触发，不再细数。
</code></pre>

<pre><code>void __init sched_init(void)
{
      open_softirq(SCHED_SOFTIRQ, run_rebalance_domains);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[try_to_wake_up函数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-trywakeup/"/>
    <updated>2015-02-11T11:32:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-trywakeup</id>
    <content type="html"><![CDATA[<p>  try_to_wake_up函数通过把进程状态设置为TASK_RUNNING，并把该进程插入本地CPU运行队列rq来达到唤醒睡眠和停止的进程的目的。<br/>
例如：调用该函数唤醒等待队列中的进程，或恢复执行等待信号的进程。该函数接受的参数有：<br/>
- 被唤醒进程的描述符指针（p）<br/>
- 可以被唤醒的进程状态掩码（state）<br/>
- 一个标志（sync），用来禁止被唤醒的进程抢占本地CPU上正在运行的进程<br/>
<code>
    static int try_to_wake_up(struct task_struct *p, unsigned int state, int sync)
    {
        int cpu, this_cpu, success = 0;
        unsigned long flags;
        long old_state;
        struct rq *rq;
    #ifdef CONFIG_SMP
        struct sched_domain *sd, *this_sd = NULL;
        unsigned long load, this_load;
        int new_cpu;
    #endif
        rq = task_rq_lock(p, &amp;flags);
        old_state = p-&gt;state;
        if (!(old_state &amp; state))
            goto out;
        if (p-&gt;array)
            goto out_running;
        cpu = task_cpu(p);
        this_cpu = smp_processor_id();
    #ifdef CONFIG_SMP
    ... // [多处理器负载平衡工作](/blog/2015/02/11/kernel-sched-balance/)
    #endif /* CONFIG_SMP */
        if (old_state == TASK_UNINTERRUPTIBLE) {
            rq-&gt;nr_uninterruptible--;
            /*
             * Tasks on involuntary sleep don't earn
             * sleep_avg beyond just interactive state.
             */
            p-&gt;sleep_type = SLEEP_NONINTERACTIVE; //简单判断出非交互进程
        } else
            if (old_state &amp; TASK_NONINTERACTIVE)
                p-&gt;sleep_type = SLEEP_NONINTERACTIVE;//同上
        activate_task(p, rq, cpu == this_cpu);
        if (!sync || cpu != this_cpu) {
            if (TASK_PREEMPTS_CURR(p, rq))
                resched_task(rq-&gt;curr);
        }
        success = 1;
    out_running:
        trace_sched_wakeup(rq, p, success);
        p-&gt;state = TASK_RUNNING;
    out:
        task_rq_unlock(rq, &amp;flags);
        return success;
    }
</code>
代码解释如下：<br/>
1.首先调用task_rq_lock( )禁止本地中断，并获得最后执行进程的CPU（他可能不同于本地CPU）所拥有的运行队列rq的锁。CPU的逻辑号存储在p->thread_info->cpu字段。</p>

<p>2.检查进程的状态p->state是否属于被当作参数传递给函数的状态掩码state，如果不是，就跳到第9步终止函数。</p>

<p>3.如果p->array字段不等于NULL，那么进程已经属于某个运行队列，因此跳转到第8步。</p>

<p>4.在多处理器系统中，该函数检查要被唤醒的进程是否应该从最近运行的CPU的运行队列迁移到另外一个CPU的运行队列。实际上，函数就是根据一些启发式规则选择一个目标运行队列。</p>

<p>5.如果进程处于TASK_UNINTERRUPTIBLE状态，函数递减目标运行队列的nr_uninterruptible字段，并把进程描述符的p->activated字段设置为-1。</p>

<p>6.调用activate_task( )函数：
<code>
    static void activate_task(struct task_struct *p, struct rq *rq, int local)
    {
        unsigned long long now;
        now = sched_clock();
    #ifdef CONFIG_SMP
    ...
    #endif
        if (!rt_task(p))
            p-&gt;prio = recalc_task_prio(p, now); //计算平均睡眠时间并返回之后的优先级。
        if (p-&gt;sleep_type == SLEEP_NORMAL) {
            if (in_interrupt())
                p-&gt;sleep_type = SLEEP_INTERRUPTED;
            else {
                p-&gt;sleep_type = SLEEP_INTERACTIVE;
            }
        }
        p-&gt;timestamp = now;
        __activate_task(p, rq);
    }
    static void __activate_task(struct task_struct *p, struct rq *rq)
    {
        struct prio_array *target = rq-&gt;active;
        trace_activate_task(p, rq);
        if (batch_task(p))
            target = rq-&gt;expired;
        enqueue_task(p, target);
        inc_nr_running(p, rq);
    }
</code>
它依次执行下面的子步骤：<br/>
  a) 调用sched_clock( )获取以纳秒为单位的当前时间戳。如果目标CPU不是本地CPU，就要补偿本地时钟中断的偏差，这是通过使用本地CPU和目标CPU上最近一次发生时钟中断的相对时间戳来达到的：now = (sched_clock( ) - this_rq( )->timestamp_last_tick)  +  rq->timestamp_last_tick;<br/>
  b) 调用recalc_task_prio()，把进程描述的指针和上一步计算出的时间戳传递给它。recalc_task_prio()主要更新进程的平均睡眠时间和动态优先级，下一篇博文将详细说明这个函数。<br/>
  c) 根据下表设置p->activated字段的值，该字段的意义为：<br/>
        值             说明<br/>
        0   进程处于TASK_RUNNING 状态。<br/>
        1   进程处于TASK_INTERRUPTIBLE 或TASK_STOPPED 状态，而且正在被系统调用服务例程或内核线程唤醒。<br/>
        2   进程处于TASK_INTERRUPTIBLE 或TASK_STOPPED 状态，而且正在被中断处理程序或可延迟函数唤醒。<br/>
        -1  进程处于TASK_UNINTERRUPTIBLE 状态而且正在被唤醒。
  d) 使用在第6a步中计算的时间戳设置p->timestamp字段。<br/>
  e) 把进程描述符插入活动进程集合：
<code>
    enqueue_task(p, rq-&gt;active);
    rq-&gt;nr_running++;
</code></p>

<p>7.如果目标CPU不是本地CPU，或者没有设置sync标志，就检查可运行的新进程的动态优先级是否比rq运行对了中当前进程的动态优先级高（p->prio &lt; rq->curr->prio）；如果是，就调用resched_task()抢占rq->curr。在单处理器系统中，后面的函数只是执行set_tsk_need_resched()来设置rq->curr进程的TIF_NEED_RESCHED标志。在多处理器系统中，resched_task()也检查TIF_NEED_RESCHED的旧值是否为0、目标CPU与本地CPU是否不同、rq->curr进程的TIF_POLLING_NRFLAG标志是否清0（目标CPU没有轮询进程TIF_NEED_RESCHED标志的值）。如果是，resched_task()调用smp_send_reschedule()产生IPI，并强制目标CPU重新调度。</p>

<p>8.把进程的p->state字段设置为TASK_RUNNING状态。</p>

<p>9.调用task_rq_unlock()来打开rq运行队列的锁并打开本地中断。</p>

<p>10.返回1（若成功唤醒进程）或0（如果进程没有被唤醒）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内核线程使用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-kthread/"/>
    <updated>2015-02-11T11:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-kthread</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/newnewman80/article/details/7050090">http://blog.csdn.net/newnewman80/article/details/7050090</a></p>

<h5>kthread_create：创建线程。</h5>

<pre><code>struct task_struct *kthread_create(int (*threadfn)(void *data),void *data,const char *namefmt, ...);
</code></pre>

<p>线程创建后，不会马上运行，而是需要将kthread_create() 返回的task_struct指针传给wake_up_process()，然后通过此函数运行线程。</p>

<h5>kthread_run ：创建并启动线程的函数：</h5>

<pre><code>struct task_struct *kthread_run(int (*threadfn)(void *data),void *data,const char *namefmt, ...);
</code></pre>

<h5>kthread_stop：通过发送信号给线程，使之退出。</h5>

<pre><code>int kthread_stop(struct task_struct *thread);
</code></pre>

<p>线程一旦启动起来后，会一直运行，除非该线程主动调用do_exit函数，或者其他的进程调用kthread_stop函数，结束线程的运行。<br/>
但如果线程函数正在处理一个非常重要的任务，它不会被中断的。当然如果线程函数永远不返回并且不检查信号，它将永远都不会停止。</p>

<h4>1. 头文件</h4>

<pre><code>    #include &lt;linux/sched.h&gt;        //wake_up_process()
    #include &lt;linux/kthread.h&gt;      //kthread_create()、kthread_run()   
    #include &lt;err.h&gt;                //IS_ERR()、PTR_ERR()  
</code></pre>

<h4>2. 实现</h4>

<h5>2.1创建线程</h5>

<p>kernel thread可以用kernel_thread创建，但是在执行函数里面必须用daemonize释放资源并挂到init下，还需要用completion等待这一过程的完成。为了简化操作kthread_create闪亮登场。
在模块初始化时，可以进行线程的创建。使用下面的函数和宏定义：
<code>
    struct task_struct *kthread_create(int (*threadfn)(void *data),     
                                void *data,  
                                const char namefmt[], ...);  
</code>
<code>
    #define kthread_run(threadfn, data, namefmt, ...)                      \
    ({                                                                     \
        struct task_struct *__k                                            \
               = kthread_create(threadfn, data, namefmt, ## __VA_ARGS__);  \
        if (!IS_ERR(__k))                                                  \
               wake_up_process(__k);                                       \
        __k;                                                               \
    })  
</code>
例如：
<code>
    static struct task_struct *test_task;  
    static int test_init_module(void)  
    {  
        int err;  
        test_task = kthread_create(test_thread, NULL, "test_task");  
        if (IS_ERR(test_task)) {  
            printk("Unable to start kernel thread./n");  
            err = PTR_ERR(test_task);  
            test_task = NULL;  
            return err;  
        }  
        wake_up_process(test_task);  
        return 0;  
    }  
    module_init(test_init_module);  
</code></p>

<h5>2.2线程函数</h5>

<p>在线程函数里，完成所需的业务逻辑工作。主要框架如下所示：
<code>
    int threadfunc(void *data) {
        ...        
        while(1) {
            set_current_state(TASK_UNINTERRUPTIBLE);
            if (kthread_should_stop()) break;
            if () { //条件为真
                //进行业务处理
            } else { //条件为假
                //让出CPU运行其他线程，并在指定的时间内重新被调度
                schedule_timeout(HZ);
            }
        }
        ...
        return 0;
    }
</code></p>

<h5>2.3结束线程</h5>

<p>在模块卸载时，可以结束线程的运行。使用下面的函数：
<code>
    int kthread_stop(struct task_struct *k);
</code>
例如：
<code>
    static void test_cleanup_module(void)  
    {  
        if (test_task) {  
            kthread_stop(test_task);  
            test_task = NULL;  
        }  
    }  
    module_exit(test_cleanup_module);  
</code></p>

<h4>设置普通线程优先级</h4>

<pre><code>    void set_user_nice(struct task_struct *p, long nice);
    // -20 &lt;= nice &lt; 20
</code></pre>

<h4>将线程设置为实时线程并设置优先级</h4>

<pre><code>    int sched_setscheduler(struct task_struct *p, int policy, struct sched_param *param);
    struct sched_param {
        int sched_priority; // 实时线程对应区间[1, 99]
    };
</code></pre>

<p>CFS 调度模块（在 kernel/sched_fair.c 中实现）用于以下调度策略：SCHED_NORMAL、SCHED_BATCH 和 SCHED_IDLE。<br/>
对于 SCHED_RR 和 SCHED_FIFO 策略，将使用实时调度模块（该模块在 kernel/sched_rt.c 中实现）。</p>

<h4>top中NI, PR</h4>

<p>NI，nice，动态修正CPU调度。范围（-20~19）。越大，cpu调度越一般，越小，cpu调度越偏向它。一般用于后台进程，调整也是往大了调，用来给前台进程让出CPU资源。命令行下可以用renice设置。</p>

<h5>PR：优先级，会有两种格式，一种是数字（默认20），一种是RT字符串。</h5>

<p>PR默认是20，越小，优先级越高。修改nice可以同时修改PR，测试过程：先开一个窗口，运行wc，另开一个窗口运行top，按N按照PID倒序排，按r输入要renice的PID，然后输入-19~20之间的值，可以看到NI变成输入的值，PR=PR+NI。修改NI得到PR的范围是0~39。优先级由高到低</p>

<p>RT是real-time。只能用chrt -p (1~99) pid来修改。chrt -p 1 1234会将1234的PR改成-2，chrt -p 98 1234变成-99。chrt -p 99 1234会变成RT&hellip;&hellip;只要chrt过，修改nice后PR不会再更改。修改chrt得到的PR范围是RT~-2。优先级由高到低</p>
]]></content>
  </entry>
  
</feed>
