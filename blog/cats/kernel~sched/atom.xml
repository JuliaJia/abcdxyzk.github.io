<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~sched | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~sched/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-05-24T17:17:37+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[字符设备驱动和等待队列样例]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue-sample/"/>
    <updated>2015-05-21T15:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue-sample</id>
    <content type="html"><![CDATA[<p>前两篇的样例</p>

<p><a href="/blog/2015/05/21/kernel-base-chardev/">字符设备驱动程序</a><br/>
<a href="/blog/2015/05/21/kernel-sched-waitqueue/">Linux内核中的等待队列</a></p>

<h4>waitqueue.c</h4>

<pre><code>    #include &lt;linux/module.h&gt;
    #include &lt;linux/init.h&gt;
    #include &lt;linux/fs.h&gt;
    #include &lt;asm/uaccess.h&gt;
    #include &lt;linux/wait.h&gt;
    #include &lt;linux/semaphore.h&gt;
    #include &lt;linux/kernel.h&gt;
    #include &lt;linux/proc_fs.h&gt;

    #include &lt;linux/socket.h&gt;
    #include &lt;linux/tcp.h&gt;
    #include &lt;linux/proc_fs.h&gt;
    #include &lt;net/net_namespace.h&gt;

    #include &lt;net/tcp.h&gt;


    static ssize_t globalvar_read(struct file *, char *, size_t, loff_t*);
    static ssize_t globalvar_write(struct file *, const char *, size_t, loff_t*);

    struct file_operations globalvar_fops =
    {
        .owner   = THIS_MODULE,
        .read = globalvar_read,
        .write = globalvar_write,
    };

    #define LEN 1024
    static char global_var[LEN];
    static int read_index = 0;
    static int write_index = 0;
    static spinlock_t var_lock;
    static wait_queue_head_t waitq;
    static int flag = 0;
    static int major;

    static const char procname[] = "testvar";

    static int __init globalvar_init(void)
    {
        init_waitqueue_head(&amp;waitq);
        spin_lock_init(&amp;var_lock);
    //  if (!proc_net_fops_create(&amp;init_net, procname, S_IRUSR, &amp;globalvar_fops)) {
        if (!(major = register_chrdev(0, "globalvar", &amp;globalvar_fops))) {
            printk("globalvar register failure\n");
            return -1;
        }
        printk("major = %d\n", major);
        return 0;
    }

    static void __exit globalvar_exit(void)
    {
    //  proc_net_remove(&amp;init_net, procname);
        unregister_chrdev(major, "globalvar");
    }

    static ssize_t globalvar_read(struct file *filp, char *buf, size_t len, loff_t *off)
    {
        int read_len;
        //等待数据可获得
        if (wait_event_interruptible(waitq, flag != 0))
            return -ERESTARTSYS;

        spin_lock(&amp;var_lock);
        read_len = write_index - read_index;
        if (copy_to_user(buf, global_var+read_index, read_len)) {
            spin_unlock(&amp;var_lock);
            return -EFAULT;
        }
        read_index = write_index;
        flag = 0;
        spin_unlock(&amp;var_lock);
        return read_len;
    }

    static ssize_t globalvar_write(struct file *filp, const char *buf, size_t len, loff_t *off)
    {
        spin_lock(&amp;var_lock);
        if (copy_from_user(global_var+write_index, buf, len)) {
            spin_unlock(&amp;var_lock);
            return -EFAULT;
        }
        write_index += len;
        spin_unlock(&amp;var_lock);

        flag = 1;
        //通知数据可获得
        wake_up_interruptible(&amp;waitq);
        return len;
    }

    module_init(globalvar_init);
    module_exit(globalvar_exit);
    MODULE_LICENSE("GPL");
</code></pre>

<h4>Makefile</h4>

<pre><code>    obj-m += waitqueue.o

    PWD = $(shell pwd)
    KERNEL := /lib/modules/`uname -r`/build

    all:
        make -C $(KERNEL) M=$(PWD) modules
</code></pre>

<h5>安装模块</h5>

<pre><code>    insmod ./waitqueue.ko
</code></pre>

<h5>查看对应的设备号</h5>

<pre><code>    $ cat /proc/devices | grep globalvar
    $ 249 globalvar
</code></pre>

<h5>建立文件</h5>

<pre><code>    mknod /dev/globalvar c 249 0
</code></pre>

<h5>终端1: cat文件</h5>

<pre><code>    cat /dev/globalvar
</code></pre>

<h5>终端2: echo数据到文件</h5>

<pre><code>    echo 123 &gt; /dev/globalvar
    echo 1234567 &gt; /dev/globalvar
    echo 123 &gt; /dev/globalvar
</code></pre>

<p>这时就能看见终端1读到了内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核中的等待队列]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue/"/>
    <updated>2015-05-21T15:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_49d5604e010008bn.html">http://blog.sina.com.cn/s/blog_49d5604e010008bn.html</a></p>

<p>等待队列可以参考net/ipv4/tcp_probe.c的实现</p>

<p><a href="/blog/2015/05/21/kernel-sched-waitqueue-sample/">简单样例</a></p>

<h4>Linux内核中的等待队列</h4>

<p>  Linux内核的等待队列是以双循环链表为基础数据结构，与进程调度机制紧密结合，能够用于实现核心的异步事件通知机制。在Linux2.4.21中，等待队列在源代码树include/linux/wait.h中，这是一个通过list_head连接的典型双循环链表，</p>

<p>如下图所示。</p>

<p><img src="/images/kernel/2015-05-21.jpg" alt="" /></p>

<p>  在这个链表中，有两种数据结构：等待队列头（wait_queue_head_t）和等待队列项（wait_queue_t）。等待队列头和等待队列项中都包含一个list_head类型的域作为"连接件"。由于我们只需要对队列进行添加和删除操作，并不会修改其中的对象（等待队列项），因此，我们只需要提供一把保护整个基础设施和所有对象的锁，这把锁保存在等待队列头中，为wq_lock_t类型。在实现中，可以支持读写锁（rwlock）或自旋锁（spinlock）两种类型，通过一个宏定义来切换。如果使用读写锁，将wq_lock_t定义为rwlock_t类型；如果是自旋锁，将wq_lock_t定义为spinlock_t类型。无论哪种情况，分别相应设置wq_read_lock、wq_read_unlock、wq_read_lock_irqsave、wq_read_unlock_irqrestore、wq_write_lock_irq、wq_write_unlock、wq_write_lock_irqsave和wq_write_unlock_irqrestore等宏。</p>

<h5>等待队列头</h5>

<pre><code>    struct __wait_queue_head {
        wq_lock_t lock;
        struct list_head task_list;
    };
    typedef struct __wait_queue_head wait_queue_head_t;
</code></pre>

<p>  前面已经说过，等待队列的主体是进程，这反映在每个等待队列项中，是一个任务结构指针（struct task_struct * task）。flags为该进程的等待标志，当前只支持互斥。</p>

<h5>等待队列项</h5>

<pre><code>    struct __wait_queue {
        unsigned int flags;
    #define WQ_FLAG_EXCLUSIVE 0x01
        struct task_struct * task;
        struct list_head task_list;
    };
    typedef struct __wait_queue wait_queue_t;
</code></pre>

<h5>声明和初始化</h5>

<pre><code>    #define DECLARE_WAITQUEUE(name, tsk)            \
        wait_queue_t name = __WAITQUEUE_INITIALIZER(name, tsk)
    #define __WAITQUEUE_INITIALIZER(name, tsk) {    \
        task:  tsk,                                 \
        task_list: { NULL, NULL },                  \
        __WAITQUEUE_DEBUG_INIT(name)}
</code></pre>

<p>  通过DECLARE_WAITQUEUE宏将等待队列项初始化成对应的任务结构，并且用于连接的相关指针均设置为空。其中加入了调试相关代码。
<code>
    #define DECLARE_WAIT_QUEUE_HEAD(name)                    \
        wait_queue_head_t name = __WAIT_QUEUE_HEAD_INITIALIZER(name)
    #define __WAIT_QUEUE_HEAD_INITIALIZER(name) {            \
        lock:  WAITQUEUE_RW_LOCK_UNLOCKED,                   \
        task_list: { &amp;(name).task_list, &amp;(name).task_list }, \
        __WAITQUEUE_HEAD_DEBUG_INIT(name)}
</code></p>

<p>  通过DECLARE_WAIT_QUEUE_HEAD宏初始化一个等待队列头，使得其所在链表为空，并设置链表为"未上锁"状态。其中加入了调试相关代码。
<code>
    static inline void init_waitqueue_head(wait_queue_head_t *q)
</code></p>

<p>该函数初始化一个已经存在的等待队列头，它将整个队列设置为"未上锁"状态，并将链表指针prev和next指向它自身。
<code>
    {
        q-&gt;lock = WAITQUEUE_RW_LOCK_UNLOCKED;
        INIT_LIST_HEAD(&amp;q-&gt;task_list);
    }
    static inline void init_waitqueue_entry(wait_queue_t *q, struct task_struct *p)
</code></p>

<p>该函数初始化一个已经存在的等待队列项，它设置对应的任务结构，同时将标志位清0。
<code>
    {
        q-&gt;flags = 0;
        q-&gt;task = p;
    }
    static inline int waitqueue_active(wait_queue_head_t *q)
</code>
该函数检查等待队列是否为空。
<code>
    {
        return !list_empty(&amp;q-&gt;task_list);
    }
    static inline void __add_wait_queue(wait_queue_head_t *head, wait_queue_t *new)
</code></p>

<p>将指定的等待队列项new添加到等待队列头head所在的链表头部，该函数假设已经获得锁。
<code>
    {
        list_add(&amp;new-&gt;task_list, &amp;head-&gt;task_list);
    }
    static inline void __add_wait_queue_tail(wait_queue_head_t *head, wait_queue_t *new)
</code></p>

<p>将指定的等待队列项new添加到等待队列头head所在的链表尾部，该函数假设已经获得锁。
<code>
    {
        list_add_tail(&amp;new-&gt;task_list, &amp;head-&gt;task_list);
    }
    static inline void __remove_wait_queue(wait_queue_head_t *head, wait_queue_t *old)
</code>
将函数从等待队列头head所在的链表中删除指定等待队列项old，该函数假设已经获得锁，并且old在head所在链表中。
<code>
    {
        list_del(&amp;old-&gt;task_list);
    }
</code></p>

<h4>睡眠和唤醒操作</h4>

<p>对等待队列的操作包括睡眠和唤醒（相关函数保存在源代码树的/kernel/sched.c和include/linux/sched.h中）。思想是更改当前进程（CURRENT）的任务状态，并要求重新调度，因为这时这个进程的状态已经改变，不再在调度表的就绪队列中，因此无法再获得执行机会，进入"睡眠"状态，直至被"唤醒"，即其任务状态重新被修改回就绪态。</p>

<p>常用的睡眠操作有interruptible_sleep_on和sleep_on。两个函数类似，只不过前者将进程的状态从就绪态（TASK_RUNNING）设置为TASK_INTERRUPTIBLE，允许通过发送signal唤醒它（即可中断的睡眠状态）；而后者将进程的状态设置为TASK_UNINTERRUPTIBLE，在这种状态下，不接收任何singal。</p>

<p>以interruptible_sleep_on为例，其展开后的代码是：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void interruptible_sleep_on(wait_queue_head_t &lt;em&gt;q)
</span><span class='line'>{
</span><span class='line'>    unsigned long flags;
</span><span class='line'>    wait_queue_t wait;
</span><span class='line'>    /&lt;/em&gt; 构造当前进程对应的等待队列项 */
</span><span class='line'>    init_waitqueue_entry(&amp;wait, current);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    /* 将当前进程的状态从TASK_RUNNING改为TASK_INTERRUPTIBLE */
</span><span class='line'>current-&gt;state = TASK_INTERRUPTIBLE;
</span><span class='line'>
</span><span class='line'>/* 将等待队列项添加到指定链表中 */
</span><span class='line'>wq_write_lock_irqsave(&amp;q-&gt;lock,flags);
</span><span class='line'>__add_wait_queue(q, &amp;wait); 
</span><span class='line'>wq_write_unlock(&amp;q-&gt;lock);
</span><span class='line'>
</span><span class='line'>/* 进程重新调度，放弃执行权 */
</span><span class='line'>schedule();
</span><span class='line'>
</span><span class='line'>/* 本进程被唤醒，重新获得执行权，首要之事是将等待队列项从链表中删除 */
</span><span class='line'>wq_write_lock_irq(&amp;q-&gt;lock);
</span><span class='line'>__remove_wait_queue(q, &amp;wait);
</span><span class='line'>wq_write_unlock_irqrestore(&amp;q-&gt;lock,flags);
</span><span class='line'>/* 至此，等待过程结束，本进程可以正常执行下面的逻辑 */
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>对应的唤醒操作包括wake_up_interruptible和wake_up。wake_up函数不仅可以唤醒状态为TASK_UNINTERRUPTIBLE的进程，而且可以唤醒状态为TASK_INTERRUPTIBLE的进程。
</span><span class='line'>
</span><span class='line'>wake_up_interruptible只负责唤醒状态为TASK_INTERRUPTIBLE的进程。这两个宏的定义如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define wake_up(x)   __wake_up((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE, 1)
</span><span class='line'>#define wake_up_interruptible(x) __wake_up((x),TASK_INTERRUPTIBLE, 1)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>__wake_up函数主要是获取队列操作的锁，具体工作是调用__wake_up_common完成的。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void __wake_up(wait_queue_head_t *q, unsigned int mode, int nr)
</span><span class='line'>{
</span><span class='line'>if (q) {
</span><span class='line'>    unsigned long flags;
</span><span class='line'>    wq_read_lock_irqsave(&amp;q-&gt;lock, flags);
</span><span class='line'>    __wake_up_common(q, mode, nr, 0);
</span><span class='line'>    wq_read_unlock_irqrestore(&amp;q-&gt;lock, flags);
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>/* The core wakeup function.  Non-exclusive wakeups (nr_exclusive == 0) just wake everything up.  If it's an exclusive wakeup (nr_exclusive == small +ve number) then we wake all the non-exclusive tasks and one exclusive task.
</span><span class='line'>There are circumstances in which we can try to wake a task which has already started to run but is not in state TASK_RUNNING.  try_to_wake_up() returns zero in this (rare) case, and we handle it by contonuing to scan the queue. */
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline void __wake_up_common (wait_queue_head_t *q, unsigned int mode, int nr_exclusive, const int sync)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>参数q表示要操作的等待队列，mode表示要唤醒任务的状态，如TASK_UNINTERRUPTIBLE或TASK_INTERRUPTIBLE等。nr_exclusive是要唤醒的互斥进程数目，在这之前遇到的非互斥进程将被无条件唤醒。sync表示？？？
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;{
</span><span class='line'>struct list_head *tmp;
</span><span class='line'>struct task_struct *p;
</span><span class='line'>
</span><span class='line'>CHECK_MAGIC_WQHEAD(q);
</span><span class='line'>WQ_CHECK_LIST_HEAD(&amp;q-&gt;task_list);
</span><span class='line'>
</span><span class='line'>/* 遍历等待队列 */
</span><span class='line'>list_for_each(tmp,&amp;q-&gt;task_list) {
</span><span class='line'>    unsigned int state;
</span><span class='line'>    /* 获得当前等待队列项 */
</span><span class='line'>    wait_queue_t *curr = list_entry(tmp, wait_queue_t, task_list);
</span><span class='line'>
</span><span class='line'>    CHECK_MAGIC(curr-&gt;__magic);
</span><span class='line'>    /* 获得对应的进程 */
</span><span class='line'>    p = curr-&gt;task;
</span><span class='line'>    state = p-&gt;state;
</span><span class='line'>
</span><span class='line'>    /* 如果我们需要处理这种状态的进程 */
</span><span class='line'>    if (state &amp; mode) {
</span><span class='line'>        WQ_NOTE_WAKER(curr);
</span><span class='line'>        if (try_to_wake_up(p, sync) &amp;&amp; (curr-&gt;flags&amp;WQ_FLAG_EXCLUSIVE) &amp;&amp; !--nr_exclusive)
</span><span class='line'>            break;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>/* 唤醒一个进程，将它放到运行队列中，如果它还不在运行队列的话。"当前"进程总是在运行队列中的（except when the actual re-schedule is in progress)，and as such you're allowed to do the simpler "current-&gt;state = TASK_RUNNING" to mark yourself runnable without the overhead of this. */
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline int try_to_wake_up(struct task_struct * p, int synchronous)
</span><span class='line'>{
</span><span class='line'>unsigned long flags;
</span><span class='line'>int success = 0;
</span><span class='line'>
</span><span class='line'>/* 由于我们需要操作运行队列，必须获得对应的锁 */
</span><span class='line'>spin_lock_irqsave(&amp;runqueue_lock, flags);
</span><span class='line'>/* 将进程状态设置为TASK_RUNNING */
</span><span class='line'>p-&gt;state = TASK_RUNNING;
</span><span class='line'>/* 如果进程已经在运行队列中，释放锁退出 */
</span><span class='line'>if (task_on_runqueue(p))
</span><span class='line'>    goto out;
</span><span class='line'>/* 否则将进程添加到运行队列中 */
</span><span class='line'>add_to_runqueue(p);
</span><span class='line'>
</span><span class='line'>/* 如果设置了同步标志 */
</span><span class='line'>if (!synchronous || !(p-&gt;cpus_allowed &amp; (1UL &lt;&lt; smp_processor_id())))
</span><span class='line'>    reschedule_idle(p);
</span><span class='line'>/* 唤醒成功，释放锁退出 */
</span><span class='line'>success = 1;
</span><span class='line'>out:
</span><span class='line'>spin_unlock_irqrestore(&amp;runqueue_lock, flags);
</span><span class='line'>return success;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 等待队列应用模式
</span><span class='line'>
</span><span class='line'>等待队列的的应用涉及两个进程，假设为A和B。A是资源的消费者，B是资源的生产者。A在消费的时候必须确保资源已经生产出来，为此定义一个资源等待队列。这个队列同时要被进程A和进程B使用，我们可以将它定义为一个全局变量。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;DECLARE_WAIT_QUEUE_HEAD(rsc_queue); /* 全局变量 */
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>在进程A中，执行逻辑如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;while (resource is unavaiable) {
</span><span class='line'>interruptible_sleep_on( &amp;wq );
</span><span class='line'>}
</span><span class='line'>consume_resource();
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>在进程B中，执行逻辑如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;produce_resource();
</span><span class='line'>wake_up_interruptible( &amp;wq );
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[linux进程调度之FIFO和RR调度策略]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/03/13/kernel-sched-rt/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-03-13T00:00:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/03/13/kernel-sched-rt&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.chinaunix.net/uid-24774106-id-3379478.html"&gt;http://blog.chinaunix.net/uid-24774106-id-3379478.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;严格地说，对于优先级对于实时进程和普通进程的意义是不一样的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1、在一定程度上，实时进程优先级高，实时进程存在，就没有普通进程占用CPU的机会，（但是前一篇博文也讲过了，实时组调度出现在内核以后，允许普通进程占用少量的CPU时间,取决于配置)。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2、对于实时进程而言，高优先级的进程存在，低优先级的进程是轮不上的，没机会跑在CPU上，所谓实时进程的调度策略,指的是相同优先级之间的调度策略。如果是FIFO实时进程在占用CPU，除非出现以下事情，否则FIFO一条道跑到黑。&lt;br/&gt;
</span><span class='line'>  a）FIFO进程良心发现，调用了系统调用sched_yield 自愿让出CPU&lt;br/&gt;
</span><span class='line'>  b) 更高优先级的进程横空出世，抢占FIFO进程的CPU。有些人觉得很奇怪，怎么FIFO占着CPU，为啥还能有更高优先级的进程出现呢。别忘记，我们是多核多CPU ,如果其他CPU上出现了一个比FIFO优先级高的进程，可能会push到FIFO进程所在的CPU上。&lt;br/&gt;
</span><span class='line'>  c) FIFO进程停止（TASK_STOPPED or TASK_TRACED状态）或者被杀死（EXIT_ZOMBIE or EXIT_DEAD状态）&lt;br/&gt;
</span><span class='line'>  d) FIFO进程执行了阻塞调用并进入睡眠（TASK_INTERRUPTIBLE OR TASK_UNINTERRUPTIBLE）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  如果是进程的调度策略是时间片轮转RR，那么，除了前面提到的abcd，RR实时进程耗尽自己的时间片后，自动退到对应优先级实时队列的队尾，重新调度。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    struct sched_param {
</span><span class='line'>    /* ... */
</span><span class='line'>    int sched_priority;
</span><span class='line'>    /* ... */
</span><span class='line'>};
</span><span class='line'>int sched_setscheduler (pid_t pid,
</span><span class='line'>                        int policy,
</span><span class='line'>                        const struct sched_param *sp);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  sched_setscheduler函数的第二个参数调度方法 ：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>#define SCHED_OTHER 0
</span><span class='line'>#define SCHED_FIFO 1
</span><span class='line'>#define SCHED_RR 2
</span><span class='line'>#ifdef __USE_GNU
</span><span class='line'># define SCHED_BATCH 3
</span><span class='line'>#endif
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  SCHED_OTHER表示普通进程，对于普通进程，第三个参数sp-&gt;sched_priority只能是0&lt;br/&gt;
</span><span class='line'>  SCHED_FIFO 和SCHED_RR表示实时进程的调度策略，第三个参数的取值范围为[1,99]。&lt;br/&gt;
</span><span class='line'>  如果sched_setscheduler 优先级设置的值和调度策略不符合的话，会返回失败的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;应用层和内核层的优先级含义是不同的：&lt;br/&gt;
</span><span class='line'>  首先说实时进程：实时进程的优先级设置可以通过sched_setsheduler设置，也可以通过sched_setparam设置优先级的大小。
</span><span class='line'>int sched_setparam (pid_t pid, const struct sched_param *sp);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在用户层或者应用层，1表示优先级最低，99表示优先级最高。但是在内核中，[0,99]表示的实时进程的优先级，0最高，99最低。[100,139]是普通进程折腾的范围。应用层比较天真率直，就看大小，数字大，则优先级高。ps查看进程的优先级也是如此。有意思的是，应用层实时进程最高优先级的99，在ps看进程优先级的时候，输出的是139.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  对于普通进程，是通过nice系统调用来调整优先级的。从内核角度讲[100,139]是普通进程的优先级的范围，100最高，139最低，默认是120。普通进程的优先级的作用和实时进程不同，普通进程优先级表示的是占的CPU时间。深入linux内核架构中提到，普通优先级越高（100最高，139最低），享受的CPU time越多，相邻的两个优先级，高一级的进程比低一级的进程多占用10%的CPU，比如内核优先级数值为120的进程要比数值是121的进程多占用10%的CPU。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  内核中有一个数组：prio_to_weight[20]表示的是默认优先级120的权重，数值为1024，prio_to_weight[21]表示nice值为1，优先级为121的进程的权重，数值为820。这就到了CFS的原理了
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static const int prio_to_weight[40] = {
</span><span class='line'> /* -20 */ 88761, 71755, 56483, 46273, 36291,
</span><span class='line'> /* -15 */ 29154, 23254, 18705, 14949, 11916,
</span><span class='line'> /* -10 */ 9548, 7620, 6100, 4904, 3906,
</span><span class='line'> /* -5 */ 3121, 2501, 1991, 1586, 1277,
</span><span class='line'> /* 0 */ 1024, 820, 655, 526, 423,
</span><span class='line'> /* 5 */ 335, 272, 215, 172, 137,
</span><span class='line'> /* 10 */ 110, 87, 70, 56, 45,
</span><span class='line'> /* 15 */ 36, 29, 23, 18, 15,
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  假如有1台电脑，10个人玩，怎么才公平。&lt;br/&gt;
</span><span class='line'>  1 约定好时间片，每人玩1小时，玩完后记账，张XX 1小时，谁玩的时间短，谁去玩&lt;br/&gt;
</span><span class='line'>  2 引入优先级的概念，李四有紧急情况，需要提高他玩电脑的时间，怎么办，玩1个小时，记账半小时，那么同等情况下，李四会比其他人被选中玩电脑的频率要高，就体现了这个优先级的概念。&lt;br/&gt;
</span><span class='line'>  3  王五也有紧急情况，但是以考察，不如李四的紧急，好吧，玩1个小时，记账45分钟。&lt;br/&gt;
</span><span class='line'>  4  情况有变化，听说这里有电脑，突然又来了10个人，如果按照每人玩1小时的时间片，排在最后的那哥们早就开始骂人了，怎么办？时间片动态变化，根据人数来确定时间片。人越多，每个人玩的时间越少，防止哥们老捞不着玩，耐心耗尽，开始骂人。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  这个记账就是我们prio_to_weight的作用。我就不多说了，prio_to_weight[20]就是基准，玩一小时，记账一小时，数组20以前的值是特权一级，玩1小时记账20分钟之类的享有特权的，数组20之后是倒霉蛋，玩1小时，记账1.5小时之类的倒霉蛋。 CFS这种调度好在大家都能捞着玩。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于FIFO而言，一旦sleep过后，高优先级运行，低优先级是没戏运行的，同等优先级的进程，先运行的不运行完，后运行的也没戏。&lt;br/&gt;
</span><span class='line'>对于RR而言，高优先级的先运行，同等优先级的进程过家家，你玩完，我玩，我玩完你再玩，每个进程耗费一个时间片的时间。对于Linux，RR时间片是100ms：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>#define DEF_TIMESLICE        (100 * HZ / 1000)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[linux内核中异步通知机制--信号处理机制]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-signal/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-02-11T15:08:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-signal&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.csdn.net/yusiguyuan/article/details/23168363"&gt;http://blog.csdn.net/yusiguyuan/article/details/23168363&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  什么是异步通知：很简单，一旦设备准备好，就主动通知应用程序，这种情况下应用程序就不需要查询设备状态， 特像硬件上常提的“中断的概念”。 比较准确的说法其实应该叫做“信号驱动的异步I/O”,信号是在软件层次上对中断机制的一种模拟。阻塞I/O意味着一直等待设备可访问再访问，非阻塞I/O意味着使用poll()来查询是否可访问，而异步通知则意味着设备通知应用程序自身可访问。（希望用这么一句话能表达我的意思）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;一、系统中存在的异步机制&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  我认为异步机制是一种理念，并不是某一种具体实现，同步/异步的核心理解应该是如何获取消息的问题，你自身（在计算机中当然是进程本身了）亲自去获取消息，那么就是同步机制，但是如果别人使用某种方式通知你某一个消息，那么你采用的就是异步机制。内核中使用到异步机制的大概有：信号，这是一种进程间通信的异步机制；epoll，这是一种高效处理IO的异步通信机制。也就是从通信和IO两个方面通过不同的方式使用了异步机制。（可能还有别的，暂时不知道）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下面进入正题：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;二、信号的基本概念&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1）信号的本质&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  软中断信号（signal，又简称为信号）用来通知进程发生了异步事件。在软件层次上是对中断机制的一种模拟，在原理上，一个进程收到一个信号与处理器收到一个中断请求可以说是一样的。信号是进程间通信机制中唯一的异步通信机制，一个进程不必通过任何操作来等待信号的到达，事实上，进程也不知道信号到底什么时候到达。进程之间可以互相通过系统调用kill发送软中断信号。内核也可以因为内部事件而给进程发送信号，通知进程发生了某个事件。信号机制除了基本通知功能外，还可以传递附加信息。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;收到信号的进程对各种信号有不同的处理方法。处理方法可以分为三类：&lt;br/&gt;
</span><span class='line'>第一种是类似中断的处理程序，对于需要处理的信号，进程可以指定处理函数，由该函数来处理。&lt;br/&gt;
</span><span class='line'>第二种方法是，忽略某个信号，对该信号不做任何处理，就象未发生过一样。&lt;br/&gt;
</span><span class='line'>第三种方法是，对该信号的处理保留系统的默认值，这种缺省操作，对大部分的信号的缺省操作是使得进程终止。进程通过系统调用signal来指定进程对某个信号的处理行为。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在进程表的表项中有一个软中断信号域，该域中每一位对应一个信号，当有信号发送给进程时，对应位置位。由此可以看出，进程对不同的信号可以同时保留，但对于同一个信号，进程并不知道在处理之前来过多少个。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2）信号的种类&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;可以从两个不同的分类角度对信号进行分类：&lt;br/&gt;
</span><span class='line'>可靠性方面：可靠信号与不可靠信号；&lt;br/&gt;
</span><span class='line'>与时间的关系上：实时信号与非实时信号。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;3）可靠信号与不可靠信号&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  Linux信号机制基本上是从Unix系统中继承过来的。早期Unix系统中的信号机制比较简单和原始，信号值小于SIGRTMIN的信号都是不可靠信号。这就是"不可靠信号"的来源。它的主要问题是信号可能丢失。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  随着时间的发展，实践证明了有必要对信号的原始机制加以改进和扩充。由于原来定义的信号已有许多应用，不好再做改动，最终只好又新增加了一些信号，并在一开始就把它们定义为可靠信号，这些信号支持排队，不会丢失。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  信号值位于SIGRTMIN和SIGRTMAX之间的信号都是可靠信号，可靠信号克服了信号可能丢失的问题。Linux在支持新版本的信号安装函数sigation()以及信号发送函数sigqueue()的同时，仍然支持早期的signal()信号安装函数，支持信号发送函数kill()。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;信号的可靠与不可靠只与信号值有关，与信号的发送及安装函数无关。目前linux中的signal()是通过sigation()函数实现的，因此，即使通过signal()安装的信号，在信号处理函数的结尾也不必再调用一次信号安装函数。同时，由signal()安装的实时信号支持排队，同样不会丢失。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  对于目前linux的两个信号安装函数：signal()及sigaction()来说，它们都不能把SIGRTMIN以前的信号变成可靠信号（都不支持排队，仍有可能丢失，仍然是不可靠信号），而且对SIGRTMIN以后的信号都支持排队。这两个函数的最大区别在于，经过sigaction安装的信号都能传递信息给信号处理函数，而经过signal安装的信号不能向信号处理函数传递信息。对于信号发送函数来说也是一样的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;4）实时信号与非实时信号&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  早期Unix系统只定义了32种信号，前32种信号已经有了预定义值，每个信号有了确定的用途及含义，并且每种信号都有各自的缺省动作。如按键盘的CTRL ^C时，会产生SIGINT信号，对该信号的默认反应就是进程终止。后32个信号表示实时信号，等同于前面阐述的可靠信号。这保证了发送的多个实时信号都被接收。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;非实时信号都不支持排队，都是不可靠信号；实时信号都支持排队，都是可靠信号。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;5)linux 下信号的生命周期如下：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在目的进程中安装该信号。即是设置捕获该信号时进程进程该执行的操作码。采用signal（）;sigaction（）系统调用来实现。&lt;br/&gt;
</span><span class='line'>  信号被某个进程产生，同时设置该信号的目的进程（使用pid），之后交给操作系统进行管理。采用kill()、arise()、alarm()等系统调用来实现。&lt;br/&gt;
</span><span class='line'>  信号在目的进程被注册。信号被添加进进程的PCB（task_struct）中相关的数据结构里——未决信号的数据成员。信号在进程中注册就是把信号值加入到进程的未决信号集里。并且，信号携带的其他信息被保留到未决信的队列的某个sigqueue结构中。&lt;br/&gt;
</span><span class='line'>  信号在进程中注销。在执行信号处理函数前，要把信号在进程中注销。对于非实时信号（不可靠信号），其在信号未决信号信息链中最多只有一个sigqueue结构，因此该结构被释放后，相应的信号要在未决信号集删除。而实时信号（可靠信号），如果有多个sigqueue，则不会把信号从进程的未决信号集中删除。&lt;br/&gt;
</span><span class='line'>  信号生命的终结。进程终止当前的工作，保护上下文，执行信号处理函数，之后回复。如果内核是可抢占的，那么还需要调度。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;三、信 号 机 制&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  上 一节中介绍了信号的基本概念，在这一节中，我们将介绍内核如何实现信号机制。即内核如何向一个进程发送信号、进程如何接收一个信号、进程怎样控制自己对信 号的反应、内核在什么时机处理和怎样处理进程收到的信号。还要介绍一下setjmp和longjmp在信号中起到的作用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1、内核对信号的基本处理方法&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  内核给一个进程发送软中断信号的方法，是在进程所在的进程表项的信号域设置对应于该信号的位。这里要补充的是，如果信号发送给一个正在睡眠的进程，那么要看 该进程进入睡眠的优先级，如果进程睡眠在可被中断的优先级上，则唤醒进程；否则仅设置进程表中信号域相应的位，而不唤醒进程。这一点比较重要，因为进程检 查是否收到信号的时机是：一个进程在即将从内核态返回到用户态时；或者，在一个进程要进入或离开一个适当的低调度优先级睡眠状态时。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;进程的task_struct结构中有关于本进程中未决信号的数据成员：struct sigpending pending：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>struct sigpending{
</span><span class='line'>    struct sigqueue *head, *tail;
</span><span class='line'>    sigset_t signal;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>第三个成员是进程中所有未决信号集，第一、第二个成员分别指向一个sigqueue类型的结构链（称之为"未决信号信息链"）的首尾，信息链中的每个sigqueue结构刻画一个特定信号所携带的信息，并指向下一个sigqueue结构:
</span><span class='line'>&lt;code&gt;
</span><span class='line'>struct sigqueue{
</span><span class='line'>    struct sigqueue *next;
</span><span class='line'>    siginfo_t info;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>信号在进程中注册指的就是信号值加入到进程的未决信号集sigset_t signal（每个信号占用一位）中，并且信号所携带的信息被保留到未决信号信息链的某个sigqueue结构中。只要信号在进程的未决信号集中，表明进程已经知道这些信号的存在，但还没来得及处理，或者该信号被进程阻塞。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;当一个实时信号发送给一个进程时，不管该信号是否已经在进程中注册，都会被再注册一次，因此，信号不会丢失，因此，实时信号又叫做"可靠信号"。这意味着同一个实时信号可以在同一个进程的未决信号信息链中占有多个sigqueue结构（进程每收到一个实时信号，都会为它分配一个结构来登记该信号信息，并把该结构添加在未决信号链尾，即所有诞生的实时信号都会在目标进程中注册）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;当一个非实时信号发送给一个进程时，如果该信号已经在进程中注册（通过sigset_t signal指示），则该信号将被丢弃，造成信号丢失。因此，非实时信号又叫做"不可靠信号"。这意味着同一个非实时信号在进程的未决信号信息链中，至多占有一个sigqueue结构。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;总之信号注册与否，与发送信号的函数（如kill()或sigqueue()等）以及信号安装函数（signal()及sigaction()）无关，只与信号值有关（信号值小于SIGRTMIN的信号最多只注册一次，信号值在SIGRTMIN及SIGRTMAX之间的信号，只要被进程接收到就被注册）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核处理一个进程收到的信号的时机是在一个进程从内核态返回用户态时。所以，当一个进程在内核态下运行时，软中断信号并不立即起作用，要等到将返回用户态时才处理。进程只有处理完信号才会返回用户态，进程在用户态下不会有未处理完的信号。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核处理一个进程收到的软中断信号是在该进程的上下文中，因此，进程必须处于运行状态。前面介绍概念的时候讲过，处理信号有三种类型：进程接收到信号后退 出；进程忽略该信号；进程收到信号后执行用户设定用系统调用signal的函数。当进程接收到一个它忽略的信号时，进程丢弃该信号，就象没有收到该信号似 的继续运行。如果进程收到一个要捕捉的信号，那么进程从内核态返回用户态时执行用户定义的函数。而且执行用户定义的函数的方法很巧妙，内核是在用户栈上创 建一个新的层，该层中将返回地址的值设置成用户定义的处理函数的地址，这样进程从内核返回弹出栈顶时就返回到用户定义的函数处，从函数返回再弹出栈顶时， 才返回原先进入内核的地方。这样做的原因是用户定义的处理函数不能且不允许在内核态下执行（如果用户定义的函数在内核态下运行的话，用户就可以获得任何权 限）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于非实时信号来说，由于在未决信号信息链中最多只占用一个sigqueue结构，因此该结构被释放后，应该把信号在进程未决信号集中删除（信号注销完毕）；而对于实时信号来说，可能在未决信号信息链中占用多个sigqueue结构，因此应该针对占用sigqueue结构的数目区别对待：如果只占用一个sigqueue结构（进程只收到该信号一次），则执行完相应的处理函数后应该把信号在进程的未决信号集中删除（信号注销完毕）。否则待该信号的所有sigqueue处理完毕后再在进程的未决信号集中删除该信号。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;当所有未被屏蔽的信号都处理完毕后，即可返回用户空间。对于被屏蔽的信号，当取消屏蔽后，在返回到用户空间时会再次执行上述检查处理的一套流程。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;在信号的处理方法中有几点特别要引起注意。&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第一，在一些系统中，当一个进程处理完中断信号返回用户态之前，内核清除用户区中设 定的对该信号的处理例程的地址，即下一次进程对该信号的处理方法又改为默认值，除非在下一次信号到来之前再次使用signal系统调用。这可能会使得进程 在调用signal之前又得到该信号而导致退出。在BSD中，内核不再清除该地址。但不清除该地址可能使得进程因为过多过快的得到某个信号而导致堆栈溢 出。为了避免出现上述情况。在BSD系统中，内核模拟了对硬件中断的处理方法，即在处理某个中断时，阻止接收新的该类中断。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第二个要 引起注意的是，如果要捕捉的信号发生于进程正在一个系统调用中时，并且该进程睡眠在可中断的优先级上，这时该信号引起进程作一次longjmp，跳出睡眠 状态，返回用户态并执行信号处理例程。当从信号处理例程返回时，进程就象从系统调用返回一样，但返回了一个错误代码，指出该次系统调用曾经被中断。这要注 意的是，BSD系统中内核可以自动地重新开始系统调用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第三个要注意的地方：若进程睡眠在可中断的优先级上，则当它收到一个要忽略的信号时，该进程被唤醒，但不做longjmp，一般是继续睡眠。但用户感觉不到进程曾经被唤醒，而是象没有发生过该信号一样。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第四个要注意的地方：内核对子进程终止（SIGCLD）信号的处理方法与其他信号有所区别。当进程检查出收到了一个子进程终止的信号时，缺省情况下，该进程 就象没有收到该信号似的，如果父进程执行了系统调用wait，进程将从系统调用wait中醒来并返回wait调用，执行一系列wait调用的后续操作（找 出僵死的子进程，释放子进程的进程表项），然后从wait中返回。SIGCLD信号的作用是唤醒一个睡眠在可被中断优先级上的进程。如果该进程捕捉了这个 信号，就象普通信号处理一样转到处理例程。如果进程忽略该信号，那么系统调用wait的动作就有所不同，因为SIGCLD的作用仅仅是唤醒一个睡眠在可被 中断优先级上的进程，那么执行wait调用的父进程被唤醒继续执行wait调用的后续操作，然后等待其他的子进程。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; 如果一个进程调用signal系统调用，并设置了SIGCLD的处理方法，并且该进程有子进程处于僵死状态，则内核将向该进程发一个SIGCLD信号。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2、setjmp和longjmp的作用&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  前面在介绍信号处理机制时，多次提到了setjmp和longjmp，但没有仔细说明它们的作用和实现方法。这里就此作一个简单的介绍。 &lt;br/&gt;
</span><span class='line'>  在 介绍信号的时候，我们看到多个地方要求进程在检查收到信号后，从原来的系统调用中直接返回，而不是等到该调用完成。这种进程突然改变其上下文的情况，就是 使用setjmp和longjmp的结果。setjmp将保存的上下文存入用户区，并继续在旧的上下文中执行。这就是说，进程执行一个系统调用，当因为资 源或其他原因要去睡眠时，内核为进程作了一次setjmp，如果在睡眠中被信号唤醒，进程不能再进入睡眠时，内核为进程调用longjmp，该操作是内核 为进程将原先setjmp调用保存在进程用户区的上下文恢复成现在的上下文，这样就使得进程可以恢复等待资源前的状态，而且内核为setjmp返回1，使 得进程知道该次系统调用失败。这就是它们的作用。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[Linux内核CPU负载均衡机制]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-balance/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-02-11T14:00:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/02/11/kernel-sched-balance&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://www.oenhan.com/cpu-load-balance"&gt;http://www.oenhan.com/cpu-load-balance&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; 还是神奇的进程调度问题引发的，参看Linux进程组调度机制分析，组调度机制是看清楚了，发现在重启过程中，很多内核调用栈阻塞在了double_rq_lock函数上，而double_rq_lock则是load_balance触发的，怀疑当时的核间调度出现了问题，在某个负责场景下产生了多核互锁，后面看了一下CPU负载平衡下的代码实现，写一下总结。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核代码版本：kernel-3.0.13-0.27。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核代码函数起自load_balance函数,从load_balance函数看引用它的函数可以一直找到schedule函数这里，便从这里开始往下看，在__schedule中有下面一句话。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>if (unlikely(!rq-&gt;nr_running))
</span><span class='line'>    idle_balance(cpu, rq);
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>从上面可以看出什么时候内核会尝试进行CPU负载平衡：即当前CPU运行队列为NULL的时候。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;CPU负载平衡有两种方式：pull和push，即空闲CPU从其他忙的CPU队列中拉一个进程到当前CPU队列；或者忙的CPU队列将一个进程推送到空闲的CPU队列中。idle_balance干的则是pull的事情，具体push下面会提到。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在idle_balance里面，有一个proc阀门控制当前CPU是否pull:
</span><span class='line'>&lt;code&gt;
</span><span class='line'>if (this_rq-&gt;avg_idle &lt; sysctl_sched_migration_cost)
</span><span class='line'>    return;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>sysctl_sched_migration_cost对应proc控制文件是/proc/sys/kernel/sched_migration_cost，开关代表如果CPU队列空闲了500ms（sysctl_sched_migration_cost默认值）以上，则进行pull，否则则返回。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for_each_domain(this_cpu, sd) 则是遍历当前CPU所在的调度域，可以直观的理解成一个CPU组，类似task_group，核间平衡指组内的平衡。负载平衡有一个矛盾就是：负载平衡的频度和CPU cache的命中率是矛盾的，CPU调度域就是将各个CPU分成层次不同的组，低层次搞定的平衡就绝不上升到高层次处理，避免影响cache的命中率。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图例如下;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-02-11-1.jpg" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;最终通过load_balance进入正题。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先通过find_busiest_group获取当前调度域中的最忙的调度组，首先update_sd_lb_stats更新sd的状态，也就是遍历对应的sd，将sds里面的结构体数据填满，如下：</span></code></pre></td></tr></table></div></figure>
    struct sd_lb_stats {
        struct sched_group <em>busiest; /</em> Busiest group in this sd <em>/
        struct sched_group </em>this;  /<em> Local group in this sd </em>/
        unsigned long total_load;  /<em> Total load of all groups in sd </em>/
        unsigned long total_pwr;   /<em>   Total power of all groups in sd </em>/
        unsigned long avg_load;    /<em> Average load across all groups in sd </em>/</p>

<pre><code>    /** Statistics of this group */
    unsigned long this_load; //当前调度组的负载
    unsigned long this_load_per_task; //当前调度组的平均负载
    unsigned long this_nr_running; //当前调度组内运行队列中进程的总数
    unsigned long this_has_capacity;
    unsigned int  this_idle_cpus;

    /* Statistics of the busiest group */
    unsigned int  busiest_idle_cpus;
    unsigned long max_load; //最忙的组的负载量
    unsigned long busiest_load_per_task; //最忙的组中平均每个任务的负载量
    unsigned long busiest_nr_running; //最忙的组中所有运行队列中进程的个数
    unsigned long busiest_group_capacity;
    unsigned long busiest_has_capacity;
    unsigned int  busiest_group_weight;
</code></pre>

<pre><code></code></pre>

<pre><code>do
{
    local_group = cpumask_test_cpu(this_cpu, sched_group_cpus(sg));
    if (local_group) {
                  //如果是当前CPU上的group，则进行赋值
        sds-&gt;this_load = sgs.avg_load;
        sds-&gt;this = sg;
        sds-&gt;this_nr_running = sgs.sum_nr_running;
        sds-&gt;this_load_per_task = sgs.sum_weighted_load;
        sds-&gt;this_has_capacity = sgs.group_has_capacity;
        sds-&gt;this_idle_cpus = sgs.idle_cpus;
    } else if (update_sd_pick_busiest(sd, sds, sg, &amp;sgs, this_cpu)) {
                 //在update_sd_pick_busiest判断当前sgs的是否超过了之前的最大值，如果是
                 //则将sgs值赋给sds
        sds-&gt;max_load = sgs.avg_load;
        sds-&gt;busiest = sg;
        sds-&gt;busiest_nr_running = sgs.sum_nr_running;
        sds-&gt;busiest_idle_cpus = sgs.idle_cpus;
        sds-&gt;busiest_group_capacity = sgs.group_capacity;
        sds-&gt;busiest_load_per_task = sgs.sum_weighted_load;
        sds-&gt;busiest_has_capacity = sgs.group_has_capacity;
        sds-&gt;busiest_group_weight = sgs.group_weight;
        sds-&gt;group_imb = sgs.group_imb;
    }
    sg = sg-&gt;next;
} while (sg != sd-&gt;groups);
</code></pre>

<pre><code>
决定选择调度域中最忙的组的参照标准是该组内所有 CPU上负载(load) 的和， 找到组中找到忙的运行队列的参照标准是该CPU运行队列的长度， 即负载，并且 load 值越大就表示越忙。在平衡的过程中，通过比较当前队列与以前记录的busiest 的负载情况，及时更新这些变量，让 busiest 始终指向域内最忙的一组，以便于查找。

调度域的平均负载计算
</code></pre>

<pre><code>sds.avg_load = (SCHED_POWER_SCALE * sds.total_load) / sds.total_pwr;
if (sds.this_load &gt;= sds.avg_load)
    goto out_balanced;
</code></pre>

<pre><code>在比较负载大小的过程中， 当发现当前运行的CPU所在的组中busiest为空时，或者当前正在运行的 CPU队列就是最忙的时， 或者当前 CPU队列的负载不小于本组内的平均负载时，或者不平衡的额度不大时，都会返回 NULL 值，即组组之间不需要进行平衡；当最忙的组的负载小于该调度域的平均负载时，只需要进行小范围的负载平衡；当要转移的任务量小于每个进程的平均负载时，如此便拿到了最忙的调度组。

然后find_busiest_queue中找到最忙的调度队列，遍历该组中的所有 CPU 队列，经过依次比较各个队列的负载，找到最忙的那个队列。
</code></pre>

<pre><code>for_each_cpu(i, sched_group_cpus(group)) {
    /*rq-&gt;cpu_power表示所在处理器的计算能力,在函式sched_init初始化时,会把这值设定为SCHED_LOAD_SCALE (=Nice 0的Load Weight=1024).并可透过函式update_cpu_power (in kernel/sched_fair.c)更新这个值.*/
    unsigned long power = power_of(i);
    unsigned long capacity = DIV_ROUND_CLOSEST(power,SCHED_POWER_SCALE);
    unsigned long wl;
    if (!cpumask_test_cpu(i, cpus))
        continue;

    rq = cpu_rq(i);
</code></pre>

<p>/<em>获取队列负载cpu_rq(cpu)->load.weight;</em>/
        wl = weighted_cpuload(i);</p>

<pre><code>    /*
     * When comparing with imbalance, use weighted_cpuload()
     * which is not scaled with the cpu power.
     */
    if (capacity &amp;&amp; rq-&gt;nr_running == 1 &amp;&amp; wl &gt; imbalance)
        continue;

    /*
     * For the load comparisons with the other cpu's, consider
     * the weighted_cpuload() scaled with the cpu power, so that
     * the load can be moved away from the cpu that is potentially
     * running at a lower capacity.
     */
    wl = (wl * SCHED_POWER_SCALE) / power;

    if (wl &gt; max_load) {
        max_load = wl;
        busiest = rq;
    }
</code></pre>

<pre><code>通过上面的计算，便拿到了最忙队列。  
当busiest-&gt;nr_running运行数大于1的时候，进行pull操作，pull前对move_tasks,先进行double_rq_lock加锁处理。
</code></pre>

<pre><code>double_rq_lock(this_rq, busiest);
ld_moved = move_tasks(this_rq, this_cpu, busiest,
        imbalance, sd, idle, &amp;all_pinned);
double_rq_unlock(this_rq, busiest);
</code></pre>

<pre><code>move_tasks进程pull task是允许失败的，即move_tasks-&gt;balance_tasks，在此处，有sysctl_sched_nr_migrate开关控制进程迁移个数，对应proc的是/proc/sys/kernel/sched_nr_migrate。

下面有can_migrate_task函数检查选定的进程是否可以进行迁移，迁移失败的原因有3个，1.迁移的进程处于运行状态；2.进程被绑核了，不能迁移到目标CPU上；3.进程的cache仍然是hot，此处也是为了保证cache命中率。
</code></pre>

<pre><code>/*关于cache cold的情况下，如果迁移失败的个数太多，仍然进行迁移
 * Aggressive migration if:
 * 1) task is cache cold, or
 * 2) too many balance attempts have failed.
 */

tsk_cache_hot = task_hot(p, rq-&gt;clock_task, sd);
if (!tsk_cache_hot ||
    sd-&gt;nr_balance_failed &gt; sd-&gt;cache_nice_tries) {
</code></pre>

<h1>ifdef CONFIG_SCHEDSTATS</h1>

<pre><code>    if (tsk_cache_hot) {
        schedstat_inc(sd, lb_hot_gained[idle]);
        schedstat_inc(p, se.statistics.nr_forced_migrations);
    }
</code></pre>

<h1>endif</h1>

<pre><code>    return 1;
}
</code></pre>

<pre><code>
判断进程cache是否有效，判断条件，进程的运行的时间大于proc控制开关sysctl_sched_migration_cost，对应目录/proc/sys/kernel/sched_migration_cost_ns
</code></pre>

<pre><code>static int
task_hot(struct task_struct *p, u64 now, struct sched_domain *sd)
{
        s64 delta;
    delta = now - p-&gt;se.exec_start;
    return delta &lt; (s64)sysctl_sched_migration_cost;
}
</code></pre>

<pre><code>在load_balance中，move_tasks返回失败也就是ld_moved==0，其中sd-&gt;nr_balance_failed++对应can_migrate_task中的”too many balance attempts have failed”,然后busiest-&gt;active_balance = 1设置，active_balance = 1。
</code></pre>

<pre><code>if (active_balance)
//如果pull失败了，开始触发push操作
stop_one_cpu_nowait(cpu_of(busiest),
    active_load_balance_cpu_stop, busiest,
    &amp;busiest-&gt;active_balance_work);
</code></pre>

<pre><code>push整个触发操作代码机制比较绕，stop_one_cpu_nowait把active_load_balance_cpu_stop添加到cpu_stopper每CPU变量的任务队列里面，如下：
</code></pre>

<pre><code>void stop_one_cpu_nowait(unsigned int cpu, cpu_stop_fn_t fn, void *arg,
            struct cpu_stop_work *work_buf)
{
    *work_buf = (struct cpu_stop_work){ .fn = fn, .arg = arg, };
    cpu_stop_queue_work(&amp;per_cpu(cpu_stopper, cpu), work_buf);
}
</code></pre>

<pre><code>而cpu_stopper则是cpu_stop_init函数通过cpu_stop_cpu_callback创建的migration内核线程，触发任务队列调度。因为migration内核线程是绑定每个核心上的，进程迁移失败的1和3问题就可以通过push解决。active_load_balance_cpu_stop则调用move_one_task函数迁移指定的进程。

上面描述的则是整个pull和push的过程，需要补充的pull触发除了schedule后触发，还有scheduler_tick通过触发中断，调用run_rebalance_domains再调用rebalance_domains触发，不再细数。
</code></pre>

<pre><code>void __init sched_init(void)
{
      open_softirq(SCHED_SOFTIRQ, run_rebalance_domains);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
