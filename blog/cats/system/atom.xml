<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-05-13T14:20:30+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[隐藏权限--无法添加用户和组等]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/02/09/system-base-attr/"/>
    <updated>2015-02-09T15:59:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/02/09/system-base-attr</id>
    <content type="html"><![CDATA[<p>执行命令：
<code>
[root@localhost softwaretools]# groupadd mysql
groupadd：无法打开组文件（groupadd: unable to open group file）
</code></p>

<p>此时就奇怪了，当前用的明明是root用户，为什么没有创建组和用户的权限呢。</p>

<p>结论：
<code>
1，添加用户需要用到passwd和shadow这两个文件
2，添加组需要用到shadow和gshadow这两个文件
</code></p>

<p>使用 ls -l 命令发现权限正常。</p>

<p>最终发现问题，找到了2个命令（lsattr和chattr），是因为隐藏权限在作怪：<br/>
对这2个命令的简单做下说明：<br/>
  对于某些有特殊要求的档案(如服务器日志)还可以追加隐藏权限的设定。这些隐藏权限包括： Append only (a), compressed &copy;, no dump (d), immutable (i), data journalling (j),secure deletion (s), no tail-merging (t), undeletable (u), no atime updates (A), synchronous directory updates (D), synchronous updates (S), and top of directory hierarchy (T).  <br/>
  lsattr命令是查看隐藏权限设定情况的，chattr是变更隐藏权限的命令。</p>

<p>首先使用使用lsattr查看了一下这几个文件：
<code>
    [root@localhost ~]# lsattr /etc/passwd  
    ------------- /etc/passwd  
    [root@localhost ~]# lsattr /etc/group  
    ----i-------- /etc/group  
    [root@localhost ~]# lsattr /etc/shadow  
    ------------- /etc/shadow  
    [root@localhost ~]# lsattr /etc/gshadow  
    ----i-------- /etc/gshadow  
</code></p>

<p>可以看到文件被设置的 i 这个隐藏权限，<br/>
i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。<br/>
i参数对于文件 系统的安全设置有很大帮助。</p>

<p>既然这样只要把i权限去掉就应该好了。</p>

<p>使用命令chattr命令修改文件隐藏权限，执行如下命令：
<code>
    chattr -i /etc/gshadow
    chattr -i /etc/group
</code>
然后可以正常执行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grub修复]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/30/system-base-fix-grub/"/>
    <updated>2015-01-30T09:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/30/system-base-fix-grub</id>
    <content type="html"><![CDATA[<p><a href="http://www.centoscn.com/CentosBug/osbug/2014/0327/2671.html">http://www.centoscn.com/CentosBug/osbug/2014/0327/2671.html</a></p>

<p>grub全称在为GRand Unified Bootloader,它的核心功能是引导内核，但是如果grub出了问题，内核无法找到，那岂不是万劫不复了，下面就介绍一下常用的修复方式。</p>

<h4>第一种情况:</h4>

<p>是由于grub中的grub.conf文件损坏，开机后直接进入到了grub>命令行模式下。下面将图解此过程</p>

<p><img src="/images/system/grub/2015-01-30-1.jpg" alt="" /></p>

<p>这时可以使用help看一下grub可支持命令有那些，以便供修复时使用。</p>

<p><img src="/images/system/grub/2015-01-30-2.jpg" alt="" /></p>

<p>第二个使用的命令是find (hd0,0)/按tab如果能补全就表示系统在此分区上。</p>

<p><img src="/images/system/grub/2015-01-30-3.jpg" alt="" /></p>

<p>各个参数说明：</p>

<p><img src="/images/system/grub/2015-01-30-4.jpg" alt="" /></p>

<p>这时要注意，当你指定内核后，但未指定内核后面的参数（ro root=(此处未指定的话)）将无法正常启动，报：请给root参数，一般情况下是系统是可以自动探测到，但这个功能并不靠谱，那么只能靠备份或你的记忆将参数补上（所以定期备份/etc/fstab、与grub.conf、是多么重要的事情，原因你懂的。）</p>

<p>如下图：</p>

<p><img src="/images/system/grub/2015-01-30-5.jpg" alt="" /></p>

<p>而这时就看到你平时的习惯了，备份相当重要</p>

<p><img src="/images/system/grub/2015-01-30-6.jpg" alt="" /></p>

<p>当正常登录系统后，将grub.conf文件重新写就可以了。（上图的完整路径是root=/dev/mapper/vg_www-lv_root，写全了就看不到了，所以在此特别说明）</p>

<p><img src="/images/system/grub/2015-01-30-7.jpg" alt="" /></p>

<p>看到title了吧</p>

<p><img src="/images/system/grub/2015-01-30-8.jpg" alt="" /></p>

<p>过了下面这张图就说明系统是可以正常启动了</p>

<p><img src="/images/system/grub/2015-01-30-9.jpg" alt="" /></p>

<p>第一种情况顺利解决!a_c</p>

<h4>第二种情况：</h4>

<p>grub损坏（最明显的提示为：Operating System not found）</p>

<p>如mbr数据损坏（注仅是bootloader损坏，分区表是好的），如果没有重新启动还可能修复，但是如果是重启后发现grub损坏，那么只能挂载光盘进入紧急救援模式。（以下将以挂载光盘说明）</p>

<p><img src="/images/system/grub/2015-01-30-10.jpg" alt="" /></p>

<p>dd执行之后的景象，是不是好惊悚a_c</p>

<p><img src="/images/system/grub/2015-01-30-11.jpg" alt="" /></p>

<p>挂载光盘进入紧急救援模式,在BIOS中将光盘设置为第一引导设备。</p>

<p><img src="/images/system/grub/2015-01-30-12.jpg" alt="" /></p>

<p>在菜单中选择"Rescue installed system"</p>

<p><img src="/images/system/grub/2015-01-30-13.jpg" alt="" /></p>

<p>之后将对：语言&mdash;-》键盘设置</p>

<p><img src="/images/system/grub/2015-01-30-14.jpg" alt="" /></p>

<p>是否启用网络（不需要，则No,如果选择了Yes将要求选择获取IP地址的方式）</p>

<p><img src="/images/system/grub/2015-01-30-15.jpg" alt="" /></p>

<p>正式进入救援模式</p>

<p><img src="/images/system/grub/2015-01-30-16.jpg" alt="" /></p>

<p>原系统己经挂载的位置，如何切换到原系统下</p>

<p><img src="/images/system/grub/2015-01-30-17.jpg" alt="" /></p>

<p>开启一个shell</p>

<p><img src="/images/system/grub/2015-01-30-18.jpg" alt="" /></p>

<p>切换到原系统</p>

<p><img src="/images/system/grub/2015-01-30-19.jpg" alt="" /></p>

<p>这时可以直接输入grub命令进入grub中（这个grub是光盘中的）</p>

<p><img src="/images/system/grub/2015-01-30-20.jpg" alt="" /></p>

<p>直接使用 help  setup会显示setup的使用方法。</p>

<p>设置root(root默认分区)如（hd0,0），此分区一定要root所在的系统分区，之后使用setup安装，命令是setup(hd0)(由于mbr并属于分区，所以将grub安装到hd0设备即可)，如果是成功了会有succeeded提示。quit退出即可</p>

<p><img src="/images/system/grub/2015-01-30-21.jpg" alt="" /></p>

<p>重启系统，取出光盘，有如下信息就表示修复完成</p>

<p><img src="/images/system/grub/2015-01-30-22.jpg" alt="" /></p>

<p>如果grub目录都损坏，无法正常启动。则可以在此模式使用grub-install &ndash;root-directory=/  /dev/sda（设备是什么就写什么）手写配置文件grub.conf即可</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改、重新生成和安装src.rpm源码包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/30/tools-src-rpm/"/>
    <updated>2014-10-30T09:50:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/30/tools-src-rpm</id>
    <content type="html"><![CDATA[<p>RHEL/CentOS/Fedora/Suse等Linux发行版都使用rpm包作为软件包格式。另外还有一个相关的格式srpm包（后缀是.src.rpm），它包含了源代码，可以用它重新生成rpm包。<br/>
当前最新发行的RHEL/CentOS是6.X版本。目前最新版是RHEL6.5/CentOS6.5。（CentOS是RHEL的免费版本，与RHEL对应版本完全等价，除了去掉了Redhat的LOGO。）<br/>
在如下地址，可以找到RHEL6的所有rpm包的源码包：<em>.src.rpm。<br/>
    <a href="http://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/  ">http://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/  </a>
CentOS就是使用这些</em>src.rpm源码包构建出所有RPM包，生成CentOS操作系统的。<br/>
*src.rpm源码包解压出来后，可以看到有该软件的源代码压缩包和一些patch文件。<br/>
如果rpm包有问题，我们可以去<code>http://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/</code>下载对应的src.rpm包，然后把它解开后修改源代码，重新编译和生成rpm包，进行分发和安装。</p>

<h4>直接安装*src.rpm源码包</h4>

<p>有时，我们没有找到可用的rpm包，但找到了其对应的<em>src.rpm源码包，此时我们可以安装这个</em>src.rpm源码包。步骤与直接安装rpm包很不相同。
<code>
rpm -i /tmp/mypackage-1.0.0-1.src.rpm
</code>
此时还没有安装完成。只是在~/rpmbuild/ 目录下准备了该src.rpm源码包的资源，可用于进一步生成rpm包。
<code>
[user@host ~]$ cd ~/rpmbuild/SPECS
[user@host SPECS]$ rpmbuild -ba mypackage.spec
</code></p>

<h4>你也可以直接使用如下命令：</h4>

<pre><code>rpmbuild --rebuild /tmp/mypackage-1.0.0-1.src.rpm
</code></pre>

<p>这个命令一步即可在～/rpmbuild/RPMS/目录下重新生成rpm包。<br/>
基于*src.rpm源码包修改代码后生成rpm包并安装<br/>
rpmbuild命令基于.spec文件和源码tar.gz及patch文件生成src.rpm和rpm包。<br/>
因此，我们只需要修改.spec文件，或者对应的源码和patch文件，然后再执行<br/>
<code>
rpmbuild -ba mypackage.spec
</code>
命令，就可以生成更新后的src.rpm包和rpm包。rpm包在~/rpmbuild/RPMS目录下，<br/>
src.rpm包在~/rpmbuild/SRPMS目录下。注意,要修改~/rpmbuild/SOURCES/目录下的文件:<br/>
1. 你可以重新打包~/rpmbuild/SOURCES/目录下的tar.gz源文件。<br/>
2. 你可以修改.spec文件，增加或者减少对patch的应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grubby edit centos grub args]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/24/system-grubby/"/>
    <updated>2014-10-24T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/24/system-grubby</id>
    <content type="html"><![CDATA[<p>In Debian/Ubuntu, grub.cfg is fully generated by scripts and any manual changes made to it will be clobbered. In RHEL/CentOS however, grub.cfg is modified by scripts but manual changes are persisted, and is actually the canonical location for certain settings.</p>

<p>The tool which manages grub.cfg is grubby, which is called by /sbin/new-kernel-pkg when kernels are installed or removed. The &ndash;copy-default parameter is passed to grubby when a new kernel is installed, which causes it to copy the kernel parameters from the current default kernel. Setting the default kernel parameters for future-installed kernels is therefore done by editing the entry for the default kernel in grub.cfg.</p>

<p>If you weren&rsquo;t automating this you could simply edit grub.cfg manually and change all the current kernel entries. However, you can use grubby to modify grub.cfg in order to avoid parsing it or writing regular expressions. For example, this will remove the rhgb and quiet parameters from the specified kernel version.</p>

<pre><code>$ grubby --update-kernel=/boot/vmlinuz-2.6.32-220.13.1.el6.x86_64 --remove-args="rhgb quiet"
</code></pre>

<p>There doesn&rsquo;t seem to be an option to list the currently configured kernels however, so you&rsquo;ll have to discover these another way. One option is to just look for vmlinuz files in /boot/:</p>

<pre><code>#!/bin/sh
for KERNEL in /boot/vmlinuz-*; do
    grubby --update-kernel="$KERNEL" --remove-args="rhgb quiet"
done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grub]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/24/system-grub/"/>
    <updated>2014-10-24T15:53:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/24/system-grub</id>
    <content type="html"><![CDATA[<p>在命令行状态，可以根据需要加载或移除相应模块，也可用来启动在菜单没有显现的的系统。
比如，在第一硬盘的第一分区上装有windows xp系统，但在菜单上没显示出来，我们可以命令行状态下输入命令启动：
<code>
    grub&gt;set root=(hd0,1)
    grub&gt;chainloader +1
    grub&gt;boot
</code>
又比如启动第二硬盘第一逻辑分区上的ubuntu系统：
<code>
    grub&gt;set root=(hd1,5)
    grub&gt;linux /boot/vmlinuz-xxx-xxx root=/dev/sdb5
    grub&gt;initrd /boot/initrd.img-xxx-xxx
    grub&gt;boot
</code>
其中内核vmlinuz和initrd.img的版本号可用按Tab键自动查看。</p>
]]></content>
  </entry>
  
</feed>
