<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language~php | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language~php/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-12-04T18:13:16+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP排序函数详解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/04/10/lang-php-sort/"/>
    <updated>2012-04-10T17:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/04/10/lang-php-sort</id>
    <content type="html"><![CDATA[<p>在PHP中，对数组排序的函数有以下几个：</p>

<ol>
<li>sort(array &amp;$array[, int $sort_flags ])函数，该函数只对数组值进行排序，数组索引将随排序后自动分配。可选的第二个参数分别是SORT_REGULAR,SORT_NUMERIC,SORT_STRING,SORT_LOCAL_STRING。在对含有混合类型值的数组排序时要小心，因为 sort() 可能会产生不可预知的结果。</li>
<li>rsort(array &amp;$array[, int $sort_flags ])，与sort()相同，只不过排序顺序相反，rsort()从高到低。</li>
<li>asort(array &amp;$array[, int $sort_flags ])，键值排序，对于要求保持数组索引和键值不变，可以使用该函数。</li>
<li>ksort(array &amp;$array[, int $sort_flags ])，对数组索引排序，主要运用于关联数组。</li>
<li>krsort(&amp;array[, int $sort_flags ])，与ksort相同，只是排序顺序相反，从高到低排序。</li>
<li>arsort(array &amp;$array[, int $sort_flags ])，与asort()相同，只是排序顺序相反，从高到低排序。</li>
<li>natsort(array &amp;$array)，用自然排序算法对数组排序。本函数实现了一个和人们通常对字母数字字符串进行排序的方法一样的排序算法并保持原有键／值的关联，这被称为“自然排序”。</li>
<li>natcasesort(array &amp;$array)，和natsort()相同，只不过在排序时不区分大小写。</li>
<li>usort( array &amp;$array , callback $cmp_function )，本函数将用用户自定义的比较函数对一个数组中的值进行排序。如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。 比较函数必须在第一个参数被认为小于，等于或大于第二个参数时分别返回一个小于，等于或大于零的整数。此函数为 array 中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。
当usort()用于多维数组排序时，自定义排序函数的参数包含到数组第一个索引的引用。
对于CI框架usort($file_list, &lsquo;cmp_func&rsquo;);  更改为usort($file_list, array($this, &lsquo;cmp_func&rsquo;));</li>
<li>uksort(array &amp;$array , callback $cmp_function )，与usort相同，只不过对数组索引排序。</li>
<li>uasort ( array &amp;$array , callback $cmp_function )，与sort相同，在排序时保持索引关联</li>
</ol>

]]></content>
  </entry>
  
</feed>
