<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2015~05 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2015~05/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-05-24T17:17:37+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[字符设备驱动和等待队列样例]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue-sample/"/>
    <updated>2015-05-21T15:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue-sample</id>
    <content type="html"><![CDATA[<p>前两篇的样例</p>

<p><a href="/blog/2015/05/21/kernel-base-chardev/">字符设备驱动程序</a><br/>
<a href="/blog/2015/05/21/kernel-sched-waitqueue/">Linux内核中的等待队列</a></p>

<h4>waitqueue.c</h4>

<pre><code>    #include &lt;linux/module.h&gt;
    #include &lt;linux/init.h&gt;
    #include &lt;linux/fs.h&gt;
    #include &lt;asm/uaccess.h&gt;
    #include &lt;linux/wait.h&gt;
    #include &lt;linux/semaphore.h&gt;
    #include &lt;linux/kernel.h&gt;
    #include &lt;linux/proc_fs.h&gt;

    #include &lt;linux/socket.h&gt;
    #include &lt;linux/tcp.h&gt;
    #include &lt;linux/proc_fs.h&gt;
    #include &lt;net/net_namespace.h&gt;

    #include &lt;net/tcp.h&gt;


    static ssize_t globalvar_read(struct file *, char *, size_t, loff_t*);
    static ssize_t globalvar_write(struct file *, const char *, size_t, loff_t*);

    struct file_operations globalvar_fops =
    {
        .owner   = THIS_MODULE,
        .read = globalvar_read,
        .write = globalvar_write,
    };

    #define LEN 1024
    static char global_var[LEN];
    static int read_index = 0;
    static int write_index = 0;
    static spinlock_t var_lock;
    static wait_queue_head_t waitq;
    static int flag = 0;
    static int major;

    static const char procname[] = "testvar";

    static int __init globalvar_init(void)
    {
        init_waitqueue_head(&amp;waitq);
        spin_lock_init(&amp;var_lock);
    //  if (!proc_net_fops_create(&amp;init_net, procname, S_IRUSR, &amp;globalvar_fops)) {
        if (!(major = register_chrdev(0, "globalvar", &amp;globalvar_fops))) {
            printk("globalvar register failure\n");
            return -1;
        }
        printk("major = %d\n", major);
        return 0;
    }

    static void __exit globalvar_exit(void)
    {
    //  proc_net_remove(&amp;init_net, procname);
        unregister_chrdev(major, "globalvar");
    }

    static ssize_t globalvar_read(struct file *filp, char *buf, size_t len, loff_t *off)
    {
        int read_len;
        //等待数据可获得
        if (wait_event_interruptible(waitq, flag != 0))
            return -ERESTARTSYS;

        spin_lock(&amp;var_lock);
        read_len = write_index - read_index;
        if (copy_to_user(buf, global_var+read_index, read_len)) {
            spin_unlock(&amp;var_lock);
            return -EFAULT;
        }
        read_index = write_index;
        flag = 0;
        spin_unlock(&amp;var_lock);
        return read_len;
    }

    static ssize_t globalvar_write(struct file *filp, const char *buf, size_t len, loff_t *off)
    {
        spin_lock(&amp;var_lock);
        if (copy_from_user(global_var+write_index, buf, len)) {
            spin_unlock(&amp;var_lock);
            return -EFAULT;
        }
        write_index += len;
        spin_unlock(&amp;var_lock);

        flag = 1;
        //通知数据可获得
        wake_up_interruptible(&amp;waitq);
        return len;
    }

    module_init(globalvar_init);
    module_exit(globalvar_exit);
    MODULE_LICENSE("GPL");
</code></pre>

<h4>Makefile</h4>

<pre><code>    obj-m += waitqueue.o

    PWD = $(shell pwd)
    KERNEL := /lib/modules/`uname -r`/build

    all:
        make -C $(KERNEL) M=$(PWD) modules
</code></pre>

<h5>安装模块</h5>

<pre><code>    insmod ./waitqueue.ko
</code></pre>

<h5>查看对应的设备号</h5>

<pre><code>    $ cat /proc/devices | grep globalvar
    $ 249 globalvar
</code></pre>

<h5>建立文件</h5>

<pre><code>    mknod /dev/globalvar c 249 0
</code></pre>

<h5>终端1: cat文件</h5>

<pre><code>    cat /dev/globalvar
</code></pre>

<h5>终端2: echo数据到文件</h5>

<pre><code>    echo 123 &gt; /dev/globalvar
    echo 1234567 &gt; /dev/globalvar
    echo 123 &gt; /dev/globalvar
</code></pre>

<p>这时就能看见终端1读到了内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核中的等待队列]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue/"/>
    <updated>2015-05-21T15:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_49d5604e010008bn.html">http://blog.sina.com.cn/s/blog_49d5604e010008bn.html</a></p>

<p>等待队列可以参考net/ipv4/tcp_probe.c的实现</p>

<p><a href="/blog/2015/05/21/kernel-sched-waitqueue-sample/">简单样例</a></p>

<h4>Linux内核中的等待队列</h4>

<p>  Linux内核的等待队列是以双循环链表为基础数据结构，与进程调度机制紧密结合，能够用于实现核心的异步事件通知机制。在Linux2.4.21中，等待队列在源代码树include/linux/wait.h中，这是一个通过list_head连接的典型双循环链表，</p>

<p>如下图所示。</p>

<p><img src="/images/kernel/2015-05-21.jpg" alt="" /></p>

<p>  在这个链表中，有两种数据结构：等待队列头（wait_queue_head_t）和等待队列项（wait_queue_t）。等待队列头和等待队列项中都包含一个list_head类型的域作为"连接件"。由于我们只需要对队列进行添加和删除操作，并不会修改其中的对象（等待队列项），因此，我们只需要提供一把保护整个基础设施和所有对象的锁，这把锁保存在等待队列头中，为wq_lock_t类型。在实现中，可以支持读写锁（rwlock）或自旋锁（spinlock）两种类型，通过一个宏定义来切换。如果使用读写锁，将wq_lock_t定义为rwlock_t类型；如果是自旋锁，将wq_lock_t定义为spinlock_t类型。无论哪种情况，分别相应设置wq_read_lock、wq_read_unlock、wq_read_lock_irqsave、wq_read_unlock_irqrestore、wq_write_lock_irq、wq_write_unlock、wq_write_lock_irqsave和wq_write_unlock_irqrestore等宏。</p>

<h5>等待队列头</h5>

<pre><code>    struct __wait_queue_head {
        wq_lock_t lock;
        struct list_head task_list;
    };
    typedef struct __wait_queue_head wait_queue_head_t;
</code></pre>

<p>  前面已经说过，等待队列的主体是进程，这反映在每个等待队列项中，是一个任务结构指针（struct task_struct * task）。flags为该进程的等待标志，当前只支持互斥。</p>

<h5>等待队列项</h5>

<pre><code>    struct __wait_queue {
        unsigned int flags;
    #define WQ_FLAG_EXCLUSIVE 0x01
        struct task_struct * task;
        struct list_head task_list;
    };
    typedef struct __wait_queue wait_queue_t;
</code></pre>

<h5>声明和初始化</h5>

<pre><code>    #define DECLARE_WAITQUEUE(name, tsk)            \
        wait_queue_t name = __WAITQUEUE_INITIALIZER(name, tsk)
    #define __WAITQUEUE_INITIALIZER(name, tsk) {    \
        task:  tsk,                                 \
        task_list: { NULL, NULL },                  \
        __WAITQUEUE_DEBUG_INIT(name)}
</code></pre>

<p>  通过DECLARE_WAITQUEUE宏将等待队列项初始化成对应的任务结构，并且用于连接的相关指针均设置为空。其中加入了调试相关代码。
<code>
    #define DECLARE_WAIT_QUEUE_HEAD(name)                    \
        wait_queue_head_t name = __WAIT_QUEUE_HEAD_INITIALIZER(name)
    #define __WAIT_QUEUE_HEAD_INITIALIZER(name) {            \
        lock:  WAITQUEUE_RW_LOCK_UNLOCKED,                   \
        task_list: { &amp;(name).task_list, &amp;(name).task_list }, \
        __WAITQUEUE_HEAD_DEBUG_INIT(name)}
</code></p>

<p>  通过DECLARE_WAIT_QUEUE_HEAD宏初始化一个等待队列头，使得其所在链表为空，并设置链表为"未上锁"状态。其中加入了调试相关代码。
<code>
    static inline void init_waitqueue_head(wait_queue_head_t *q)
</code></p>

<p>该函数初始化一个已经存在的等待队列头，它将整个队列设置为"未上锁"状态，并将链表指针prev和next指向它自身。
<code>
    {
        q-&gt;lock = WAITQUEUE_RW_LOCK_UNLOCKED;
        INIT_LIST_HEAD(&amp;q-&gt;task_list);
    }
    static inline void init_waitqueue_entry(wait_queue_t *q, struct task_struct *p)
</code></p>

<p>该函数初始化一个已经存在的等待队列项，它设置对应的任务结构，同时将标志位清0。
<code>
    {
        q-&gt;flags = 0;
        q-&gt;task = p;
    }
    static inline int waitqueue_active(wait_queue_head_t *q)
</code>
该函数检查等待队列是否为空。
<code>
    {
        return !list_empty(&amp;q-&gt;task_list);
    }
    static inline void __add_wait_queue(wait_queue_head_t *head, wait_queue_t *new)
</code></p>

<p>将指定的等待队列项new添加到等待队列头head所在的链表头部，该函数假设已经获得锁。
<code>
    {
        list_add(&amp;new-&gt;task_list, &amp;head-&gt;task_list);
    }
    static inline void __add_wait_queue_tail(wait_queue_head_t *head, wait_queue_t *new)
</code></p>

<p>将指定的等待队列项new添加到等待队列头head所在的链表尾部，该函数假设已经获得锁。
<code>
    {
        list_add_tail(&amp;new-&gt;task_list, &amp;head-&gt;task_list);
    }
    static inline void __remove_wait_queue(wait_queue_head_t *head, wait_queue_t *old)
</code>
将函数从等待队列头head所在的链表中删除指定等待队列项old，该函数假设已经获得锁，并且old在head所在链表中。
<code>
    {
        list_del(&amp;old-&gt;task_list);
    }
</code></p>

<h4>睡眠和唤醒操作</h4>

<p>对等待队列的操作包括睡眠和唤醒（相关函数保存在源代码树的/kernel/sched.c和include/linux/sched.h中）。思想是更改当前进程（CURRENT）的任务状态，并要求重新调度，因为这时这个进程的状态已经改变，不再在调度表的就绪队列中，因此无法再获得执行机会，进入"睡眠"状态，直至被"唤醒"，即其任务状态重新被修改回就绪态。</p>

<p>常用的睡眠操作有interruptible_sleep_on和sleep_on。两个函数类似，只不过前者将进程的状态从就绪态（TASK_RUNNING）设置为TASK_INTERRUPTIBLE，允许通过发送signal唤醒它（即可中断的睡眠状态）；而后者将进程的状态设置为TASK_UNINTERRUPTIBLE，在这种状态下，不接收任何singal。</p>

<p>以interruptible_sleep_on为例，其展开后的代码是：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void interruptible_sleep_on(wait_queue_head_t &lt;em&gt;q)
</span><span class='line'>{
</span><span class='line'>    unsigned long flags;
</span><span class='line'>    wait_queue_t wait;
</span><span class='line'>    /&lt;/em&gt; 构造当前进程对应的等待队列项 */
</span><span class='line'>    init_waitqueue_entry(&amp;wait, current);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    /* 将当前进程的状态从TASK_RUNNING改为TASK_INTERRUPTIBLE */
</span><span class='line'>current-&gt;state = TASK_INTERRUPTIBLE;
</span><span class='line'>
</span><span class='line'>/* 将等待队列项添加到指定链表中 */
</span><span class='line'>wq_write_lock_irqsave(&amp;q-&gt;lock,flags);
</span><span class='line'>__add_wait_queue(q, &amp;wait); 
</span><span class='line'>wq_write_unlock(&amp;q-&gt;lock);
</span><span class='line'>
</span><span class='line'>/* 进程重新调度，放弃执行权 */
</span><span class='line'>schedule();
</span><span class='line'>
</span><span class='line'>/* 本进程被唤醒，重新获得执行权，首要之事是将等待队列项从链表中删除 */
</span><span class='line'>wq_write_lock_irq(&amp;q-&gt;lock);
</span><span class='line'>__remove_wait_queue(q, &amp;wait);
</span><span class='line'>wq_write_unlock_irqrestore(&amp;q-&gt;lock,flags);
</span><span class='line'>/* 至此，等待过程结束，本进程可以正常执行下面的逻辑 */
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>对应的唤醒操作包括wake_up_interruptible和wake_up。wake_up函数不仅可以唤醒状态为TASK_UNINTERRUPTIBLE的进程，而且可以唤醒状态为TASK_INTERRUPTIBLE的进程。
</span><span class='line'>
</span><span class='line'>wake_up_interruptible只负责唤醒状态为TASK_INTERRUPTIBLE的进程。这两个宏的定义如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define wake_up(x)   __wake_up((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE, 1)
</span><span class='line'>#define wake_up_interruptible(x) __wake_up((x),TASK_INTERRUPTIBLE, 1)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>__wake_up函数主要是获取队列操作的锁，具体工作是调用__wake_up_common完成的。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void __wake_up(wait_queue_head_t *q, unsigned int mode, int nr)
</span><span class='line'>{
</span><span class='line'>if (q) {
</span><span class='line'>    unsigned long flags;
</span><span class='line'>    wq_read_lock_irqsave(&amp;q-&gt;lock, flags);
</span><span class='line'>    __wake_up_common(q, mode, nr, 0);
</span><span class='line'>    wq_read_unlock_irqrestore(&amp;q-&gt;lock, flags);
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>/* The core wakeup function.  Non-exclusive wakeups (nr_exclusive == 0) just wake everything up.  If it's an exclusive wakeup (nr_exclusive == small +ve number) then we wake all the non-exclusive tasks and one exclusive task.
</span><span class='line'>There are circumstances in which we can try to wake a task which has already started to run but is not in state TASK_RUNNING.  try_to_wake_up() returns zero in this (rare) case, and we handle it by contonuing to scan the queue. */
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline void __wake_up_common (wait_queue_head_t *q, unsigned int mode, int nr_exclusive, const int sync)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>参数q表示要操作的等待队列，mode表示要唤醒任务的状态，如TASK_UNINTERRUPTIBLE或TASK_INTERRUPTIBLE等。nr_exclusive是要唤醒的互斥进程数目，在这之前遇到的非互斥进程将被无条件唤醒。sync表示？？？
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;{
</span><span class='line'>struct list_head *tmp;
</span><span class='line'>struct task_struct *p;
</span><span class='line'>
</span><span class='line'>CHECK_MAGIC_WQHEAD(q);
</span><span class='line'>WQ_CHECK_LIST_HEAD(&amp;q-&gt;task_list);
</span><span class='line'>
</span><span class='line'>/* 遍历等待队列 */
</span><span class='line'>list_for_each(tmp,&amp;q-&gt;task_list) {
</span><span class='line'>    unsigned int state;
</span><span class='line'>    /* 获得当前等待队列项 */
</span><span class='line'>    wait_queue_t *curr = list_entry(tmp, wait_queue_t, task_list);
</span><span class='line'>
</span><span class='line'>    CHECK_MAGIC(curr-&gt;__magic);
</span><span class='line'>    /* 获得对应的进程 */
</span><span class='line'>    p = curr-&gt;task;
</span><span class='line'>    state = p-&gt;state;
</span><span class='line'>
</span><span class='line'>    /* 如果我们需要处理这种状态的进程 */
</span><span class='line'>    if (state &amp; mode) {
</span><span class='line'>        WQ_NOTE_WAKER(curr);
</span><span class='line'>        if (try_to_wake_up(p, sync) &amp;&amp; (curr-&gt;flags&amp;WQ_FLAG_EXCLUSIVE) &amp;&amp; !--nr_exclusive)
</span><span class='line'>            break;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>/* 唤醒一个进程，将它放到运行队列中，如果它还不在运行队列的话。"当前"进程总是在运行队列中的（except when the actual re-schedule is in progress)，and as such you're allowed to do the simpler "current-&gt;state = TASK_RUNNING" to mark yourself runnable without the overhead of this. */
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline int try_to_wake_up(struct task_struct * p, int synchronous)
</span><span class='line'>{
</span><span class='line'>unsigned long flags;
</span><span class='line'>int success = 0;
</span><span class='line'>
</span><span class='line'>/* 由于我们需要操作运行队列，必须获得对应的锁 */
</span><span class='line'>spin_lock_irqsave(&amp;runqueue_lock, flags);
</span><span class='line'>/* 将进程状态设置为TASK_RUNNING */
</span><span class='line'>p-&gt;state = TASK_RUNNING;
</span><span class='line'>/* 如果进程已经在运行队列中，释放锁退出 */
</span><span class='line'>if (task_on_runqueue(p))
</span><span class='line'>    goto out;
</span><span class='line'>/* 否则将进程添加到运行队列中 */
</span><span class='line'>add_to_runqueue(p);
</span><span class='line'>
</span><span class='line'>/* 如果设置了同步标志 */
</span><span class='line'>if (!synchronous || !(p-&gt;cpus_allowed &amp; (1UL &lt;&lt; smp_processor_id())))
</span><span class='line'>    reschedule_idle(p);
</span><span class='line'>/* 唤醒成功，释放锁退出 */
</span><span class='line'>success = 1;
</span><span class='line'>out:
</span><span class='line'>spin_unlock_irqrestore(&amp;runqueue_lock, flags);
</span><span class='line'>return success;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 等待队列应用模式
</span><span class='line'>
</span><span class='line'>等待队列的的应用涉及两个进程，假设为A和B。A是资源的消费者，B是资源的生产者。A在消费的时候必须确保资源已经生产出来，为此定义一个资源等待队列。这个队列同时要被进程A和进程B使用，我们可以将它定义为一个全局变量。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;DECLARE_WAIT_QUEUE_HEAD(rsc_queue); /* 全局变量 */
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>在进程A中，执行逻辑如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;while (resource is unavaiable) {
</span><span class='line'>interruptible_sleep_on( &amp;wq );
</span><span class='line'>}
</span><span class='line'>consume_resource();
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>在进程B中，执行逻辑如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;produce_resource();
</span><span class='line'>wake_up_interruptible( &amp;wq );
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[字符设备驱动程序]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-base-chardev/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-05-21T15:58:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/05/21/kernel-base-chardev&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://techlife.blog.51cto.com/212583/39225"&gt;http://techlife.blog.51cto.com/212583/39225&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="/blog/2015/05/21/kernel-sched-waitqueue-sample/"&gt;简单样例&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;实现如下的功能:&lt;br/&gt;
</span><span class='line'>  -字符设备驱动程序的结构及驱动程序需要实现的系统调用&lt;br/&gt;
</span><span class='line'>  -可以使用cat命令或者自编的readtest命令读出"设备"里的内容&lt;br/&gt;
</span><span class='line'>  -以8139网卡为例，演示了I/O端口和I/O内存的使用&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;本文中的大部分内容在Linux Device Driver这本书中都可以找到，这本书是Linux驱动开发者的唯一圣经。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;先来看看整个驱动程序的入口，是char8139_init()这个函数，如果不指定MODULE_LICENSE(&ldquo;GPL&rdquo;), 在模块插入内核的时候会出错，因为将非"GPL"的模块插入内核就沾污了内核的"GPL"属性。</span></code></pre></td></tr></table></div></figure>
    module_init(char8139_init);
    module_exit(char8139_exit);</p>

<pre><code>MODULE_LICENSE("GPL");
MODULE_AUTHOR("ypixunil");
MODULE_DESCRIPTION("Wierd char device driver for Realtek 8139 NIC");
</code></pre>

<pre><code>
接着往下看char8139_init()
</code></pre>

<pre><code>static int __init char8139_init(void)
{
    int result;

    PDBG("hello. init.\n");

    /* register our char device */
    result = register_chrdev(char8139_major, "char8139", &amp;char8139_fops);
    if (result &lt; 0) {
        PDBG("Cannot allocate major device number!\n");
        return result;
    }
    /* register_chrdev() will assign a major device number and return if it called
     * with "major" parameter set to 0 */
    if(char8139_major == 0)
        char8139_major=result;

    /* allocate some kernel memory we need */
    buffer = (unsigned char*)(kmalloc(CHAR8139_BUFFER_SIZE, GFP_KERNEL));
    if (!buffer) {
        PDBG("Cannot allocate memory!\n");
        result = -ENOMEM;
        goto init_fail;
    }
    memset(buffer, 0, CHAR8139_BUFFER_SIZE);
    p_buf = buffer;

    return 0; /* everything's ok */

init_fail:
    char8139_exit();
    return result;
}
</code></pre>

<pre><code>
这个函数首先的工作就是使用register_chrdev()注册我们的设备的主设备号和系统调用。系统调用对于字符设备驱动程序来说就是file_operations接口。

我们先来看看char8139_major的定义，
</code></pre>

<pre><code>#define DEFAULT_MAJOR 145         /* data structure used by our driver */
int char8139_major=DEFAULT_MAJOR; /* major device number. if initial value is 0,
                                   * the kernel will dynamically assign a major device
                                   * number in register_chrdev() */
</code></pre>

<pre><code>
这里我们指定我们的设备的主设备号是145,你必须找到一个系统中没有用的主设备号，可以通过"cat /proc/devices"命令来查看系统中已经使用的主设备号。
</code></pre>

<pre><code>[michael@char8139]$ cat /proc/devices
Character devices:
1 mem
2 pty
3 ttyp
4 ttyS
5 cua
7 vcs
10 misc
14 sound
116 alsa
128 ptm
136 pts
162 raw
180 usb
195 nvidia
226 drm

Block devices:
2 fd
3 ide0
22 ide1
[michael@char8139]$
</code></pre>

<pre><code>
可见在我的系统中，145还没有被使用。

指定主设备号值得考虑。像上面这样指定一个主设备号显然缺乏灵活性，而且不能保证一个驱动程序在所有的机器上都能用。可以在调用register_chrdev()时将第一个参数，即主设备号指定为0,这样register_chrdev()会分配一个空闲的主设备号作为返回值。 但是这样也有问题，我们只有在将模块插入内核之后才能得到我们设备的主设备号(使用 "cat /proc/devices")，但是要操作设备需要在系统/dev目录下建立设备结点，而建立结点时要指定主设备号。当然，你可以写一个脚本来自动完成这些事情。

总之，作为一个演示，我们还是指定主设备号为145，这样我们可以在/dev/目录下建立几个设备节点。
</code></pre>

<pre><code>[root@char8139]$ mknod /dev/char8139_0 c 145 0
[root@char8139]$ mknod /dev/char8139_0 c 145 17
[root@char8139]$ mknod /dev/char8139_0 c 145 36
[root@char8139]$ mknod /dev/char8139_0 c 145 145
</code></pre>

<pre><code>
看一下我们建立的节点
</code></pre>

<pre><code>[michael@char8139]$ ll /dev/char8139*
crw-r--r-- 1 root root 145, 0 2004-12-26 20:33 /dev/char8139_0
crw-r--r-- 1 root root 145, 17 2004-12-26 20:34 /dev/char8139_1
crw-r--r-- 1 root root 145, 36 2004-12-26 20:34 /dev/char8139_2
crw-r--r-- 1 root root 145, 145 2004-12-26 20:34 /dev/char8139_3
[michael@char8139]$
</code></pre>

<pre><code>
我们建立了四个节点，使用了四个次设备号，后面我们会说明次设备号的作用。


再来看看我们的file_operations的定义。这里其实只实现了read()，open()，release()三个系统调用，ioctl()只是简单返回。更有write()等函数甚至根本没有声明，没有声明的函数系统可能会调用默认的操作。
</code></pre>

<pre><code>struct file_operations char8139_fops =
{
    owner: THIS_MODULE,
    read: char8139_read,
    ioctl: char8139_ioctl,
    open: char8139_open,
    release: char8139_release,
};
</code></pre>

<pre><code>
file_operations是每个字符设备驱动程序必须实现的系统调用，当用户对/dev中我们的设备对应结点进行操作时，linux就会调用我们驱动程序中提供的系统调用。比如用户敲入"cat /dev/char8139_0"命令，想想cat这个应用程序的实现，首先它肯定调用C语言库里的open()函数去打开/dev/char8139_0这个文件，到了系统这一层，系统会看到/dev/char8139_0不是普通磁盘文件，而是一个代表字符设备的节点，所以系统会根据/dev/char8139_0的主设备号来查找是不是已经有驱动程序使用这个相同的主设备号进行了注册，如果有，就调用驱动程序的open()实现。

为什么要这样干？因为要提供抽象，提供统一的接口，别忘了操作系统的作用之一就是这个。因为我们的设备提供的统一的接口，所以cat这个应用程序使用一般的文件操作就能从我们的设备中读出数据，
而且more, less这些应用程序都能从我们的设备中读出数据。

现在来看看我们的设备
</code></pre>

<pre><code>#define CHAR8139_BUFFER_SIZE 2000
unsigned char *buffer=NULL; /* driver data buffer */
unsigned char *p_buf;
unsigned int data_size=0;
</code></pre>

<pre><code>我们的设备很简单，一个2000字节的缓冲区， data_size指定缓冲区中有效数据的字节数。我们的设备只支持读不支持写。我们在char8139_init()中为缓冲区分配空间。

char8139_exit()里面的操作就是char8139_init()里面操作的反向操作。

现在我们来看看，假如用户调用了"cat /dev/char8139_3"这个命令会发生什么事情。

根据前面的介绍，我们驱动程序中的open()函数会被调用。
</code></pre>

<pre><code>int char8139_open(struct inode *node, struct file *flip)
{
    int type = MINOR(node-&gt;i_rdev)&gt;&gt;4;
    int num = MINOR(node-&gt;i_rdev) &amp; 0x0F;

    /* put some char in buffer to reflect the minor device number */
    *buffer=(unsigned char)('0');
    *(buffer+1)=(unsigned char)('x');
    *(buffer+2)=(unsigned char)('0'+type);
    *(buffer+3)=(unsigned char)('0'+num);
    *(buffer+4)=(unsigned char)('\n');
    data_size+=5;

    PDBG("Ok. Find treasure! 8139 I/O port base: %x\n", detect_8139_io_port());
    PDBG("OK. Find treasure! 8139 I/O memory base address: %lx\n",
    detect_8139_io_mem());

    MOD_INC_USE_COUNT;

    return 0;
}
</code></pre>

<pre><code>
这里演示了次设备号的作用，它让我们知道用户操作的是哪一个"次设备"，是/dev/char8139_0还是/dev/char8139_3，因为对不同的"次设备"，具体的操作方法可能是不一样的，这样就为一个驱动程序控制多个类似的设备提供了可能。

我们根据次设备号的不同，在buffer中填入不同的字符(次设备号的16进制表示)。

接着驱动程序中的read()函数会被调用，因为cat程序的实现就是读取文件中的内容。
</code></pre>

<pre><code>ssize_t char8139_read (struct file *filp, char *buf, size_t count, loff_t *f_pos)
{
    ssize_t ret=0;

    PDBG("copy to user. count=%d, f_pos=%ld\n", (int)count, (long)*f_pos);
    if (*f_pos&gt;= data_size)
        return ret;
    if (*f_pos + count &gt; data_size)
        count = data_size-*f_pos;
    if (copy_to_user(buf, p_buf, count))
    {
        PDBG("OOps, copy to user error.\n");
        return -EFAULT;
    }

    p_buf += count;
    *f_pos += count;
    ret = count;

    return ret;
}
</code></pre>

<p>```</p>

<p>要正确的实现一个read()调用，你得想一想一个应用程序是如何调用read()从文件中读取数据的。如果你想明白了就很简单，驱动程序所要做的就是把恰当的数据传递给应用程序，这是使用copy_to_user()函数完成的。</p>

<p>另外，我们必须得意识到，这里只是一个很简单的演示。还有很多复杂的问题有待考虑，比如两个应用程序可能同时打开我们设备，我们的设备应该怎样反应(这取决于具体的设备应有的行为)，还有互斥的问题。</p>

<p>然后我们看看I/O端口和I/O内存的操作。这里使用8139网卡作为一个硬件实例来演示I/O端口和I/O内存的操作。没有什么特别的，都是标准的步骤。在使用时需要注意，如果你的系统中已经有8139网卡的驱动程序，必须先关掉网络设备，卸载驱动，然后再使用本驱动程序。</p>

<p>使用程序包的步骤：(在我的Debian系统上如此，你的可能不同)<br/>
1. 解压<br/>
2. 编译(/usr/src/linux处必须要有内核源代码)<br/>
3. ifconfig eth0 down 关掉网络设备<br/>
rmmod 8139too 卸载原来的8139网卡驱动<br/>
insmod char8139.o 插入我们的模块<br/>
(insmod会出错， 如果你现在运行的linux版本不是你编译本驱动程序时使用的内核源代码的版本，insmod时会报告模块版本与内核版本不一致。这时，你得看看内核源代码中/include/linux/version.h文件，这个文件中的UTS_RELEASE定义了内核的版本号，你可以在驱动程序中预先定义这个宏为当前运行的内核的版本号，这样就能避免上述错误。)<br/>
4. mknode(见本文前述)<br/>
5. 试试我们的设备<br/>
./readtest<br/>
或者<br/>
cat /dev/char8139_0或<br/>
cat /dev/char8139_1或<br/>
cat /dev/char8139_2或<br/>
cat /dev/char8139_3<br/>
6. 恢复系统<br/>
rmmod char8139<br/>
modprobe 8139too<br/>
ifconfig eth0 up<br/>
如果你使用dhcp可能还需要运行dhclient</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译android4.4.2源码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/20/android-4.4.2/"/>
    <updated>2015-05-20T15:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/20/android-4.4.2</id>
    <content type="html"><![CDATA[<p>android4.4.2和jdk下载 <a href="http://pan.baidu.com/share/home?uk=3691037096&amp;view=share#category/type=0">http://pan.baidu.com/share/home?uk=3691037096&amp;view=share#category/type=0</a></p>

<p><a href="http://www.cnblogs.com/zhx831/p/3550688.html">http://www.cnblogs.com/zhx831/p/3550688.html</a></p>

<p>这篇文章主要记录了我是如何搭建Android编译环境，以及搭建当中遇到的问题以及解决方法。搭建环境依照官网进行，整个搭建环境分为两步：<br/>
1. 安装JDK<br/>
2. 安装相对应的库以及软件</p>

<h4>1、安装JDK</h4>

<p>官网上给出的办法是使用apt进行jdk的安装
<code>
    $ sudo add-apt-repository "deb http://archive.canonical.com/ lucid partner"
    $ sudo apt-get update
    $ sudo apt-get install sun-java6-jdk
</code>
但是我在按照这个方法进行安装是apt提示无法找到jdk安装包。 在更换了好几个source后都无法下载jdk。因此只能考虑手动安装。</p>

<h5>1. 首先在Orecal官网下载JDK：</h5>

<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html">http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html</a></p>

<p>需要注意的是，现在官方网站上最新的版本的JDK7， 但是这个这个版本是不能用于Android的编译的，一定要去下载JDK6. 希望看到的朋友不要在走我的弯路。</p>

<h5>2. 创建jvm文件夹</h5>

<pre><code>    sudo mkdir /usr/lib/jvm
</code></pre>

<h5>3. 安装JDK6</h5>

<pre><code>    sudo cp jdk-6u45-linux-x64.bin /usr/lib/jvm/
    sudo chmod +x jdk-6u45-linux-x64.bin
    sudo ./jdk-6u45-linux-x64.bin
</code></pre>

<h5>4. 设置环境变量</h5>

<pre><code>    sudo mv jdk1.6.0_45/ jdk6
    export JAVA_HOME=/usr/lib/jvm/jdk6
    export JRE_HOME=${JAVA_HOME}/jre
    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
    export PATH=${JAVA_HOME}/bin:$PATH
</code></pre>

<h5>5. 使能环境变量</h5>

<pre><code>    source ~/.bashrc
</code></pre>

<h5>6. 设置JDK6为系统默认JDK</h5>

<p>因为在ubuntu中默认JDK可能是OpenJDK,这里我们设置JDK6为我们默认的JDK
<code>
    sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk6/bin/java 300
    sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk6/bin/javac 300
    sudo update-alternatives --install /usr/bin/javaws javaws /usr/lib/jvm/jdk6/bin/javaws 300
    sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk6/bin/jar 300
    sudo update-alternatives --config java
</code></p>

<h5>7. 至此JDK就安装好了，现在就可以在shell中查看Java版本</h5>

<pre><code>    java -version
</code></pre>

<p>如果编译还提示java错误，就把java路径加到PATH中
<code>
    PATH=$PATH:/usr/lib/jvm/jdk6/bin
</code></p>

<h4>2、安装相对应的库以及软件</h4>

<p>根据官网上的指示我们需要安装如下软件包和lib
<code>
    $ sudo apt-get install git gnupg flex bison gperf build-essential \
      zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \
      libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \
      libgl1-mesa-dev g++-multilib mingw32 tofrodos \
      python-markdown libxml2-utils xsltproc zlib1g-dev:i386
    $ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so
</code>
* 我安装<code>libgl1-mesa-glx:i386</code>的时候提示要卸掉很多软件，就没装这个，也是能正常编译。</p>

<p>但是在安装过程中遇到了如下错误：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Errors were encountered while processing:
</span><span class='line'>libc6-dev:i386&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;E: Sub-process /usr/bin/dpkg returned an error code (1)
</span><span class='line'>&lt;code&gt;
</span><span class='line'>解决方法如下：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>    $ sudo apt-get install linux-libc-dev:i386
</span><span class='line'>    $ sudo apt-get install libc6-dev:i386</span></code></pre></td></tr></table></div></figure></p>

<hr />

<p><a href="http://blog.csdn.net/yf210yf/article/details/9206269">http://blog.csdn.net/yf210yf/article/details/9206269</a></p>

<p><a href="http://www.cnblogs.com/qianxudetianxia/p/3681890.html">http://www.cnblogs.com/qianxudetianxia/p/3681890.html</a></p>

<h4>编译代码</h4>

<p>进入源码根目录,编译初始化,在终端中执行：
<code>
    source build/envsetup.sh
</code></p>

<p>选择编译目标：
<code>
    lunch
</code>
选择第一个吧，或者直接
<code>
    lunch aosp_arm-eng
</code></p>

<p>开始编译
<code>
    make -j4
</code>
3、5个小时左右吧</p>

<p>Android 完成编译的时候先执行  source build/envsetup.sh。  在这个shell 脚本中定义了 help,  croot, m, mm, mmm 等 function</p>

<h4>运行模拟器</h4>

<p>在终端中执行：emulator</p>

<p><img src="/images/android/2015-05-20.png" alt="" /></p>

<h5>修改和编译系统应用代码</h5>

<p>我们修改一下系统应用Mms的标题：</p>

<p><img src="/images/android/2015-05-21.png" alt="" /></p>

<p>使用mm命令编译：
<code>
    xxx@ubuntu:~/Data/android/packages/apps/Mms$ mm
    ============================================
    PLATFORM_VERSION_CODENAME=REL
    PLATFORM_VERSION=4.4.3.2.1.000.000
    TARGET_PRODUCT=aosp_arm
    TARGET_BUILD_VARIANT=eng
    TARGET_BUILD_TYPE=release
    TARGET_BUILD_APPS=
    TARGET_ARCH=arm
    TARGET_2ND_ARCH=
    TARGET_ARCH_VARIANT=armv7-a
    TARGET_CPU_VARIANT=generic
    HOST_ARCH=x86
    HOST_OS=linux
    HOST_OS_EXTRA=Linux-3.13.0-24-generic-x86_64-with-Ubuntu-14.04-trusty
    HOST_BUILD_TYPE=release
    BUILD_ID=OPENMASTER
    OUT_DIR=out
    ============================================
    make:进入目录'/home/xxx/Data/android'
    target R.java/Manifest.java: Mms (out/target/common/obj/APPS/Mms_intermediates/src/R.stamp)
    warning: string 'menu_insert_smiley' has no default translation.
    target Java: Mms (out/target/common/obj/APPS/Mms_intermediates/classes)
    注: 某些输入文件使用或覆盖了已过时的 API。
    注: 有关详细信息, 请使用 -Xlint:deprecation 重新编译。
    注: 某些输入文件使用了未经检查或不安全的操作。
    注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。
    Copying: out/target/common/obj/APPS/Mms_intermediates/classes-jarjar.jar
    Copying: out/target/common/obj/APPS/Mms_intermediates/emma_out/lib/classes-jarjar.jar
    Copying: out/target/common/obj/APPS/Mms_intermediates/classes.jar
    Proguard: out/target/common/obj/APPS/Mms_intermediates/proguard.classes.jar
    ProGuard, version 4.10
    Reading program jar [/home/xxx/Data/android/out/target/common/obj/APPS/Mms_intermediates/classes.jar]
    // ... ...
    target Dex: Mms
    Copying: out/target/common/obj/APPS/Mms_intermediates/classes.dex
    target Package: Mms (out/target/product/generic/obj/APPS/Mms_intermediates/package.apk)
    nothing matches overlay file ic_contact_picture.png, for flavor ,,,,,,,,,,,,mdpi,,,,,,,
    libpng warning: iCCP: known incorrect sRGB profile
    libpng warning: iCCP: known incorrect sRGB profile
    warning: string 'menu_insert_smiley' has no default translation.
    warning: string 'menu_insert_smiley' is missing 19 required localizations: az_AZ en_AU en_CA en_GB en_IN en_NZ en_SG en_US eo_EU hy_AM ka_GE km_KH lo_LA mn_MN ne_NP si_LK zh_CN zh_HK zh_TW
    dex2oatd I 21424 21424 art/dex2oat/dex2oat.cc:1082] dex2oat: out/host/linux-x86/bin/dex2oatd --runtime-arg -Xms64m --runtime-arg -Xmx64m --boot-image=out/target/product/generic/dex_bootjars/system/framework/boot.art --dex-file=out/target/product/generic/obj/APPS/Mms_intermediates/package.apk --dex-location=/system/priv-app/Mms.apk --oat-file=out/target/product/generic/obj/APPS/Mms_intermediates/package.odex --android-root=out/target/product/generic/system --instruction-set=arm --instruction-set-features=default
    dex2oatd I 21424 21424 art/dex2oat/dex2oat.cc:252] dex2oat took 1.189425041s (threads: 8)
    Notice file: packages/apps/Mms/NOTICE -- out/target/product/generic/obj/NOTICE_FILES/src//system/priv-app/Mms.apk.txt
    Install: out/target/product/generic/system/priv-app/Mms.apk
    Install: out/target/product/generic/system/priv-app/Mms.odex
    // ... ...
    Install: out/target/product/generic/data/app/MmsTests.apk
    Install: out/target/product/generic/data/app/MmsTests.odex
    make:离开目录“/home/xxx/Data/android”
</code></p>

<p>主要是生成了两个文件：<br/>
out/target/product/generic/system/priv-app/Mms.apk<br/>
out/target/product/generic/system/priv-app/Mms.odex</p>

<h5>安装到手机</h5>

<p>因为是系统应用，为了重启有效，使用push命令把两个文件push到模拟器中对应的位置：
<code>
    // 注意现在一些核心的应用的位置由以前的system/app调整为了system/priv-app，不要push错了
    /*
    xxx@ubuntu:~/Data/android$ adb push out/target/product/generic/system/priv-app/Mms.odex /system/priv-app
    2893 KB/s (2085348 bytes in 0.703s)
    xxx@ubuntu:~/Data/android$ adb push out/target/product/generic/system/priv-app/Mms.apk /system/priv-app
    3315 KB/s (1785258 bytes in 0.525s)
</code>
看模拟器的标题被替换了。类似了，你可以修改framework，替换内核</p>

<p>在  ~/.bashrc</p>

<p>添加环境变量：
<code>
    export ANDROID_PRODUCT_OUT=~/code/android-4.2/out/target/product/generic
    export ANDROID_SWT=~/code/android-4.2/out/host/linux-x86/framework/
</code></p>

<h4>备注：</h4>

<p>执行emulator，出现如下错误：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>emulator: ERROR: You did not specify a virtual device name, and the system
</span><span class='line'>directory could not be found.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;If you are an Android SDK user, please use &lsquo;@&lt;name&gt;&rsquo; or &lsquo;-avd &lt;name&gt;&rsquo;
</span><span class='line'>to start a given virtual device (see -help-avd for details).
</span><span class='line'>Otherwise, follow the instructions in -help-disk-images to start the emulator</span></code></pre></td></tr></table></div></figure></p>

<p>解决：
<code>
    source build/envsetup.sh
    lunch sdk-eng
</code>
然后再执行
<code>
    emulator
</code>
可以启动模拟器</p>

<hr />

<p><a href="http://senrsl.blogspot.com/2015/03/s4shv-e300lkernelrom.html">http://senrsl.blogspot.com/2015/03/s4shv-e300lkernelrom.html</a></p>

<h3>三星S4韩版SHV-E300L源码编译(内核Kernel+ROM)</h3>

<h4>编译ROM</h4>

<h5>①准备工作</h5>

<p>先看说明README_Platform.txt
<code>
        How to build Module for Platform
        - It is only for modules are needed to using Android build system.
        - Please check its own install information under its folder for other module.
        [Step to build]
        1. Get android open source.
            : version info - Android 4.4
            ( Download site : http://source.android.com )
        2. Copy module that you want to build - to original android open source
           If same module exist in android open source, you should replace it. (no overwrite)
            # It is possible to build all modules at once.
        3. You should add module name to 'PRODUCT_PACKAGES' in 'build\target\product\core.mk' as following case.
            case 1) e2fsprog : should add 'e2fsck' to PRODUCT_PACKAGES
            case 2) blkid : should add 'libkeyutils' to PRODUCT_PACKAGES
            case 3) libhyphenation : should add 'libkeyutils' to PRODUCT_PACKAGES
            case 4) KeyUtils : should add 'libkeyutils' to PRODUCT_PACKAGES
            case 5) libexifa : should add 'libexifa' to PRODUCT_PACKAGES
            case 6) libjpega : should add 'libjpega' to PRODUCT_PACKAGES
            ex.) [build\target\product\core.mk] - add all module name for case 1 ~ 5 at once
                PRODUCT_PACKAGES += \
                    e2fsck \
                    blkid \
                    libhyphenation \
                    libkeyutils \
                    libexifa \
                    libjpega \
                    ebtables
        4. excute build command
            ./build_platform.sh
        Note :
        to build SBrowser (vendor/samsung/packages/apps/SBrowser),
        please refer to Buildme.txt at the folder mentioned above.
</code></p>

<p>意思就是说分4部走，后面加了个注释。</p>

<p>分别是下载4.4的源码，把包里的要编译的模块拷进去(替换,非覆盖),增加要编译的模块到core.mk进行注册,执行编译脚本。</p>

<p>查看当前源码版本
<code>
senrsl@senrsl-ubuntu:~$ cd android/source/WORKING_DIRECTORY/
senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$ repo branches
*  android-4.4.2_r2          | in all projects
    master                    | in:
                                      abi/cpp
                                      ....
</code>
所有的版本号里没有叫4.4的，只有4.4.*的。。。。</p>

<p>好吧，就用这个。</p>

<h5>②替换模块</h5>

<p>1)external目录,把这些目录剪出来
<code>
        senrsl@senrsl-ubuntu:~/android/source/test/三星替换 /external$ ll
        总用量 40
        drwxrwxr-x 10 senrsl senrsl 4096  3月 30 14:53 ./
        drwxrwxr-x  4 senrsl senrsl 4096  3月 30 15:02 ../
        drwxrwxr-x 17 senrsl senrsl 4096  3月 20 13:35 chromium/
        drwxrwxr-x  9 senrsl senrsl 4096  3月 20 13:36 dnsmasq/
        drwxrwxr-x 19 senrsl senrsl 4096  3月 20 13:36 e2fsprogs/
        drwxrwxr-x  3 senrsl senrsl 4096  3月 20 13:36 gcc-demangle/
        drwxrwxr-x  4 senrsl senrsl 4096  3月 20 13:36 hyphenation/
        drwxrwxr-x 15 senrsl senrsl 4096  3月 20 13:36 iproute2/
        drwxrwxr-x 11 senrsl senrsl 4096  3月 20 13:36 iptables/
        drwxrwxr-x  4 senrsl senrsl 4096  3月 20 13:36 junit/
</code>
把这些目录放进去
<code>
        senrsl@senrsl-ubuntu:~$ cd android/source/SHV-E300L_KK_Opensource/Platform/external/
        senrsl@senrsl-ubuntu:~/android/source/SHV-E300L_KK_Opensource/Platform/external$ ll
        总用量 44
        drwxrwxr-x 11 senrsl senrsl 4096 10月 14 09:23 ./
        drwxrwxr-x  5 senrsl senrsl 4096  3月 30 13:10 ../
        drwxrwxr-x 17 senrsl senrsl 4096 10月  8 12:16 chromium/
        drwxrwxr-x  9 senrsl senrsl 4096 10月  8 09:07 dnsmasq/
        drwxrwxr-x 18 senrsl senrsl 4096 10月  8 09:07 e2fsprogs/
        drwxrwxr-x  2 senrsl senrsl 4096 10月  8 09:07 gcc-demangle/
        drwxrwxr-x  3 senrsl senrsl 4096 10月  8 09:07 hyphenation/
        drwxrwxr-x 14 senrsl senrsl 4096 10月  8 09:07 iproute2/
        drwxrwxr-x 10 senrsl senrsl 4096 10月  8 09:07 iptables/
        drwxrwxr-x  3 senrsl senrsl 4096 10月  8 09:07 junit/
        drwxrwxr-x 10 senrsl senrsl 4096 10月  8 12:23 webkit/
</code>
2)vendor目录，把vendor/samsung放进去</p>

<p>3)build目录，把这俩文件剪出来，把Platform里的放进去
<code>
        senrsl@senrsl-ubuntu:~/android/source/SHV-E300L_KK_Opensource/Platform/build$ tree
        .
        └── target
            ├── board
            │   └── generic
            │       └── BoardConfig.mk
            └── product
                └── core.mk
        4 directories, 2 files
</code></p>

<h5>③执行编译</h5>

<pre><code>        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$ ./build_platform.sh
</code></pre>

<p>报错
<code>
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        Export includes file: frameworks/opt/emoji/Android.mk -- out/target/product/generic/obj/SHARED_LIBRARIES/libemoji_intermediates/export_includes
        Export includes file: external/harfbuzz/Android.mk -- out/target/product/generic/obj/SHARED_LIBRARIES/libharfbuzz_intermediates/export_includes
        Export includes file: external/webkit/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libwebcore_intermediates/export_includes
        Export includes file: external/libxml2/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libxml2_intermediates/export_includes
        Export includes file: external/libxslt/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libxslt_intermediates/export_includes
        Export includes file: external/hyphenation/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libhyphenation_intermediates/export_includes
        Import includes file: out/target/product/generic/obj/SHARED_LIBRARIES/libemoji_intermediates/import_includes
        Import includes file: out/target/product/generic/obj/SHARED_LIBRARIES/libharfbuzz_intermediates/import_includes
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/html/DocTypeStrings.gperf
        Generating HTMLEntityTable.cpp
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/platform/ColorData.gperf
        WebCore Yacc: libwebcore &lt;= external/webkit/Source/WebCore/css/CSSGrammar.y
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        WebCore Yacc: libwebcore &lt;= external/webkit/Source/WebCore/xml/XPathGrammar.y
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        Can't locate Switch.pm in @INC (you may need to install the Switch module) (@INC contains: /etc/perl /usr/local/lib/perl/5.18.2 /usr/local/share/perl/5.18.2 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.18 /usr/share/perl/5.18 /usr/local/lib/site_perl .) at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        BEGIN failed--compilation aborted at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        Can't locate Switch.pm in @INC (you may need to install the Switch module) (@INC contains: /etc/perl /usr/local/lib/perl/5.18.2 /usr/local/share/perl/5.18.2 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.18 /usr/share/perl/5.18 /usr/local/lib/site_perl .) at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        BEGIN failed--compilation aborted at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        make: *** [out/target/product/generic/obj/STATIC_LIBRARIES/libwebcore_intermediates/Source/WebCore/html/DocTypeStrings.cpp] 错误 2
        make: *** 正在等待未完成的任务....
        make: *** [out/target/product/generic/obj/STATIC_LIBRARIES/libwebcore_intermediates/Source/WebCore/platform/ColorData.cpp] 错误 2
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/html/parser/HTMLEntityNames.in
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$ ./build_platform.sh
</code></p>

<p>在core.mk里把    libwebcore \删掉，再build，报错
<code>
        Install: out/target/product/generic/system/fonts/NotoSansKhmerUI-Bold.ttf
        Install: out/target/product/generic/system/fonts/NotoSansKhmerUI-Regular.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLao-Bold.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLao-Regular.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLaoUI-Bold.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLaoUI-Regular.ttf
        Install: out/target/product/generic/system/fonts/NotoSansMalayalam-Bold.ttf
        collect2: error: ld returned 1 exit status
        Install: out/target/product/generic/system/fonts/NotoSansMalayalam-Regular.ttf
        make: *** [out/target/product/generic/obj/EXECUTABLES/dnsmasq_intermediates/LINKED/dnsmasq] 错误 1
        make: *** 正在等待未完成的任务....
        Install: out/target/product/generic/system/fonts/NotoSansMalayalamUI-Bold.ttf
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:339: error: undefined reference to 'ext2fs_test_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:390: error: undefined reference to 'ext2fs_test_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:186: error: undefined reference to 'ext2fs_test_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:281: error: undefined reference to 'ext2fs_mem_is_zero'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:178: error: undefined reference to 'ext2fs_clear_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:170: error: undefined reference to 'ext2fs_set_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:141: error: undefined reference to 'ext2fs_clear_bit64'
        external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:735: error: undefined reference to 'ext2fs_get_bitmap_granularity'
        external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:790: error: undefined reference to 'ext2fs_find_first_zero_generic_bitmap'
        external/e2fsprogs/lib/ext2fs/mmp.c:57: error: undefined reference to 'ext2fs_get_dio_alignment'
        external/e2fsprogs/lib/ext2fs/mmp.c:213: error: undefined reference to 'ext2fs_alloc_block2'
        collect2: error: ld returned 1 exit status
        make: *** [out/target/product/generic/obj/SHARED_LIBRARIES/libext2fs_intermediates/LINKED/libext2fs.so] 错误 1
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$
</code>
再把 libexifa \删掉，报错
<code>
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_find_first_zero':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:339: undefined reference to `ext2fs_test_bit64'
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:390: undefined reference to `ext2fs_test_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_test_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:186: undefined reference to `ext2fs_test_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_test_clear_bmap_extent':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:281: undefined reference to `ext2fs_mem_is_zero'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_unmark_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:178: undefined reference to `ext2fs_clear_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_mark_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:170: undefined reference to `ext2fs_set_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_resize_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:141: undefined reference to `ext2fs_clear_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/gen_bitmap64.o: In function `ext2fs_convert_subcluster_bitmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:735: undefined reference to `ext2fs_get_bitmap_granularity'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/gen_bitmap64.o: In function `ext2fs_find_first_zero_generic_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:790: undefined reference to `ext2fs_find_first_zero_generic_bitmap'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/mmp.o: In function `ext2fs_mmp_read':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:57: undefined reference to `ext2fs_get_dio_alignment'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/mmp.o: In function `ext2fs_mmp_init':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:213: undefined reference to `ext2fs_alloc_block2'
        collect2: ld returned 1 exit status
        make: *** [out/host/linux-x86/obj/lib/libext2fs_host.so] 错误 1
        make: *** 正在等待未完成的任务....
        1 warning generated.
        external/openssl/ssl/s2_clnt.c:1027:38: warning: unused parameter 'type' [-Wunused-parameter]
        int ssl2_set_certificate(SSL *s, int type, int len, const unsigned char *data)
                                             ^
        1 warning generated.
        external/openssl/ssl/s2_lib.c:385:38: warning: unused parameter 'larg' [-Wunused-parameter]
        long ssl2_ctrl(SSL *s, int cmd, long larg, void *parg)
                                             ^
        external/openssl/ssl/s2_lib.c:385:50: warning: unused parameter 'parg' [-Wunused-parameter]
        long ssl2_ctrl(SSL *s, int cmd, long larg, void *parg)
                                                         ^
        external/openssl/ssl/s2_lib.c:400:30: warning: unused parameter 's' [-Wunused-parameter]
        long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
                                     ^
        external/openssl/ssl/s2_lib.c:400:37: warning: unused parameter 'cmd' [-Wunused-parameter]
        long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
                                            ^
        external/openssl/ssl/s2_lib.c:400:49: warning: unused parameter 'fp' [-Wunused-parameter]
        long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
                                                        ^
        external/openssl/ssl/s2_lib.c:405:29: warning: unused parameter 'ctx' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                    ^
        external/openssl/ssl/s2_lib.c:405:38: warning: unused parameter 'cmd' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                             ^
        external/openssl/ssl/s2_lib.c:405:48: warning: unused parameter 'larg' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                                       ^
        external/openssl/ssl/s2_lib.c:405:60: warning: unused parameter 'parg' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                                                   ^
        external/openssl/ssl/s2_lib.c:410:38: warning: unused parameter 'ctx' [-Wunused-parameter]
        long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
                                             ^
        external/openssl/ssl/s2_lib.c:410:47: warning: unused parameter 'cmd' [-Wunused-parameter]
        long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
                                                      ^
        external/openssl/ssl/s2_lib.c:410:59: warning: unused parameter 'fp' [-Wunused-parameter]
        long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
                                                                  ^
        12 warnings generated.
        1 warning generated.
        make: *** wait: 没有子进程。 停止。
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$
</code></p>

<p>然后把之前的core.mk第二部分替换成README里的，报错
<code>
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:57: undefined reference to `ext2fs_get_dio_alignment'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/mmp.o: In function `ext2fs_mmp_init':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:213: undefined reference to `ext2fs_alloc_block2'
        collect2: ld returned 1 exit status
        make: *** [out/host/linux-x86/obj/lib/libext2fs_host.so] 错误 1
        make: *** 正在等待未完成的任务....
        Processing target/product/generic/dex_bootjars/system/framework/core.jar
        Done!
</code></p>

<p>然后把core.mk里第二部分全都删掉，报的错还是上面那个。</p>

<p>恢复下core.mk重来，</p>

<p>报1：报错external/webkit/Source/WebCore/make-hash-tools.pl line 23.，core.mk砍掉 libwebcore \ 代码砍掉external/webkit.</p>

<p>报2：/home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:213: undefined reference to `ext2fs_alloc_block2'，external/e2fsprogs 代码换回原版。</p>

<p>报3：/home/senrsl/android/source/WORKING_DIRECTORY/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.7/bin/../lib/gcc/arm-linux-androideabi/4.7/../../../../arm-linux-androideabi/bin/ld: error: out/target/product/generic/obj/EXECUTABLES/dnsmasq_intermediates/dhcp-common.o: multiple definition of &lsquo;option_string&rsquo;
/home/senrsl/android/source/WORKING_DIRECTORY/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.7/bin/../lib/gcc/arm-linux-androideabi/4.7/../../../../arm-linux-androideabi/bin/ld: out/target/product/generic/obj/EXECUTABLES/dnsmasq_intermediates/option.o: previous definition here，external/dnsmasq换回原版。</p>

<p>然后编译</p>

<p>这样竟编译成功
<code>
        Creating filesystem with parameters:
            Size: 576716800
            Block size: 4096
            Blocks per group: 32768
            Inodes per group: 7040
            Inode size: 256
            Journal blocks: 2200
            Label:
            Blocks: 140800
            Block groups: 5
            Reserved block group size: 39
        Created filesystem with 892/35200 inodes and 65272/140800 blocks
        + '[' 0 -ne 0 ']'
        Install system fs image: out/target/product/generic/system.img
        out/target/product/generic/system.img+ maxsize=588791808 blocksize=2112 total=576716800 reserve=5947392
</code></p>

<p>镜像文件输出到了/home/senrsl/android/source/WORKING_DIRECTORY/out/target /product/generic</p>

<p>4)封包</p>

<p>查看下官方提供的E300LKLUFNE4_E300LLGTFNE4_E300LKLUFNC1_HOME.tar</p>

<p>依次罗列了这几个img.</p>

<p>尝试封装
<code>
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY/out/target/product/generic$ tar cvf p.tar cache.img ramdisk.img system.img userdata.img
        cache.img
        ramdisk.img
        system.img
        userdata.img
</code>
然后重启系统去烧。</p>

<p>//TODO 未成功，无法烧入</p>

<hr />

<h4>I9507V 的external/e2fsprogs，external/dnsmasq换回原版，就能编译成功，没试过烧进真机。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipv6初始化和处理流程分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/15/kernel-net-ipv6/"/>
    <updated>2015-05-15T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/15/kernel-net-ipv6</id>
    <content type="html"><![CDATA[<p><a href="/download/kernel/ipv6%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90.pdf">ipv6初始化和处理流程分析.pdf</a></p>
]]></content>
  </entry>
  
</feed>
