<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2012~10 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2012~10/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-12-05T18:48:44+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[eclipse生成jar包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/29/lang-java-eclipse-jar/"/>
    <updated>2012-10-29T11:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/29/lang-java-eclipse-jar</id>
    <content type="html"><![CDATA[<h4>第一：普通类导出jar包</h4>

<p>普通类就是指此类包含main方法，并且没有用到别的jar包。<br/>
1.在eclipse中选择你要导出的类或者package，右击，选择Export子选项；<br/>
2.在弹出的对话框中，选择java文件&mdash;选择JAR file，单击next；<br/>
3.在JAR file后面的文本框中选择你要生成的jar包的位置以及名字，注意在Export generated class files and resources和Export java source files and resources前面打上勾，单击next; <br/>
4.单击两次next按钮，到达JAR Manifest Specification。注意在最底下的Main class后面的文本框中选择你的jar包的入口类。单击Finish，完成。</p>

<p>运行 java -jar 名字.jar，检测运行是否正确。</p>

<h4>第二、你所要导出的类里边用到了别的jar包。</h4>

<p>比如说你写的类连接了数据库，用到数据库驱动包oracl.jar.。<br/>
1.先把你要导出的类按照上面的步骤导出形成jar包，比如叫test.jar<br/>
2.新建一个文件夹main，比如在D盘根目录下；<br/>
3.把test.jar和oracl.jar拷贝到main文件下，右击test.jar，解压到当前文件夹。把META-INF\MANIFEST.MF剪切到另外一个地方 （比如是桌面！） ；<br/>
4.右击oracl.jar，解压到当前文件夹。<br/>
5.在dos环境下，进入到D盘的main文件夹下，执行 jar cvfm new.jar meta-inf/manifest.mf .，不要忘了最后面的点。<br/>
6.用压缩工具打开你新生成的new.jar，用你放在桌面的META-INF\MANIFEST.MF覆盖new.jar原有。</p>

<p>运行 java -jar 名字.jar，检测运行是否正确。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[统计git提交行数的脚本]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/16/tools-git-count-lines/"/>
    <updated>2012-10-16T14:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/16/tools-git-count-lines</id>
    <content type="html"><![CDATA[<p>可以保存为count.sh运行 ./count.sh your_name
```
    #!/bin/sh
    insert=0
    delete=0
    git log&ndash;author=$1&ndash;shortstat&ndash;pretty=format:&ldquo;&rdquo;|sed/^$/d >.tmp.count</p>

<pre><code>whilereadline ;do
current=`echo$line|awk-F',''{printf $2}'|awk'{printf $1}'`
insert=`expr$insert+ $current`
current=`echo$line|awk-F',''{printf $3}'|awk'{printf $1}'`
delete=`expr$delete+ $current`
done&lt;.tmp.count

rm .tmp.count
echo$1$insertinsertions, $deletedeletions
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
