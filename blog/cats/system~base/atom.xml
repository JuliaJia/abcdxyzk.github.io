<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-12-31T11:32:20+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[grubby edit centos grub args]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/24/system-grubby/"/>
    <updated>2014-10-24T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/24/system-grubby</id>
    <content type="html"><![CDATA[<p>In Debian/Ubuntu, grub.cfg is fully generated by scripts and any manual changes made to it will be clobbered. In RHEL/CentOS however, grub.cfg is modified by scripts but manual changes are persisted, and is actually the canonical location for certain settings.</p>

<p>The tool which manages grub.cfg is grubby, which is called by /sbin/new-kernel-pkg when kernels are installed or removed. The &ndash;copy-default parameter is passed to grubby when a new kernel is installed, which causes it to copy the kernel parameters from the current default kernel. Setting the default kernel parameters for future-installed kernels is therefore done by editing the entry for the default kernel in grub.cfg.</p>

<p>If you weren&rsquo;t automating this you could simply edit grub.cfg manually and change all the current kernel entries. However, you can use grubby to modify grub.cfg in order to avoid parsing it or writing regular expressions. For example, this will remove the rhgb and quiet parameters from the specified kernel version.</p>

<pre><code>$ grubby --update-kernel=/boot/vmlinuz-2.6.32-220.13.1.el6.x86_64 --remove-args="rhgb quiet"
</code></pre>

<p>There doesn&rsquo;t seem to be an option to list the currently configured kernels however, so you&rsquo;ll have to discover these another way. One option is to just look for vmlinuz files in /boot/:</p>

<pre><code>#!/bin/sh
for KERNEL in /boot/vmlinuz-*; do
    grubby --update-kernel="$KERNEL" --remove-args="rhgb quiet"
done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grub]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/24/system-grub/"/>
    <updated>2014-10-24T15:53:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/24/system-grub</id>
    <content type="html"><![CDATA[<p>在命令行状态，可以根据需要加载或移除相应模块，也可用来启动在菜单没有显现的的系统。
比如，在第一硬盘的第一分区上装有windows xp系统，但在菜单上没显示出来，我们可以命令行状态下输入命令启动：
<code>
    grub&gt;set root=(hd0,1)
    grub&gt;chainloader +1
    grub&gt;boot
</code>
又比如启动第二硬盘第一逻辑分区上的ubuntu系统：
<code>
    grub&gt;set root=(hd1,5)
    grub&gt;linux /boot/vmlinuz-xxx-xxx root=/dev/sdb5
    grub&gt;initrd /boot/initrd.img-xxx-xxx
    grub&gt;boot
</code>
其中内核vmlinuz和initrd.img的版本号可用按Tab键自动查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[\r\n,\n,\r简介]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/21/system-enter-newline/"/>
    <updated>2014-10-21T10:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/21/system-enter-newline</id>
    <content type="html"><![CDATA[<p>&lsquo;\r'是回车，前者使光标到行首，（carriage return）<br/>
&rsquo;\n'是换行，后者使光标下移一格，（line feed）</p>

<p>\r 是回车，return<br/>
\n 是换行，newline</p>

<p>^M 是ascii中的'\r', 回车符，是16进制的0x0D，八进制的015，十进制的13<br/>
^M在vi编辑器中可以使用Ctrl+ v + m三个键打出来</p>

<p>对于换行这个动作，unix下一般只有一个0x0A表示换行(&ldquo;\n&rdquo;)，windows下一般都是0x0D和0x0A两个字符(&ldquo;\r\n&rdquo;)，苹果机(MAC OS系统)则采用回车符CR表示下一行(\r)</p>

<blockquote><p>  Unix系统里，每行结尾只有“&lt;换行>”，即“\n”；<br/>
  Windows系统里面，每行结尾是“&lt;回车>&lt;换行>”，即“\r\n”；<br/>
  Mac系统里，每行结尾是“&lt;回车>”,即“\r”。</p></blockquote>

<p>一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix下打开的话，在每行的结尾会多车一个<sup>M</sup>字符。
Dos和windows采用回车+换行CR/LF表示下一行,即<sup>M</sup>$（$不是换行符的表示，换行符没有表示出来，$是文本结束EOF的表示）
而UNIX/Linux采用换行符LF表示下一行，即\n<br/>
苹果机(MAC OS系统)则采用回车符CR表示下一行，即\r</p>

<p>CR用符号'\r'表示, 十进制ASCII代码是13, 十六进制代码为0x0D;<br/>
LF使用'\n'符号表示, ASCII代码是10, 十六制为0x0A. 所以Windows平台上换行在文本文件中是使用 0d 0a 两个字节表示, 而UNIX和苹果平台上换行则是使用0a或0d一个字节表示.</p>

<p>由于dos风格的换行使用\r\n，把这样的文件上传到unix，有些版本的vi不能识别\r，所以vi显示时在行尾会出现<sup>M</sup>出来，但是有些就能识别\r\n，正常显示回车换行。</p>

<p>dos to unix，去掉<sup>M</sup>
<code>
tr -d "\015" &lt;myfile.txt &gt; myfile_new.txt
tr -d "\r" &lt;myfile.txt &gt; myfile_new.txt
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox压缩vdi]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/15/vm-vdi-reduce/"/>
    <updated>2014-10-15T01:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/15/vm-vdi-reduce</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/zcg1041bolg/article/details/7870170">http://blog.csdn.net/zcg1041bolg/article/details/7870170</a></p>

<p>VirtualBox guest os用久了vdi文件就会越来越大，就算在guest os中删除了一些文件，vdi也不会变小。</p>

<h4>如果guest os 是windows:</h4>

<ol>
<li>先在guest os上运行磁盘碎片管理器，将各个磁盘的磁盘碎片减少；</li>
<li>下载sdelete（<a href="http://technet.microsoft.com/en-us/sysinternals/bb897443.aspx%EF%BC%89;">http://technet.microsoft.com/en-us/sysinternals/bb897443.aspx%EF%BC%89;</a></li>
<li>运行sdelete -c -z  c:</li>
<li>关闭guest os 和 VirtualBox</li>
<li>在host os上运行VBoxManage modifyhd &ndash;compact yourImage.vdi</li>
</ol>


<h4>如果guest os 是Linux:</h4>

<ol>
<li>进入su</li>
<li>$ dd if=/dev/zero of=test.file</li>
<li>$ rm test.file</li>
<li>关闭guest os 和 VirtualBox</li>
<li>在host os上 运行 $ VBoxManage modifyhd &ndash;compact yourImage.vdi</li>
</ol>


<p>这样在guest上看到占用的空间就和host上看到的空间就一样了。</p>

<h4>CMD下 的命令行：</h4>

<pre><code>C:\Program Files&gt;cd Oracle
C:\Program Files\Oracle&gt;cd VirtualBox
C:\Program Files\Oracle\VirtualBox&gt;VBoxManage.exe modifyhd --compact E:\ubuntu-virtualbox\ubuntu-virtualBox.vdi
0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
C:\Program Files\Oracle\VirtualBox&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMware增加磁盘空间]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/15/vm-add-space/"/>
    <updated>2014-08-15T17:30:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/15/vm-add-space</id>
    <content type="html"><![CDATA[<h4>一 添加</h4>

<p>选择“VM”&mdash;-“setting”并打开，将光标定位在hard Disk这一选项，然后点击下方的Add按钮<br/>
点击next，执行下一个步骤<br/>
根据提示，创建一个虚拟的磁盘，并点击下一步<br/>
按照默认的，选择SCSI格式的磁盘即可，点击next执行下一步<br/>
按照默认的点击下一步即可完成虚拟磁盘的添加</p>

<p> 则会多出一个/dev/sd?，这里的?代表硬盘编号，第一个硬盘编号为a即sda，第 二个就是sdb，第三个是 sdc，以此类推，一般来说，如果以前没有增加过硬盘，那么原来的硬盘就是sda，通过VMware菜单增加的虚拟硬盘编号就是sdb。如果添加的第二块 硬盘是IDE硬盘，就应该看到hdb，如果是SCSI硬盘，看到的就应该是sdb。</p>

<h4>二 分区</h4>

<p>使用fdisk /dev/sda进入菜单项，m是列出菜单，p是列出分区表，n是增加分区，w是保存并推出。由于这里增加的磁盘只有5G，因此5G划为一个区。
对新建的磁盘进行分区及格式化的工作： <br/>
输入 fdisk  /dev/sdb <br/>
终端会提示：Command （m for help）：<br/>
输入：m  则会出现提示<br/>
然后根据提示输入：n<br/>
会出现下面的提示，依次输入p 和 1 即可<br/>
接着便会提示卷的起始地址和结束地址，都保持默认按回车的即可（意思是只分一个区）<br/>
输入“w”保存并推出<br/>
再次使用 “fdisk -l ”这个命令来查看会发现出现了/dev/sdb1（说明已经完成了分区工作）</p>

<h4>三 对新建的分区进行格式化</h4>

<p>格式化成ext3的文件系统即可<br/>
使用mkfs.ext3 /dev/sda3    格式化分区<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# mkfs.ext3 /dev/sda3
</span><span class='line'>mke2fs 1.39 (29-May-2006)
</span><span class='line'>Filesystem label=
</span><span class='line'>OS type: Linux
</span><span class='line'>Block size=4096 (log=2)
</span><span class='line'>Fragment size=4096 (log=2)
</span><span class='line'>656000 inodes, 1311305 blocks
</span><span class='line'>65565 blocks (5.00%) reserved for the super user
</span><span class='line'>First data block=0
</span><span class='line'>Maximum filesystem blocks=1346371584
</span><span class='line'>41 block groups
</span><span class='line'>32768 blocks per group, 32768 fragments per group
</span><span class='line'>16000 inodes per group
</span><span class='line'>Superblock backups stored on blocks:
</span><span class='line'>        32768, 98304, 163840, 229376, 294912, 819200, 884736&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Writing inode tables: done                         &lt;br/&gt;
</span><span class='line'>Creating journal (32768 blocks): done
</span><span class='line'>Writing superblocks and filesystem accounting information: done&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;This filesystem will be automatically checked every 31 mounts or
</span><span class='line'>180 days, whichever comes first.  Use tune2fs -c or -i to override.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;[root@localhost ~]# cd /
</span><span class='line'>[root@localhost /]# mkdir /cm               #增加一个/cm
</span><span class='line'>[root@localhost /]# mount /dev/sda3 /cm         #挂载分区到   /cm      &lt;br/&gt;
</span><span class='line'>[root@localhost /]# df -h               #挂载后的分区情况
</span><span class='line'>文件系统              容量  已用 可用 已用% 挂载点
</span><span class='line'>/dev/mapper/VolGroup00-LogVol00
</span><span class='line'>                      8.6G  2.8G  5.4G  35% /
</span><span class='line'>/dev/sda1              99M   12M   82M  13% /boot
</span><span class='line'>tmpfs                 125M     0  125M   0% /dev/shm
</span><span class='line'>/dev/sda3             5.0G  139M  4.6G   3% /cm</span></code></pre></td></tr></table></div></figure></p>

<h4>四 设置开机自动加载</h4>

<p>创建加载点：mkdir /cm 挂载之后，      修改vi /etc/fstab  分区表文件，<br/>
在文件最后加上      /dev/sda3  /cm   ext3    defaults    0 0     然后保存，重启即可。</p>

<p>（注意：修改分区表如果有误，将导致进不了linux桌面系统，但这时系统会进入commandline模式，我们可以在commandline模式下对有误的fstab进行修复更改，不过默认情况下这个commandline模式会是Read-Only file system，这意味着你的任何修改操作都是不允许的，但可以通过命令 mount / -o remount,rw  来解除这个限制）。</p>

<h4>vm虚拟机命令行</h4>

<h5>1）开启虚拟机</h5>

<p>vmrun start &ldquo;/opt/VM_OS/RH_OS_B/Red Hat Enterprise Linux 5 64-bit.vmx&rdquo; nogui|gui</p>

<h5>2）停止虚拟机</h5>

<p>vmrun stop &ldquo;/opt/VM_OS/RH_OS_B/Red Hat Enterprise Linux 5 64-bit.vmx&rdquo; nogui|gui</p>

<h5>3）重启虚拟机</h5>

<p>vmrun restart &ldquo;/opt/VM_OS/RH_OS_B/Red Hat Enterprise Linux 5 64-bit.vmx&rdquo; nogui|gui</p>

<h5>4）列出正在运行的虚拟机</h5>

<p>vmrun list</p>
]]></content>
  </entry>
  
</feed>
