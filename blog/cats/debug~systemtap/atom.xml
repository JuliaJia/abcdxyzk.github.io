<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~systemtap | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~systemtap/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-01-15T17:25:17+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[systemtap article]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/28/debug-stap-article/"/>
    <updated>2013-10-28T16:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/28/debug-stap-article</id>
    <content type="html"><![CDATA[<p><a href="https://sourceware.org/systemtap/wiki/WarStories">https://sourceware.org/systemtap/wiki/WarStories</a></p>

<p><a href="http://wenku.baidu.com/view/9045426048d7c1c708a1452d.html">http://wenku.baidu.com/view/9045426048d7c1c708a1452d.html</a></p>

<p><a href="http://www.cnblogs.com/hazir/p/systemtap_introduction.html">http://www.cnblogs.com/hazir/p/systemtap_introduction.html</a></p>

<p><a href="https://sourceware.org/systemtap/wiki/WarStories">https://sourceware.org/systemtap/wiki/WarStories</a></p>

<p><a href="http://www.cnblogs.com/wangkangluo1/archive/2012/06/26/2562971.html">http://www.cnblogs.com/wangkangluo1/archive/2012/06/26/2562971.html</a></p>

<p><a href="http://www.ibm.com/developerworks/cn/linux/l-systemtap/index.html">http://www.ibm.com/developerworks/cn/linux/l-systemtap/index.html</a></p>

<p><a href="http://blog.yufeng.info/archives/855">http://blog.yufeng.info/archives/855</a></p>

<p><a href="http://www.360doc.com/content/12/0523/15/7982302_213133871.shtml">http://www.360doc.com/content/12/0523/15/7982302_213133871.shtml</a></p>

<p><a href="https://sourceware.org/systemtap/wiki/AddingUserSpaceProbingToApps">https://sourceware.org/systemtap/wiki/AddingUserSpaceProbingToApps</a></p>

<p><a href="http://www.docin.com/p-610001474.html">http://www.docin.com/p-610001474.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-7585066-id-2048719.html">http://blog.chinaunix.net/uid-7585066-id-2048719.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-20568790-id-1632313.html">http://blog.chinaunix.net/uid-20568790-id-1632313.html</a></p>

<p>wiki翻译</p>

<p><a href="http://blog.csdn.net/linyt/article/details/5204841">http://blog.csdn.net/linyt/article/details/5204841</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何知道文件被那个进程写]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/10/debug-stap-inodewatch/"/>
    <updated>2013-10-10T16:27:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/10/debug-stap-inodewatch</id>
    <content type="html"><![CDATA[<p>一个文件正在被进程写 我想查看这个进程 文件一直在增大 找不到谁在写 使用lsof也没找到</p>

<p>这个问题挺有普遍性的，解决方法应该很多，这里我给大家提个比较直观的方法。</p>

<p>linux下每个文件都会在某个块设备上存放，当然也都有相应的inode, 那么透过vfs.write我们就可以知道谁在不停的写入特定的设备上的inode。</p>

<p>幸运的是systemtap的安装包里带了inodewatch.stp，位于/usr/local/share/doc/systemtap/examples/io目录下，就是用来这个用途的。</p>

<p>我们来看下代码：</p>

<p>$ cat inodewatch.stp
```
    #! /usr/bin/env stap</p>

<pre><code>probe vfs.write, vfs.read
{
    # dev and ino are defined by vfs.write and vfs.read
    if (dev == MKDEV($1,$2) # major/minor device
        &amp;&amp; ino == $3)
    printf ("%s(%d) %s 0x%x/%u\n",
        execname(), pid(), probefunc(), dev, ino)
}
</code></pre>

<pre><code>这个脚本的使用方法如下： stap  inodewatch.stp major minor ino

下面我们构造个场景： dd不停的写入一个文件，查出这个文件的ino, 以及它所在设备的major, minor, 运行stap脚本就可以得到答案。

场景交代好了，我们来演示下：
</code></pre>

<pre><code>$ pwd
/home/chuba
$ df
Filesystem           1K-blocks      Used Available Use% Mounted on
...
/dev/sdb1            1621245336 825209568 713681236  54% /home
...
$ ls -al /dev/sdb1
brw-rw---- 1 root disk 8, 17 Oct 24 11:22 /dev/sdb1 
$ rm -f test.dat &amp;&amp; dd if=/dev/zero of=test.dat
^C9912890+0 records in
9912890+0 records out
5075399680 bytes (5.1 GB) copied, 26.8189 s, 189 MB/s
</code></pre>

<pre><code>这个终端模拟文件的不停写入，同时在另外一个终端查验谁干的。这里我们已经知道设备的major/minor为8/17
</code></pre>

<pre><code>$ stat -c '%i' test.dat
25337884
$ sudo stap /usr/local/share/doc/systemtap/examples/io/inodewatch.stp 8 17 25337884
dd(740) vfs_write 0x800011/25337884
dd(740) vfs_write 0x800011/25337884
dd(740) vfs_write 0x800011/25337884
dd(740) vfs_write 0x800011/25337884
dd(740) vfs_write 0x800011/25337884
dd(740) vfs_write 0x800011/25337884
...
</code></pre>

<p>```
看到了吧，dd是罪魁祸首，pid是740</p>
]]></content>
  </entry>
  
</feed>
