<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: assembly | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/assembly/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-29T16:26:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入浅出指令编码之三：64位计算]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/12/23/assembly-opcode/"/>
    <updated>2013-12-23T17:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/12/23/assembly-opcode</id>
    <content type="html"><![CDATA[<p><a href="http://www.pediy.com/kssd/pediy10/77824.html">http://www.pediy.com/kssd/pediy10/77824.html</a></p>

<p>  AMD 在x86体系的32位计算扩展为64位计算，这是通过什么来实现的？它是怎样设计的？具体细节是什么？这就是这一节要讲解的。</p>

<h4>一、硬件编程资源</h4>

<p>　　了解现在processor提供编程资源是很重要的，对要进一步学习提供材料，下面分别讲解x86的编程资源和x64的编程资源。</p>

<h5>1、x86的32位编程资源</h5>

<pre><code>●  8个32位通用寄存器：EAX、ECX、EDX、EBX、ESP、EBP、ESI、EDI
　　　这些寄存器还可分解为8个8位寄存器：AL、CL、DL、BL、AH、CH、DH、BH
　　　和8个16位寄存器：AX、CX、DX、BX、SP、BP、SI、DI
●  6个段寄存器：ES、CS、SS、DS、FS、GS
●  32位的EFLAGS 标志位寄存器
●  32位的指令指针寄存器EIP
●  8个64位MMX寄存器
●  8个128位XMM寄存器
●  还有就是32位的寻址空间（Virtual Address Space）
</code></pre>

<h5>2、x64的64位编程资源</h5>

<pre><code>●  32位通用寄存器被扩展至64位，除了原有的8个寄存器，新增8个寄存器，共16个通用寄存器：RAX、RCX、RDX、RBX、RSP、RBP、RSI、RDI、R8、R9、R10、R11、R12、R13、R14、R15
●  保留了原有的6个寄存器，但是作用被限制
●  32位的标志寄存器被扩展为64位的标志寄存器RELAGS
●  8个64位MMX寄存器不变
●  新增8个XMM寄存器，共16个XMM寄存器
●  还有就是64位的寻址空间（Virtaul Address Space）
</code></pre>

<h4>二、寄存器编码（或者说ID值）</h4>

<pre><code>●  16个64位通用寄存器是： 0000 ~ 1111，也就是：0 ~ 15
　　　　8个32位通用寄存器是：　000 ~ 111 也就是：0 ~ 7
●  6个段寄存器的编码是：000 ~ 101　也就是：0 ~ 5
●  MMX寄存器编码是： 000 ~ 111　也就是：0 ~ 7
●  16个XMM寄存器编码是： 0000 ~ 1111 也就是：0 ~ 15
　　　　8个XMM寄存器编码是：000 ~ 111 也就是：0 ~ 7
</code></pre>

<p>所谓寄存器编码是寄存器对应的二进制编码，按顺序来定义，看下面的表格：</p>

<pre><code>RAX/ES/MMX0/XMM0　-&gt;  0000
RCX/CS/MMX1/XMM1  -&gt;  0001
RDX/SS/MMX2/XMM2  -&gt;  0010
RBX/DS/MMX3/XMM3  -&gt;  0011
RSP/FS/MMX4/XMM4   -&gt;  0100
RBP/GS/MMX5/XMM5  -&gt;  0101
RSI/MMX6/XMM6      -&gt;  0110
RDI/MMX7/XMM7     -&gt;  0111
R8/XMM8 　 -&gt;  1000
R9/XMM9 　 -&gt;  1001
R10/XMM10  -&gt;  1010
R11/XMM11  -&gt;  1011
R12/XMM12  -&gt;  1100
R13/XMM13  -&gt;  1101
R14/XMM14  -&gt;  1110
R15/XMM15  -&gt;  1111
</code></pre>

<p>  RAX ~ RDI　与　EAX ~ EDI　的编码是相同的，这里有一个情况是，EAX ~ EDI的编码是3位，为什么RAX~RDI的编码却是4位呢？这就是下面要讲到的REX prefix会将寄存器编码进行扩展。</p>

<h4>三、  开启64位计算的基石（REX prefix）</h4>

<p>　　AMD64体系的64位计算是这样设计：操作数的Default Operand-Size是32位，而Address-Size是固定为64位的，这里就引发3个问题要解决的：
<code>
●  问题1：当要访问是64位的寄存器时，那么必须要有一种机制去开启或者说确认访问的寄存器是64位的。
●  问题2：而要访问的内存操作数寄存器寻址的话，那么也必须要去开启或确认寄存器是64位的以及访问新增寄存的问题。
●  问题3：如何去访问新增加的几个寄存器呢？那么也必须要有方法去访问增加的寄存器？
</code>
  那么在64位Long模式下，为什么不将操作数的Default Operand-Size设计为64位呢？那是由于体系限制，本来AMD64就是在 x86的基础上扩展为64位的。x86体系当初设计时就没想到有会被扩展到64位的时候。所以在Segment-Descriptor（段描述符）里就没 有可以扩展为64位的标志位。DS.D位只有置1时是32位，清0时为16位，这两种情况。</p>

<p>  AMD在保持兼容的大提前下，只好令谋计策，AMD的解决方案是：增加一个64位模式下特有Prefix，以起到扩展访问64位的能力。这就是 REX prefix。</p>

<h5>1、REX prefix 的具体格式及含义</h5>

<p>  REX prefix的取值范围是：40 ~ 4F（0100 0000 ~ 0100 1111），来看下原来opcode取值范围的40 ~ 4F的是什么指令：<br/>
  Opcode为40 ~ 47在x86下是inc eax ~ inc edi　指令，48 ~ 4F在x86下是dec eax ~ dec edi　指令。<br/>
  在64位模式下，40 ~ 4F 就已经不是指令而变身为 prefix了。</p>

<h6>1.1  REX prefix字节的组成部分：</h6>

<pre><code>●  bit0：REX.B
●  bit1：REX.X
●  bit2：REX.R
●  bit3：REX.W
●  bit4 ~ bit7：此域固定为0100，也就是高半字节为4。
</code></pre>

<p>★  REX.W域是设定操作数的大小（Operand-Size），当REX.W为1时，操作数是64位，为0时，操作数的大小是缺省大小（Default Opeand-Size）。这就解决了访问64位寄存器的问题。</p>

<p>★  REX.R域是用于扩展ModRM字节中的R（Reg）域，ModRM中的Reg域除了对Opcode的补充外，是用来定义寄存器的编码，即寄存器 值。REX.R将原来3位的寄存器ID（000 ~ 111）扩展为4位（0000 ~ 1111），这就解决了访新增寄存器的问题。</p>

<p>★  REX.X域是用于扩展SIB字节中的Index域，SIB中的Index域是指明Index 寄存器的编码，即ID值。这就解决了寄存器寻址内存中使用新增寄存器的问题。</p>

<p>★  REX.B域是用于扩展ModRM字节中的r/m域和SIB中的Base域，SIB中的Base域指明Base寄存器编码即ID值。这就解决了寄存器寻址内存中使用新增寄存器的问题。</p>

<p>★  REX.B域的另一个作用是：若指令中没有ModRM和SIB，也就是在Opcode中直接给出寄存器ID值，REX.B起到扩展寄存器的作用。</p>

<h6>1.2、下面使用几个例子来说明问题：</h6>

<p>例1：指令 mov eax, 1　　
这条指令的Default Operand-Size是32位，在32位下它的机器编码是：b8 01 00 00 00（其5个字节）若改成64位编码时，变成 mov rax, 1。<br/>
　　此时，它的机器编码是 48 b8 01 00 00 00 00 00 00 00 （共10个字节）<br/>
  在这里48 就是 REX prefix字节，即：0100 1000　它的各个域值是：REX.W = 1，定义操作数是64位的，REX.R = 0、REX.X = 0、 REX.B = 0　这条指令不需要ModRM和SIB字节，所以RXB域都为0。<br/>
　　这里有个值得思考的地方，若 REX.W域为0时，这条指令的操作数是32位的，也就是说，机器编码：40 b8 01 00 00 00（其6个字节）是与 b8 01 00 00 00结果一样的，都是mov eax, 1</p>

<p>例2：指令：mov rax, r14<br/>
　　这是一条常见64位指令，源寄存器是r14，目标寄存器是rax 它的机器编码是：<br/>
　　　4c 89 f0（共3个字节）<br/>
在这个编码里4c是REX prefix，89是opcode，f0是ModRM。<br/>
REX Prefix的值是4c （0100 1100），其中REX.W = 1，REX.R = 1，XB都为0。<br/>
ModRM的值是F0（11-110-000），Mod=11，Reg=110, R/M = 000，在这里先不讲ModRM的含义，在后面的章节再详述。在这条指令里，Reg表示源操作数r14的ID值。<br/>
r14是新增加寄存器，所以需要REX.R进行扩展，得出最终寄存器的ID值，1+110 = 1110，这是r14寄存器的ID值，从而得出正确的编码。</p>

<p>例3：回到序言里的例子：mov word ptr es:[eax + ecx * 8 + 0x11223344], 0x12345678<br/>
作为例子，我将它改为64位指令，如下：<br/>
mov qword ptr [rax + rcx * 8 + 0x11223344], 0x12345678<br/>
操作数大小变为64位，而base 寄存器和index寄存器都改为64位，disp（offset）和imme（值不变），为啥不变？在以后的章节会有详述。</p>

<p>好，现在来看看指令怎么译：<br/>
<code>
(1)  REX.W：　要置为 1 以扩展64位大小。
(2)  REX.B：  由于base不是新增的寄存器，所以置为 0
(3)  REX.X：　由于index 也不是新增的寄存器，所以置为 0
(4)  REX.R：　源操作数和目标作数不是寄存器，所以置为 0
</code></p>

<p>所以，REX prefix就等于 48（0100 1000）<br/>
故，整条指令编码是：48 c7 84 c8 44 33 22 11 78 56 34 12（共12个字节）</p>

<p>例4：我将上面的例子再改一改，变为：mov qword ptr [r8 + r9 * 8 + 0x11223344], 0x12345678<br/>
那么，看看这指令怎么译：
<code>
（1）  REX.W：置1，使用64位大小
（2）  REX.B：base寄存器是r8，是新增寄存器，所以置为1
（3）  REX.X：index寄存器是r9，是新增寄存器，所以置为1
（4）  REX.R：操作数中没有寄存器，所在置为0
</code>
所以，REX　prefix就等于（0100 1011）4b<br/>
故，整条指令编码是：4b c7 84 c8 44 33 22 11 78 56 34 12（共12个字节）</p>

<p>例5：看看这条指令 mov r8, 1
<code>
（1）  REX.W：置1
（2）  REX.B：访问Opcode中的寄存器ID值，它是新增寄存器，所为置1
（3）  REX.X：置0
（4）  REX.R：置0
</code>
所以，REX是 49（0100 1001）<br/>
故整条指令编码是：49 b8 01 00 00 00 00 00 00 00</p>

<h5>2、REX prefix补充说明</h5>

<p>（1）关于顺序：REX一定是在x86 prefix之后，而在Opcode之前。<br/>
（2）关于冲突：当x86 prefix和 REX prefix同时出现，而又出现冲突时，REX的优先权要优于 x86 prefix，<br/>
  举个例子：指令 mov r8, 1<br/>
  若出现以下编码怎么办：66 49 b8 01 00 00 00 00 00 00 00　既有66 又有49，那么结果66会被忽略，也就等于：49 b8 01 00 00 00 00 00 00 00。<br/>
  而对于 66 b8 01 00 00 00 00 00 00 00　这个编码来说：会被解析为：mov ax, 1<br/>
  去掉了49这个REX prefix操作数被调整为 16　位。<br/>
（3）关于原来Opcode码，由于40 ~ 4F被作为 REX prefix，那么原指令inc reg/dec reg，只能使用 FF/0　和 FF/1　这两个Opcode了。<br/>
（4）缺省操作数大小（Default Operand-Size）<br/>
  64位绝大部分缺省操作数是32位的，但有一部分是64位的，依赖于rsp的寻址和短跳转（near jmp/near call）是64位的。<br/>
  如下指令：push r8<br/>
  REX值是41（0100 0001），即REX.W为0，使用default opearnd-size<br/>
  它的编码是 41 ff f0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 汇编基础]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/08/27/assembly-base/"/>
    <updated>2011-08-27T16:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/08/27/assembly-base</id>
    <content type="html"><![CDATA[<p>绝顶好书<a href="/download/assembly/Professional_Assembly_Language.pdf">Professional_Assembly_Language</a></p>

<h4>一、简介</h4>

<p>作为最基本的编程语言之一，汇编语言虽然应用的范围不算很广，但重要性却勿庸置疑，因为它能够完成许多其它语言所无法完成的功能。就拿 Linux 内核来讲，虽然绝大部分代码是用 C 语言编写的，但仍然不可避免地在某些关键地方使用了汇编代码，其中主要是在 Linux 的启动部分。由于这部分代码与硬件的关系非常密切，即使是 C 语言也会有些力不从心，而汇编语言则能够很好扬长避短，最大限度地发挥硬件的性能。</p>

<p>大多数情况下 Linux 程序员不需要使用汇编语言，因为即便是硬件驱动这样的底层程序在 Linux 操作系统中也可以用完全用 C 语言来实现，再加上 GCC 这一优秀的编译器目前已经能够对最终生成的代码进行很好的优化，的确有足够的理由让我们可以暂时将汇编语言抛在一边了。但实现情况是 Linux 程序员有时还是需要使用汇编，或者不得不使用汇编，理由很简单：精简、高效和 libc 无关性。假设要移植 Linux 到某一特定的嵌入式硬件环境下，首先必然面临如何减少系统大小、提高执行效率等问题，此时或许只有汇编语言能帮上忙了。</p>

<p>汇编语言直接同计算机的底层软件甚至硬件进行交互，它具有如下一些优点：
能够直接访问与硬件相关的存储器或 I/O 端口； 能够不受编译器的限制，对生成的二进制代码进行完全的控制； 能够对关键代码进行更准确的控制，避免因线程共同访问或者硬件设备共享引起的死锁； 能够根据特定的应用对代码做最佳的优化，提高运行速度； 能够最大限度地发挥硬件的功能。</p>

<p>同时还应该认识到，汇编语言是一种层次非常低的语言，它仅仅高于直接手工编写二进制的机器指令码，因此不可避免地存在一些缺点：
编写的代码非常难懂，不好维护； 很容易产生 bug，难于调试； 只能针对特定的体系结构和处理器进行优化； 开发效率很低，时间长且单调。</p>

<p>Linux 下用汇编语言编写的代码具有两种不同的形式。第一种是完全的汇编代码，指的是整个程序全部用汇编语言编写。尽管是完全的汇编代码，Linux 平台下的汇编工具也吸收了 C 语言的长处，使得程序员可以使用 #include、#ifdef 等预处理指令，并能够通过宏定义来简化代码。第二种是内嵌的汇编代码，指的是可以嵌入到C语言程序中的汇编代码片段。虽然 ANSI 的 C 语言标准中没有关于内嵌汇编代码的相应规定，但各种实际使用的 C 编译器都做了这方面的扩充，这其中当然就包括 Linux 平台下的 GCC。</p>

<!--more-->


<h4>二、Linux 汇编语法格式</h4>

<p>绝大多数 Linux 程序员以前只接触过DOS/Windows 下的汇编语言，这些汇编代码都是 Intel 风格的。但在 Unix 和 Linux 系统中，更多采用的还是 AT&amp;T 格式，两者在语法格式上有着很大的不同：</p>

<p>在 AT&amp;T 汇编格式中，寄存器名要加上 &lsquo;%&rsquo; 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：<br/>
AT&amp;T 格式 Intel 格式<br/>
pushl %eax push eax</p>

<p>在 AT&amp;T 汇编格式中，用 &lsquo;$&rsquo; 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：<br/>
AT&amp;T 格式 Intel 格式<br/>
pushl $1 push 1</p>

<p>AT&amp;T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&amp;T 汇编格式中，目标操作数在源操作数的右边。例如：<br/>
AT&amp;T 格式 Intel 格式<br/>
addl $1, %eax add eax, 1</p>

<p>在 AT&amp;T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀'b'、'w'、'l'分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 &ldquo;byte ptr&rdquo; 和 &ldquo;word ptr&rdquo; 等前缀来表示的。例如：
AT&amp;T 格式Intel 格式movb val, %almov al, byte ptr val在 AT&amp;T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上'*&lsquo;作为前缀，而在 Intel 格式中则不需要。</p>

<p>远程转移指令和远程子调用指令的操作码，在 AT&amp;T 汇编格式中为 &ldquo;ljump&rdquo; 和 &ldquo;lcall"，而在 Intel 汇编格式中则为 "jmp far&rdquo; 和 &ldquo;call far"，即：
AT&amp;T 格式Intel 格式ljump $section, $offsetjmp far section:offsetlcall $section, $offsetcall far section:offset</p>

<p>与之相应的远程返回指令则为：<br/>
AT&amp;T 格式 Intel 格式<br/>
lret $stack_adjust  ret far stack_adjust</p>

<p>在 AT&amp;T 汇编格式中，内存操作数的寻址方式是<br/>
section:disp(base, index, scale)<br/>
而在 Intel 汇编格式中，内存操作数的寻址方式为：<br/>
section:[base + index*scale + disp]</p>

<p>由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：<br/>
disp + base + index * scale</p>

<p>下面是一些内存操作数的例子：<br/>
AT&amp;T 格式Intel 格式
<code>
    movl -4(%ebp), %eax  mov eax, [ebp - 4]
    movl array(, %eax, 4), %eax  mov eax, [eax*4 + array]
    movw array(%ebx, %eax, 4), %cx  mov cx, [ebx + 4*eax + array]
    movb $4, %fs:(%eax)  mov fs:eax, 4
</code></p>

<h4>三、Hello World!</h4>

<p>真不知道打破这个传统会带来什么样的后果，但既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 &ldquo;Hello World!"，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。</p>

<p>在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。</p>

<p>Linux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&amp;T 汇编语言格式：</p>

<p>例1. AT&amp;T 格式<br/>
```
    hello.s
    .data # 数据段声明
    msg : .string &ldquo;Hello, world!\n&rdquo; # 要输出的字符串
    len = . - msg # 字串长度
    .text # 代码段声明
    .global _start # 指定入口函数</p>

<pre><code>_start: # 在屏幕上显示一个字符串
movl $len, %edx # 参数三：字符串长度
movl $msg, %ecx # 参数二：要显示的字符串
movl $1, %ebx # 参数一：文件描述符(stdout)
movl $4, %eax # 系统调用号(sys_write)
int $0x80 # 调用内核功能

# 退出程序
movl $0,%ebx # 参数一：退出代码
movl $1,%eax # 系统调用号(sys_exit)
int $0x80 # 调用内核功能
</code></pre>

<pre><code>初次接触到 AT&amp;T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：

例2. Intel 格式
; hello.asm
</code></pre>

<pre><code>section .data ; 数据段声明
msg db "Hello, world!", 0xA ; 要输出的字符串
len equ $ - msg ; 字串长度
section .text ; 代码段声明
global _start ; 指定入口函数
_start: ; 在屏幕上显示一个字符串
mov edx, len ; 参数三：字符串长度
mov ecx, msg ; 参数二：要显示的字符串
mov ebx, 1 ; 参数一：文件描述符(stdout)
mov eax, 4 ; 系统调用号(sys_write)
int 0x80 ; 调用内核功能
; 退出程序
mov ebx, 0 ; 参数一：退出代码
mov eax, 1 ; 系统调用号(sys_exit)
int 0x80 ; 调用内核功能
</code></pre>

<pre><code>上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。

#### 四、Linux 汇编工具

Linux 平台下的汇编工具虽然种类很多，但同 DOS/Windows 一样，最基本的仍然是汇编器、连接器和调试器。

##### 1.汇编器

汇编器（assembler）的作用是将用汇编语言编写的源程序转换成二进制形式的目标代码。Linux 平台的标准汇编器是 GAS，它是 GCC 所依赖的后台汇编工具，通常包含在 binutils 软件包中。GAS 使用标准的 AT&amp;T 汇编语法，可以用来汇编用 AT&amp;T 格式编写的程序：

    $ as -o hello.o hello.s

Linux 平台上另一个经常用到的汇编器是 NASM，它提供了很好的宏指令功能，并能够支持相当多的目标代码格式，包括 bin、a.out、coff、elf、rdf 等。NASM 采用的是人工编写的语法分析器，因而执行速度要比 GAS 快很多，更重要的是它使用的是 Intel 汇编语法，可以用来编译用 Intel 语法格式编写的汇编程序：

    $ nasm -f elf hello.asm

##### 2.链接器

由汇编器产生的目标代码是不能直接在计算机上运行的，它必须经过链接器的处理才能生成可执行代码。链接器通常用来将多个目标代码连接成一个可执行代码，这样可以先将整个程序分成几个模块来单独开发，然后才将它们组合(链接)成一个应用程序。Linux 使用 ld 作为标准的链接程序，它同样也包含在 binutils 软件包中。汇编程序在成功通过 GAS 或 NASM 的编译并生成目标代码后，就可以使用 ld 将其链接成可执行程序了：

    $ ld -s -o hello hello.o

##### 3.调试器

有人说程序不是编出来而是调出来的，足见调试在软件开发中的重要作用，在用汇编语言编写程序时尤其如此。Linux 下调试汇编代码既可以用 GDB、DDD 这类通用的调试器，也可以使用专门用来调试汇编代码的 ALD(Assembly Language Debugger)。

从调试的角度来看，使用 GAS 的好处是可以在生成的目标代码中包含符号表(symbol table)，这样就可以使用 GDB 和 DDD 来进行源码级的调试了。要在生成的可执行程序中包含符号表，可以采用下面的方式进行编译和链接：

    $ as --gstabs -o hello.o hello.s
    $ ld -o hello hello.o

执行 as 命令时带上参数 --gstabs 可以告诉汇编器在生成的目标代码中加上符号表，同时需要注意的是，在用 ld 命令进行链接时不要加上 -s 参数，否则目标代码中的符号表在链接时将被删去。

在 GDB 和 DDD 中调试汇编代码和调试 C 语言代码是一样的，你可以通过设置断点来中断程序的运行，查看变量和寄存器的当前值，并可以对代码进行单步跟踪。

#### 五、系统调用

即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。

在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。

和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。

所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_&lt;name&gt; 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：
ssize_t write(int fd, const void *buf, size_t count);

该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。

或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：
void * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);

当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。

由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点，Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。

##### 六、命令行参数

在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：

例3. 处理命令行参数
</code></pre>

<pre><code># args.s
.text
.globl _start

_start:
popl %ecx # argc
vnext:
popl %ecx # argv
test %ecx, %ecx # 空指针表明结束
jz exit
movl %ecx, %ebx
xorl %edx, %edx
strlen:
movb (%ebx), %al
inc %edx
inc %ebx
test %al, %al
jnz strlen
movb $10, -1(%ebx)
movl $4, %eax # 系统调用号(sys_write)
movl $1, %ebx # 文件描述符(stdout)
int $0x80
jmp vnext
exit:
movl $1,%eax # 系统调用号(sys_exit)
xorl %ebx, %ebx # 退出代码
int $0x80

ret
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
