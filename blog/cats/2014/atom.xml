<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2014 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2014/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-12-04T18:13:16+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用usb进行调试]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/04/android-usb-debug/"/>
    <updated>2014-12-04T18:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/04/android-usb-debug</id>
    <content type="html"><![CDATA[<h4>一 下载</h4>

<p>下载 platform-tools 或 adt-bundle-linux-x86_64-XXX.zip（这个很大）</p>

<h4>二 连接</h4>

<p>adb start-server 打开服务<br/>
如果一切正常的话<br/>
输入<br/>
adb devices<br/>
就能显示出当前连接到电脑的android设备 ^_^<br/>
试试这个命令<br/>
adb shell<br/>
就能在Ubuntu上的终端执行android的shell命令了<br/>
su<br/>
切换到root</p>

<p>或者</p>

<p>adb root<br/>
再<br/>
adb shell<br/>
不过这种不一定成功</p>

<h4>三 不能执行的sdcard分区如下</h4>

<p>$ mount<br/>
<code>
/dev/block/vold/93:80 /mnt/sdcard vfat rw,dirsync,nosuid,nodev,noexec,relatime,uid=1000,gid=1015,fmask=0702,dmask=0702,allow_utime=0020,codepage=cp437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 0
</code></p>

<p>我用的平台，默认加载sdcard分区是noexec，所以无法执行该分区下的文件。</p>

<p>重新加载该分区mount -o rw,remount /mnt/sdcard</p>

<p>然后一切正常，自己的执行程序现在工作正常了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译Android的kernel]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/04/compiler-android-kernel/"/>
    <updated>2014-12-04T17:34:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/04/compiler-android-kernel</id>
    <content type="html"><![CDATA[<h4>一 下载</h4>

<ol>
<li><p>下载arm编译器<br/>
<a href="https://launchpad.net/gcc-arm-embedded/+download">https://launchpad.net/gcc-arm-embedded/+download</a></p></li>
<li><p>进入到你的android源代码目录，敲入下面命令：<br/>
git clone <a href="http://android.googlesource.com/kernel/goldfish.git">http://android.googlesource.com/kernel/goldfish.git</a> kernel</p></li>
<li><p>cd kernel  进入我们刚才创建的kernel文件夹</p></li>
<li><p>git branch -avv 查看远程的git 库<br/>
我们选择remotes/origin/android-goldfish-2.6.29分支来下载</p></li>
<li><p>git checkout -b android-goldfish-2.6.29 remotes/origin/android-goldfish-2.6.29</p></li>
</ol>


<h4>二  编译kernel代码</h4>

<ol>
<li><p>设置环境变量<br/>
export PATH=$PATH:~/andr-perf/gcc-arm-none-eabi-4_8-2014q3/bin</p></li>
<li><p>修改kernel下面的makefile文件，修改<br/>
ARCH        ?= $(SUBARCH)<br/>
CROSS_COMPILE    ?=<br/>
这两个字段成如下内容：<br/>
ARCH        ?= arm<br/>
CROSS_COMPILE    ?= arm-none-eabi-</p></li>
<li><p>开始编译,敲入如下命令<br/>
make goldfish_defconfig<br/>
或者看arch/arm/configs/目录下有什么，就挑一个make XXX</p></li>
<li><p>正式编译,敲入如下命令<br/>
make</p></li>
</ol>


<p>正式编译成功之后，我们会看到如下文字：<br/>
OBJCOPY arch/arm/boot/zImage<br/>
Kernel: arch/arm/boot/zImage is ready</p>

<h4>三  利用新编译的kernel来启动模拟器</h4>

<ol>
<li><p>在启动模拟器之前，先设置模拟器的目录到环境变量$PATH中去：<br/>
  USER-NAME@MACHINE-NAME:~/Android$ export PATH=$PATH:~/android_prj/out/host/linux-x86/bin</p></li>
<li><p>设置ANDROID_PRODUCT_OUT环境变量：<br/>
USER-NAME@MACHINE-NAME:~/Android$ export ANDROID_PRODUCT_OUT=~/android_prj/out/target/product/generic<br/>
同样，如果你的源代码目录不是android_prj，请注意修改下。另外，如果你已经配置了环境变量。则不必如此。建议最好写到配置文件 ~/.bash_rc配置文件里面去。 免得每次都要配置</p></li>
<li><p>启动模拟器<br/>
cd ~/android_prj  回到源代码目录<br/>
sandy@ubuntu:~/android_prj$ emulator -kernel ./kernel/arch/arm/boot/zImage 利用刚才我们编译的kernel内核启动模拟器</p></li>
<li><p>验证结果<br/>
待模拟器启动完毕之后，我们敲入adb shell<br/>
第一次会说device offline，不管它，再敲入一遍，就会进入adb 调试<br/>
然后cd proc 进入proc目录，cat version</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[部分GCC选项]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/04/compiler-gcc-args/"/>
    <updated>2014-12-04T17:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/04/compiler-gcc-args</id>
    <content type="html"><![CDATA[<h5>-Werror 和 -I 很有用</h5>

<table>
<tr bgcolor="#c0c0c0">
<th>命令</th><th>描述</th>
</tr>
<tr>
<td>-l&nbsp;<em>library</em>-l<em>library</em></td>
<td>进行链接时搜索名为library的库。例子： $ gcc test.c -lm -o test</td>
</tr>
<tr>
<td>-I<em>dir</em></td>
<td>把<em>dir</em>加入到搜索头文件的路径列表中。例子： $ gcc test.c -I../inc -o test</td>
</tr>
<tr>
<td>-L<em>dir</em></td>
<td>把<em>dir</em>加入到搜索库文件的路径列表中。例子： $ gcc -I/home/foo -L/home/foo -ltest test.c -o test</td>
</tr>
<tr>
<td>-D<em>name</em></td>
<td>预定义一个名为<em>name</em>的宏，值为1。例子： $ gcc -DTEST_CONFIG test.c -o test</td>
</tr>
<tr>
<td>-D<em>name</em>=<em>definition</em></td>
<td>预定义名为<em>name</em>，值为<em>definition</em>的宏。</td>
</tr>
<tr>
<td>-ggdb&nbsp;-ggdb<em>level</em></td>
<td>为调试器 gdb 生成调试信息。<em>level</em>可以为1，2，3，默认值为2。</td>
</tr>
<tr>
<td>-g&nbsp;-g<em>level</em></td>
<td>生成操作系统本地格式的调试信息。-g 和 -ggdb 并不太相同， -g 会生成 gdb 之外的信息。<em>level</em>取值同上。</td>
</tr>
<tr>
<td>-s</td>
<td>去除可执行文件中的符号表和重定位信息。用于减小可执行文件的大小。</td>
</tr>
<tr>
<td>-M</td>
<td>告诉预处理器输出一个适合make的规则，用于描述各目标文件的依赖关系。对于每个 源文件，预处理器输出 一个make规则，该规则的目标项(target)是源文件对应的目标文件名，依赖项(dependency)是源文件中 #include引用的所有文件。生成的规则可 以是单行，但如果太长，就用`/'-换行符续成多行。规则 显示在标准输出，不产生预处理过的C程序。</td>
</tr>
<tr>
<td>-C</td>
<td>告诉预处理器不要丢弃注释。配合`-E'选项使用。</td>
</tr>
<tr>
<td>-P</td>
<td>告诉预处理器不要产生`#line'命令。配合`-E'选项使用。</td>
</tr>
<tr>
<td>-static</td>
<td>在支持动态链接的系统上，阻止连接共享库。该选项在其它系统上 无效。</td>
</tr>
<tr>
<td>-nostdlib</td>
<td>不连接系统标准启动文件和标准库文件，只把指定的文件传递给连接器。</td>
</tr>
<tr bgcolor="#c0c0c0">
<th>Warnings</th><th></th>
</tr>
<tr>
<td>-Wall</td>
<td>会打开一些很有用的警告选项，建议编译时加此选项。</td>
</tr>
<tr>
<td>-W&nbsp;-Wextra</td>
<td>打印一些额外的警告信息。</td>
</tr>
<tr>
<td>-w</td>
<td>禁止显示所有警告信息。</td>
</tr>
<tr>
<td>-Wshadow</td>
<td>当一个局部变量遮盖住了另一个局部变量，或者全局变量时，给出警告。很有用的选项，建议打开。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Wpointer-arith</td>
<td>对函数指针或者void *类型的指针进行算术操作时给出警告。也很有用。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Wcast-qual</td>
<td>当强制转化丢掉了类型修饰符时给出警告。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Waggregate-return</td>
<td>如果定义或调用了返回结构体或联合体的函数，编译器就发出警告。</td>
</tr>
<tr>
<td>-Winline</td>
<td>无论是声明为 inline 或者是指定了-finline-functions 选项，如果某函数不能内联，编译器都将发出警告。如果你的代码含有很多 inline 函数的话，这是很有用的选项。</td>
</tr>
<tr>
<td>-Werror</td>
<td>把警告当作错误。出现任何警告就放弃编译。</td>
</tr>
<tr>
<td>-Wunreachable-code</td>
<td>如果编译器探测到永远不会执行到的代码，就给出警告。也是比较有用的选项。</td>
</tr>
<tr>
<td>-Wcast-align</td>
<td>一旦某个指针类型强制转换导致目标所需的地址对齐增加时，编译器就发出警告。</td>
</tr>
<tr>
<td>-Wundef</td>
<td>当一个没有定义的符号出现在 #if 中时，给出警告。</td>
</tr>
<tr>
<td>-Wredundant-decls</td>
<td>如果在同一个可见域内某定义多次声明，编译器就发出警告，即使这些重复声明有效并且毫无差别。</td>
</tr>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式常用字符]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/27/tools-reg-exp-base/"/>
    <updated>2014-11-27T19:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/27/tools-reg-exp-base</id>
    <content type="html"><![CDATA[<table>
    <tr>
        <td style="text-align: center;">字符</td>
        <td style="text-align: center;">描述</td>
    </tr>
    <tr>
        <td style="text-align: center;">\</td>
        <td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 后向引用、或一个八进制转义符。例如，'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '\\' 匹配 "\" 而 "\(" 则匹配 "("。</td>
    </tr>
    <tr>
        <td style="text-align: center;">^</td>
        <td>匹配输入字符串的开始位置。如果设置了&nbsp;<strong>RegExp</strong>&nbsp;对象的&nbsp;<strong>Multiline</strong>&nbsp;属性，^ 也匹配 '\n' 或 '\r' 之后的位置。</td>
    </tr>
    <tr>
        <td style="text-align: center;">$</td>
        <td>匹配输入字符串的结束位置。如果设置了<strong>RegExp</strong>&nbsp;对象的&nbsp;<strong>Multiline</strong>&nbsp;属性，$ 也匹配 '\n' 或 '\r' 之前的位置。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\A</td>
        <td>指定匹配必须出现在字符串的开头（忽略 &nbsp; <strong>Multiline</strong> &nbsp; 选项）。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\Z</td>
        <td>指定匹配必须出现在字符串的结尾或字符串结尾的 &nbsp; &nbsp; 之前（忽略 &nbsp; <strong>Multiline</strong> &nbsp; 选项）。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\z</td>
        <td>指定匹配必须出现在字符串的结尾（忽略 &nbsp; <strong>Multiline</strong> &nbsp; 选项）。</td>
    </tr>
    <tr>
        <td style="text-align: center;">*</td>
        <td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。 * 等价于{0,}。</td>
    </tr>
    <tr>
        <td style="text-align: center;">+</td>
        <td>匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。</td>
    </tr>
    <tr>
        <td style="text-align: center;">?</td>
        <td>匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。</td>
    </tr>
    <tr>
        <td style="text-align: center;">{<em>n</em>}</td>
        <td><em>n</em>&nbsp;是一个非负整数。匹配确定的&nbsp;<em>n</em>&nbsp;次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。</td>
    </tr>
    <tr>
        <td style="text-align: center;">{<em>n</em>,}</td>
        <td><em>n</em>&nbsp;是一个非负整数。至少匹配<em>n</em>&nbsp;次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">{<em>n</em>,<em>m</em>}</td>
        <td><em>m</em>&nbsp;和&nbsp;<em>n</em>&nbsp;均为非负整数，其中<em>n</em>&nbsp;&lt;=&nbsp;<em>m</em>。最少匹配&nbsp;<em>n</em>&nbsp;次且最多匹配&nbsp;<em>m</em>&nbsp;次。刘， "o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td>
    </tr>
    <tr>
        <td style="text-align: center;">?</td>
        <td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {<em>n</em>}, {<em>n</em>,}, {<em>n</em>,<em>m</em>}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">.</td>
        <td>匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(<em>pattern</em>)</td>
        <td>匹配<em>pattern</em>&nbsp;并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用&nbsp;<strong>SubMatches</strong>&nbsp;集合，在Visual Basic Scripting Edition 中则使用&nbsp;<strong>$0</strong>…<strong>$9</strong>&nbsp;属性。要匹配圆括号字符，请使用 '\(' 或 '\)'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(?:<em>pattern</em>)</td>
        <td>匹配&nbsp;<em>pattern</em>&nbsp;但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 "或" 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(?=<em>pattern</em>)</td>
        <td>正向预查，在任何匹配&nbsp;<em>pattern</em>&nbsp;的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如， 'Windows (?=95|98|NT|2000)' 能匹配 "Windows 2000" 中的 "Windows" ，但不能匹配 "Windows 3.1" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(?!<em>pattern</em>)</td>
        <td>负向预查，在任何不匹配Negative lookahead matches the search string at any point where a string not matching&nbsp;<em>pattern</em>&nbsp;的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95|98|NT|2000)' 能匹配 "Windows 3.1" 中的 "Windows"，但不能匹配 "Windows 2000" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>
    </tr>
    <tr>
        <td style="text-align: center;"><em>x</em>|<em>y</em></td>
        <td>匹配&nbsp;<em>x</em>&nbsp;或&nbsp;<em>y</em>。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[<em>xyz</em>]</td>
        <td>字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[^<em>xyz</em>]</td>
        <td>负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[<em>a-z</em>]</td>
        <td>字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[^<em>a-z</em>]</td>
        <td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\b</td>
        <td>匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\B</td>
        <td>匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\c<em>x</em></td>
        <td>匹配由<em>x</em>指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。&nbsp;<em>x</em>&nbsp;的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\d</td>
        <td>匹配一个数字字符。等价于 [0-9]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\D</td>
        <td>匹配一个非数字字符。等价于 [^0-9]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\f</td>
        <td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\n</td>
        <td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\r</td>
        <td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\s</td>
        <td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [&nbsp;\f\n\r\t\v]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\S</td>
        <td>匹配任何非空白字符。等价于 [^&nbsp;\f\n\r\t\v]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\t</td>
        <td>匹配一个制表符。等价于 \x09 和 \cI。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\v</td>
        <td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\w</td>
        <td>匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\W</td>
        <td>匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\x<em>n</em></td>
        <td>匹配&nbsp;<em>n</em>，其中&nbsp;<em>n</em>&nbsp;为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如， '\x41' 匹配 "A"。'\x041' 则等价于 '\x04' &amp; "1"。正则表达式中可以使用 ASCII 编码。.</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>num</em></td>
        <td>匹配&nbsp;<em>num</em>，其中&nbsp;<em>num</em>&nbsp;是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>n</em></td>
        <td>标识一个八进制转义值或一个后向引用。如果 \<em>n</em>&nbsp;之前至少&nbsp;<em>n</em>&nbsp;个获取的子表达式，则&nbsp;<em>n</em>&nbsp;为后向引用。否则，如果&nbsp;<em>n</em>&nbsp;为八进制数字 (0-7)，则&nbsp;<em>n</em>&nbsp;为一个八进制转义值。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>nm</em></td>
        <td>标识一个八进制转义值或一个后向引用。如果 \<em>nm</em>&nbsp;之前至少有is preceded by at least&nbsp;<em>nm</em>&nbsp;个获取得子表达式，则&nbsp;<em>nm</em>&nbsp;为后向引用。如果 \<em>nm</em>&nbsp;之前至少有&nbsp;<em>n</em>&nbsp;个获取，则&nbsp;<em>n</em>&nbsp;为一个后跟文字&nbsp;<em>m&nbsp;</em>的后向引用。如果前面的条件都不满足，若&nbsp;&nbsp;<em>n</em>&nbsp;和&nbsp;<em>m</em>&nbsp;均为八进制数字 (0-7)，则 \<em>nm</em>&nbsp;将匹配八进制转义值&nbsp;<em>nm</em>。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>nml</em></td>
        <td>如果&nbsp;<em>n</em>&nbsp;为八进制数字 (0-3)，且&nbsp;<em>m</em>&nbsp;和&nbsp;<em>l</em>&nbsp;均为八进制数字 (0-7)，则匹配八进制转义值&nbsp;<em>nml。</em></td>
    </tr>
    <tr>
        <td style="text-align: center;">\u<em>n</em></td>
        <td>匹配&nbsp;<em>n</em>，其中&nbsp;<em>n</em>&nbsp;是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td>
    </tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll的一些全局变量]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/27/blog-octopress-jekyll/"/>
    <updated>2014-11-27T13:30:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/27/blog-octopress-jekyll</id>
    <content type="html"><![CDATA[<p><a href="http://jekyllrb.com/docs/variables/">http://jekyllrb.com/docs/variables/</a><br/>
octopress是基于jekyll，所以也可以用这些内容</p>

<h4>Variables</h4>

<p>Jekyll traverses your site looking for files to process. Any files with YAML front matter are subject to processing. For each of these files, Jekyll makes a variety of data available via the Liquid templating system. The following is a reference of the available data.</p>

<h5>Global Variables</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>site</p></td>
      <td><p>
          Sitewide information + configuration settings from
          _config.yml. See below for details.
      </p></td>
    </tr>
    <tr>
      <td><p>page</p></td>
      <td><p>
        Page specific information + the <a href="../frontmatter/">YAML front
        matter</a>. Custom variables set via the YAML Front Matter will be
        available here. See below for details.
      </p></td>
    </tr>
    <tr>
      <td><p>content</p></td>
      <td><p>
        In layout files, the rendered content of the Post or Page being wrapped.
        Not defined in Post or Page files.
      </p></td>
    </tr>
    <tr>
      <td><p>paginator</p></td>
      <td><p>
        When the paginate configuration option is set, this
        variable becomes available for use. 
      </p></td>
    </tr>
  </tbody>
</table>


<h5>Site Variables</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>site.time</p></td>
      <td><p>
        The current time (when you run the jekyll command).
      </p></td>
    </tr>
    <tr>
      <td><p>site.pages</p></td>
      <td><p>
        A list of all Pages.
      </p></td>
    </tr>
    <tr>
      <td><p>site.posts</p></td>
      <td><p>
        A reverse chronological list of all Posts.
      </p></td>
    </tr>
    <tr>
      <td><p>site.related_posts</p></td>
      <td><p>
        If the page being processed is a Post, this contains a list of up to ten
        related Posts. By default, these are low quality but fast to compute.
        For high quality but slow to compute results, run the
        jekyll command with the --lsi (latent semantic
        indexing) option.
      </p></td>
    </tr>
    <tr>
      <td><p>site.static_files</p></td>
      <td><p>
        A list of all static files (i.e. files not processed by Jekyll's
        converters or the Liquid renderer). Each file has three properties:
        path, modified_time and extname.
      </p></td>
    </tr>
    <tr>
      <td><p>site.html_pages</p></td>
      <td><p>
        A list of all HTML Pages.
      </p></td>
    </tr>
    <tr>
      <td><p>site.collections</p></td>
      <td><p>
        A list of all the collections.
      </p></td>
    </tr>
    <tr>
      <td><p>site.data</p></td>
      <td><p>
        A list containing the data loaded from the YAML files located in the _data directory.
      </p></td>
    </tr>
    <tr>
      <td><p>site.documents</p></td>
      <td><p>
        A list of all the documents in every collection.
      </p></td>
    </tr>
    <tr>
      <td><p>site.categories.CATEGORY</p></td>
      <td><p>
        The list of all Posts in category CATEGORY.
      </p></td>
    </tr>
    <tr>
      <td><p>site.tags.TAG</p></td>
      <td><p>
        The list of all Posts with tag TAG.
      </p></td>
    </tr>
    <tr>
      <td><p>site.[CONFIGURATION_DATA]</p></td>
      <td><p>
        All the variables set via the command line and your
        _config.yml are available through the site
        variable. For example, if you have url: http://mysite.com
        in your configuration file, then in your Posts and Pages it will be
        stored in site.url. Jekyll does not parse changes to
        _config.yml in watch mode, you must restart
        Jekyll to see changes to variables.
      </p></td>
    </tr>
  </tbody>
</table>


<h5>Page Variables</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>page.content</p></td>
      <td><p>
        The content of the Page, rendered or un-rendered depending upon
        what Liquid is being processed and what page is.
      </p></td>
    </tr>
    <tr>
      <td><p>page.title</p></td>
      <td><p>
        The title of the Page.
      </p></td>
    </tr>
    <tr>
      <td><p>page.excerpt</p></td>
      <td><p>
        The un-rendered excerpt of the Page.
      </p></td>
    </tr>
    <tr>
      <td><p>page.url</p></td>
      <td><p>
        The URL of the Post without the domain, but
        with a leading slash, e.g.
        /2008/12/14/my-post.html
      </p></td>
    </tr>
    <tr>
      <td><p>page.date</p></td>
      <td><p>
        The Date assigned to the Post. This can be overridden in a Post’s front
        matter by specifying a new date/time in the format
        YYYY-MM-DD HH:MM:SS (assuming UTC), or
        YYYY-MM-DD HH:MM:SS +/-TTTT (to specify a time zone using
        an offset from UTC. e.g. 2008-12-14 10:30:00 +0900).
      </p></td>
    </tr>
    <tr>
      <td><p>page.id</p></td>
      <td><p>
        An identifier unique to the Post (useful in RSS feeds). e.g.
        /2008/12/14/my-post
      </p></td>
    </tr>
    <tr>
      <td><p>page.categories</p></td>
      <td><p>
        The list of categories to which this post belongs. Categories are
        derived from the directory structure above the _posts
        directory. For example, a post at
        /work/code/_posts/2008-12-24-closures.md would have this
        field set to ['work', 'code']. These can also be specified
        in the <a href="../frontmatter/">YAML Front Matter</a>.
      </p></td>
    </tr>
    <tr>
      <td><p>page.tags</p></td>
      <td><p>
        The list of tags to which this post belongs. These can be specified in
        the <a href="../frontmatter/">YAML Front Matter</a>.
      </p></td>
    </tr>
    <tr>
      <td><p>page.path</p></td>
      <td><p>
        The path to the raw post or page. Example usage: Linking back to the
        page or post’s source on GitHub. This can be overridden in the
        <a href="../frontmatter/">YAML Front Matter</a>.
      </p></td>
    </tr>
    <tr>
      <td><p>page.next</p></td>
      <td><p>
        The next post relative to the position of the current post in
        site.posts. Returns nil for the last entry.
      </p></td>
    </tr>
    <tr>
      <td><p>page.previous</p></td>
      <td><p>
        The previous post relative to the position of the current post in
        site.posts. Returns nil for the first entry.
      </p></td>
    </tr>
  </tbody>
</table>


<h5>Paginator</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>paginator.per_page</p></td>
      <td><p>Number of Posts per page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.posts</p></td>
      <td><p>Posts available for that page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.total_posts</p></td>
      <td><p>Total number of Posts.</p></td>
    </tr>
    <tr>
      <td><p>paginator.total_pages</p></td>
      <td><p>Total number of Pages.</p></td>
    </tr>
    <tr>
      <td><p>paginator.page</p></td>
      <td><p>The number of the current page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.previous_page</p></td>
      <td><p>The number of the previous page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.previous_page_path</p></td>
      <td><p>The path to the previous page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.next_page</p></td>
      <td><p>The number of the next page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.next_page_path</p></td>
      <td><p>The path to the next page.</p></td>
    </tr>
  </tbody>
</table>

]]></content>
  </entry>
  
</feed>
