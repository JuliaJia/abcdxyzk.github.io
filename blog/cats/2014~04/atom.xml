<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2014~04 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2014~04/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-12-08T01:39:43+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[x86—EFLAGS寄存器详解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/05/06/assembly-x86-falgs/"/>
    <updated>2014-05-06T14:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/05/06/assembly-x86-falgs</id>
    <content type="html"><![CDATA[<p>  鉴于EFLAGS寄存器的重要性，所以将这一部分内容从处理器体系结构及寻址模式一文中单独抽出另成一文，这部分内容主要来自Intel Developer Mannual，在后续的内核系列中遇到的许多和EFLAGS寄存器有关的内容将直接从本文引用。众所周知，IA-32体系结构为通用系统(general system)提供了16个基本的程序执行寄存器：包含一些通用目的寄存器(General-purpose registers)、段寄存器(Segment registers)以及EFLAGS和EIP寄存器，而后两者对于程序的执行来说可谓至关重要。</p>

<p>  其中EIP寄存器主要用于存放当前代码段即将被执行的下一条指令的偏移，但其本质上并 不能直接被指令直接访问。 【it is controlled implicitly by control-transfer instructions (such as JMP, Jcc, CALL, and RET), interrupts, and exceptions.】 很显然，这个寄存器指令由控制转移指令、中断及异常所控制。 【The only way to read the EIP register is to execute a CALL instruction and then read the value of the return instruction pointer from the procedure stack.The EIP register can be loaded indirectly by modifying the value of a return instruction pointer on the procedure stack and executing a return instruction (RET or IRET)】  这里也已经说的很清楚了，读操作通过执行call指令并取得栈中所存放的地址来实现，而写操作则通过修改程序栈中的返回指令指针并执行RET/IRET指 令来完成，因此尽管这个寄存器相当重要，但其实并不是操作系统在实现过程中所需关注的焦点。</p>

<p>  相对来讲，EFLAGS寄存器对于操作系统则重要得多。EFLAGS(program status and control) register主要用于提供程序的状态及进行相应的控制， 【The EFLGAS register report on the status of the program being executed and allows limited(application-program level) control of the process.】 在64-bit模式下，EFLGAS寄存器被扩展为64位的RFLGAS寄存器，高32位被保留，而低32位则与EFLAGS寄存器相同。</p>

<p>  32位的EFLAGS寄存器包含一组状态标志、系统标志以及一个控制标志。在x86处理器初始化之后，EFLAGS寄存器的状态值为0000 0002H。 第1、3、5、15以及22到31位均被保留，这个寄存器中的有些标志通过使用特殊的通用指令可以直接被修改，但并没有指令能够检查或者修改整个寄存器。 通过使用LAHF/SAHF/PUSHF/POPF/POPFD等指令，可以将EFLAGS寄存器的标志位成组移到程序栈或EAX寄存器，或者从这些设施 中将操作后的结果保存到EFLAGS寄存器中。在EFLAGS寄存器的内容被传送到栈或是EAX寄存器后，可以通过位操作指令(BT, BTS, BTR, BTC)检查或修改这些标志位。当调用中断或异常处理程序时，处理器将在程序栈上自动保存EFLAGS的状态值。若 在中断或异常处理时发生任务切换，那么EFLAGS寄存器的状态将被保存在TSS中 【the state of the EFLAGS register is saved in the TSS for the task being suspended.】 ，注意是将要被挂起的本次任务的状态。</p>

<p><img src="/images/assembly/2014-05-06.jpg" alt="" /></p>

<h5>1、状态标志(Status Flags)</h5>

<p>EFLAGS寄存器的状态标志(0、2、4、6、7以及11位)指示算术指令（如ADD, SUB, MUL以及DIV指令）的结果，这些状态标志的作用如下：
<code>
    CF(bit 0) [Carry flag]   若算术操作产生的结果在最高有效位(most-significant bit)发生进位或借位则将其置1，反之清零。这个标志指示无符号整型运算的溢出状态，这个标志同样在多倍精度运算(multiple-precision arithmetic)中使用。
    PF(bit 2) [Parity flag]   如果结果的最低有效字节(least-significant byte)包含偶数个1位则该位置1，否则清零。
    AF(bit 4) [Adjust flag]   如果算术操作在结果的第3位发生进位或借位则将该标志置1，否则清零。这个标志在BCD(binary-code decimal)算术运算中被使用。
    ZF(bit 6) [Zero flag]   若结果为0则将其置1，反之清零。
    SF(bit 7) [Sign flag]   该标志被设置为有符号整型的最高有效位。(0指示结果为正，反之则为负)
    OF(bit 11) [Overflow flag]   如果整型结果是较大的正数或较小的负数，并且无法匹配目的操作数时将该位置1，反之清零。这个标志为带符号整型运算指示溢出状态。
</code>
在这些状态标志中，只有CF标志能够通过使用STC, CLC以及CMC指令被直接修改，或者通过位指令(BT, BTS, BTR以及BTC)将指定的位拷贝至CF标志中。</p>

<p>这些状态标志允许单个的算术操作产生三种不同数据类型的结果：无符号整型，有符号整型 以及BCD整型。如果把该结果当做无符号整型，那么CF标志指示越界(out-of-range)状态——即进位或借位，如果被当做有符号整型，则OF标 志指示进位或借位，若作为BCD数，那么AF标志指示进位或借位。SF标志指示有符号整数的符号位，ZF指示结果为零。此外在执行多倍精度算术运算时，CF标志用来将一次运算过程中带进位的加法(ADC)或带借位的减法(SBB)产生的进位或借位传递到下一次运算过程中。</p>

<h5>2、DF标志(DF flag)</h5>

<p>这个方向标志(位于EFLAGS寄存器的第10位)控制串指令(MOVS, CMPS, SCAS, LODS以及STOS)。设置DF标志使得串指令自动递减（从高地址向低地址方向处理字符串），清除该标志则使得串指令自动递增。STD以及CLD指令分 别用于设置以及清除DF标志。</p>

<h5>3、系统标志以及IOPL域(System Flags and IOPL Field)</h5>

<p>EFLAGS寄存器中的这部分标志用于控制操作系统或是执行操作，它们不允许被应用程序所修改。这些标志的作用如下：
<code>
    TF(bit 8) [Trap flag]   将该位设置为1以允许单步调试模式，清零则禁用该模式。
    IF(bit 9) [Interrupt enable flag]   该标志用于控制处理器对可屏蔽中断请求(maskable interrupt requests)的响应。置1以响应可屏蔽中断，反之则禁止可屏蔽中断。
    IOPL(bits 12 and 13) [I/O privilege level field]   指示当前运行任务的I/O特权级(I/O privilege level)，正在运行任务的当前特权级(CPL)必须小于或等于I/O特权级才能允许访问I/O地址空间。这个域只能在CPL为0时才能通过POPF以及IRET指令修改。
    NT(bit 14) [Nested task flag]   这个标志控制中断链和被调用任务。若当前任务与前一个执行任务相关则置1，反之则清零。
    RF(bit 16) [Resume flag]   控制处理器对调试异常的响应。
    VM(bit 17) [Virtual-8086 mode flag]   置1以允许虚拟8086模式，清除则返回保护模式。
    AC(bit 18) [Alignment check flag]   该标志以及在CR0寄存器中的AM位置1时将允许内存引用的对齐检查，以上两个标志中至少有一个被清零则禁用对齐检查。
    VIF(bit 19) [Virtual interrupt flag]   该标志是IF标志的虚拟镜像(Virtual image)，与VIP标志结合起来使用。使用这个标志以及VIP标志，并设置CR4控制寄存器中的VME标志就可以允许虚拟模式扩展(virtual mode extensions)
    VIP(bit 20) [Virtual interrupt pending flag]   该位置1以指示一个中断正在被挂起，当没有中断挂起时该位清零。【Software sets and clears this flag; the processor only reads it.】与VIF标志结合使用。
    ID(bit 21) [Identification flag]   程序能够设置或清除这个标志指示了处理器对CPUID指令的支持。
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核获取当前进程指针]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/04/30/kernel-mm-current-rbp/"/>
    <updated>2014-04-30T16:10:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/04/30/kernel-mm-current-rbp</id>
    <content type="html"><![CDATA[<h4>一、内存数据表示：</h4>

<p>  我们在教材或阅读中，经常需要直观的用图示来展示数据在内存中的分布，那么数据是如何在内存中组织的呢？不同的机器有不同的表示法，我们以最常见的Intel X86系列计算机为例来说明这个问题。</p>

<p><img src="/images/kernel/20140430-1.jpg" alt="" /></p>

<p>  如上图示内存示意图：内存低址在上。内存高址在下，内存单位为16bit。对于基于intel i386架构的计算机，系统采用小端字节序来存放数据，所谓小端字节序是指低序字节低地址，高序字节高地址(内存地址增大方向)，大端字节序反之，给定系统所用的字节序称为主机字节序；CPU也以小端字节序形式读取数据，如上图所示，如果变量num是16位的short短整类型，则CPU从内存中读出的num=0x1234；如果num是32位的int类型，则CPU从内存中读出的是num=0x56781234,其中num地址是0x12345678，即&amp;num=0x12345678</p>

<h4>二、linux内核获取进程任务结构的指针</h4>

<p>  明白了系统内存数据表示，我们现在来看看linux内核是如何获取当前进程的任务结构指针的，以下代码均参照linux内核2.4.0的源码。<br/>
  在include\asm-i386\ current.h中
<code>
    #ifndef _I386_CURRENT_H
    #define _I386_CURRENT_H
    struct task_struct;
    static inline struct task_struct * get_current(void)
    {
        struct task_struct *current;
        __asm__("andl %%esp,%0; ":"=r" (current) : "0" (~8191UL));
        return current;
    }
    #define current get_current()
    #endif /* !(_I386_CURRENT_H) */
</code>
  每个进程都有一个task_struct任务结构，和一片用于系统空间堆栈的存储空间，他们在物理内存空间中也是联系在一起的，当给进程申请task_struct任务结构空间时，系统将连同系统的堆栈空间一起分配，如下图为某个进程切换时刻的内存图：</p>

<p><img src="/images/kernel/20140430-2.jpg" alt="" /></p>

<p>  下面针对代码实现来分析一下系统如何通过一系列操作获取进程在内核中的任务结构指针的：
  由于linux内核分配进程任务结构空间时，是以8KB(2个页面空间，即2<sup>1</sup>*4KB，linux对物理内存空间和虚拟内存空间管理时，均规定其页面单位的尺寸为4KB)为单位来分配的，所以内存应用地址是8KB(2<sup>13</sup>)的整数倍，即指针地址的低13位全为0，所以根据小端字节序，分配内存返回地址应该是指向struct task_struct结构，如图中的0xc2342000地址所指，至于为何采用代码中的做法而不是直接将此指针保存在全局变量中以供应用，内核是从其自身的效率方面来考虑的，我们在此只针对代码解释：
  根据上图，此刻内存esp内容必定在0xc2342000和0xc2344000之间的一个数值，我们假设取0xc2343ffe(即堆栈压栈EIP、返回地址、内部数据等相关数据了，地址值要减小；只要符合0xc2342xxx 、0xc2343xxx的地址指针都是正确的)，来通过代码运算看是否current的指针是0xc2342000。
<code>
    __asm__("andl %%esp,%0; ":"=r" (current) : "0" (~8191UL));
</code>
语句的意思是将ESP的内容与8191UL的反码按位进行与操作，之后再把结果赋值给current，其中8191UL=8192-1=2<sup>13</sup>-1,计算过程如下：
<code>
    8192UL=2^13 0000 0000 0000 0000 0010 0000 0000 0000
    8191UL 0000 0000 0000 0000 0001 1111 1111 1111
    ~8191UL(反码) 1111 1111 1111 1111 1110 0000 0000 0000
    0xc2343ffe 1100 0010 0011 0100 0011 1111 1111 1110
    andl结果： 1100 0010 0011 0100 0010 0000 0000 0000
    || (对照着看)
    0x c 2 3 4 2 0 0 0
</code>
  所以按位与操作之后的结果位0xc2342000，正好是struct task_struct结构的地址指针.通过观察可知，只要符合0xc2342xxx 、0xc2343xxx的地址指针经过相同的计算，都可以得到内核进程任务结构的指针。<br/>
  另外，在进入中断或系统调用时所引用的宏操作(include\asm-i386\ hw_irq.h):
<code>
    #define GET_CURRENT \
        "movl %esp, %ebx\n\t" \
        "andl $-8192, %ebx\n\t"
</code>
  其原理与上述描述也是一致的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux内存分配]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/04/30/kernel-mm-map/"/>
    <updated>2014-04-30T16:04:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/04/30/kernel-mm-map</id>
    <content type="html"><![CDATA[<h5>关于虚拟内存有三点需要注意：</h5>

<p>  1、4G的进程地址空间被人为的分为两个部分&ndash;用户空间与内核空间。用户空间从0到3G（0xc0000000）,内核空间占据3G到4G。用户进程通常情况下只能访问用户空间的虚拟地址，不能访问内核空间的虚拟地址。例外情况只有用户进程进行系统调用（代表用户进程在内核态执行）等时刻可以访问到内核空间。<br/>
  2、用户空间对应进程，所以每当进程切换，用户空间就会跟着变化；而内核空间是由内核负责映射，它并不会跟着进程变化，是固定的。内核空间地址有自己对应的页表，用户进程各自有不同的页表。<br/>
  3、每个进程的用户空间都是完全独立、互不相干的。</p>

<h4>一、4G地址空间解析图</h4>

<p><img src="/images/kernel/20140430-1.jpeg" alt="" /></p>

<p>  上图展示了整个进程地址空间的分布，其中4G的地址空间分为两部分，在用户空间内，对应了内存分布的五个段：数据段、代码段、BSS段、堆、栈。在上篇文章中有详细的介绍。</p>

<p>二、虚拟地址空间分配及其与物理内存对应图</p>

<p><img src="/images/kernel/20140430-2.jpeg" alt="" /></p>

<p>  这个图示内核用户空间的划分，图中最重要的就是高端内存的映射<br/>
  其中kmalloc和vmalloc函数申请的空间对应着不同的区域，同时又不同的含义。</p>

<p>三、物理内存分配图</p>

<p><img src="/images/kernel/20140430-3.jpeg" alt="" /></p>

<p>  这张图中页解释了三者的不同关系，和上篇文章中的内容有相似之处。</p>

<h5>伙伴算法：</h5>

<p>  一种物理内存分配和回收的方法，物理内存所有空闲页都记录在BUDDY链表中。首选，系统建立一个链表，链表中的每个元素代表一类大小的物理内存，分别为2的0次方、1次方、2次方，个页大小，对应4K、8K、16K的内存，没一类大小的内存又有一个链表，表示目前可以分配的物理内存。例如现在仅存需要分配8K的物理内存，系统首先从8K那个链表中查询有无可分配的内存，若有直接分配；否则查找16K大小的链表，若有，首先将16K一分为二，将其中一个分配给进程，另一个插入8K的链表中，若无，继续查找32K，若有，首先把32K一分为二，其中一个16K大小的内存插入16K链表中，然后另一个16K继续一分为二，将其中一个插入8K的链表中，另一个分配给进程&hellip;&hellip;..以此类推。当内存释放时，查看相邻内存有无空闲，若存在两个联系的8K的空闲内存，直接合并成一个16K的内存，插入16K链表中。（伙伴算法用于物理内存分配方案）</p>

<h5>SLAB算法：</h5>

<p>  是一种对伙伴算的一种补充，对于用户进程的内存分配，伙伴算法已经够好了，但对于内核进程，还需要存在一类很小的数据（字节大小，比如进程描述符、虚拟内存描述符等），若每次给几个字节的数据分配一个4KB的页，实在太浪费，于是就有了SLBA算法，SLAB算法其实就是把一个页用力劈成一小块一小块，然后再分配。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用kexec快速切换内核]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/04/23/kernel-kexec-setup/"/>
    <updated>2014-04-23T15:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/04/23/kernel-kexec-setup</id>
    <content type="html"><![CDATA[<p>kexec是一个用于在当前系统下快速切换到另一个内核的一种办法，它采用了一定的机制略过了硬件的初始化，所以切换速度会很快。</p>

<p>自2.6.13以后，Linux内核就已经自置了kexec，而Debian采用的内核已经是2.6.26，而且默认就支持kexec，所以在Debian下我们只要安装kexec-tools就行了。</p>

<pre><code>$ yum install kexec-tools
$ sudo apt-get install kexec-tools
</code></pre>

<p>安装好以后，就可以开始加载其他的内核了。<br/>
先看看我有哪些内核可以用：
<code>
$ ls /boot/vmlinuz-2.6.26-1-*
/boot/vmlinuz-2.6.26-1-amd64         
/boot/vmlinuz-2.6.26-1-vserver-amd64
</code>
好多好多，再看看当前的内核
<code>
$ uname -r
2.6.26-1-vserver-amd64
</code>
好了，现在我打算切换到2.6.26-1-amd64去：<br/>
记得，需要root权限的
<code>
$ sudo -s
</code>
先要用kexec加载它，先看看该追加哪些参数
<code>
$ cat /boot/grub/menu.lst | grep 2.6.26-1-amd64
title Debian GNU/Linux, kernel 2.6.26-1-amd64
kernel /vmlinuz-2.6.26-1-amd64 root=/dev/sda1 ro
initrd /initrd.img-2.6.26-1-amd64
</code>
找到了，对照上面开始用kexec加载了
<code>
$ kexec -l /boot/vmlinuz-2.6.26-1-amd64 --initrd /boot/initrd.img-2.6.26-1-amd64 --append="root=/dev/sda1 ro"
</code>
加载以后并不直接执行哦，所以我们要执行一下才会切换
<code>
$ kexec -e
</code>
不要紧张，等一下下就好了，起来以后还会提示登录的<br/>
看看我的效果：<br/>
<code>
$ uname -r
2.6.26-1-amd64
</code>
切换到我想要的内核了</p>
]]></content>
  </entry>
  
</feed>
