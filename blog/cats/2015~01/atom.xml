<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2015~01 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2015~01/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-01-23T18:22:05+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux软中断机制分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/23/kernel-irq-mark3/"/>
    <updated>2015-01-23T14:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/23/kernel-irq-mark3</id>
    <content type="html"><![CDATA[<h3>软中断分析</h3>

<h4>1. 为什么要软中断</h4>

<p>编写驱动的时候，一个中断产生之后，内核在中断处理函数中可能需要完成很多工作。但是中断处理函数的处理是关闭了中断的。也就是说在响应中断时，系统不能再次响应外部的其它中断。这样的后果会造成有可能丢失外部中断。于是，linux内核设计出了一种架构，中断函数需要处理的任务分为两部分，一部分在中断处理函数中执行，这时系统关闭中断。另外一部分在软件中断中执行，这个时候开启中断，系统可以响应外部中断。</p>

<p>关于软件中断的理论各种书籍都有介绍，不多叙述。而要真正体会软件中断的作用就必须从代码的角度来分析。我们做工作时候讲求的是professional，当一个人在某个领域一无所知的时候，我们称他为小白，偶，非苹果电脑。小白的脑子里充满了各种问题。慢慢的当这些疑惑解释完之后，小白就脱白了。此时，我们对这个领域的基本框架有了解，但这和professional还有一定的差距。再加以时日，逐渐融会贯通该领域才能达到专业的境界。</p>

<h4>2. 什么时候触发处理软件中断</h4>

<p>说了这么多废话，赶快步入正题。初识软中断，脑子里肯定有不少的疑问，首先就是软件中断在什么地方被触发处理？这个问题的答案就是：一个硬件中断处理完成之后。下面的函数在处理完硬件中断之后推出中断处理函数，在irq_exit中会触发软件中断的处理。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
<span class='line-number'>807</span>
<span class='line-number'>808</span>
<span class='line-number'>809</span>
<span class='line-number'>810</span>
<span class='line-number'>811</span>
<span class='line-number'>812</span>
<span class='line-number'>813</span>
<span class='line-number'>814</span>
<span class='line-number'>815</span>
<span class='line-number'>816</span>
<span class='line-number'>817</span>
<span class='line-number'>818</span>
<span class='line-number'>819</span>
<span class='line-number'>820</span>
<span class='line-number'>821</span>
<span class='line-number'>822</span>
<span class='line-number'>823</span>
<span class='line-number'>824</span>
<span class='line-number'>825</span>
<span class='line-number'>826</span>
<span class='line-number'>827</span>
<span class='line-number'>828</span>
<span class='line-number'>829</span>
<span class='line-number'>830</span>
<span class='line-number'>831</span>
<span class='line-number'>832</span>
<span class='line-number'>833</span>
<span class='line-number'>834</span>
<span class='line-number'>835</span>
<span class='line-number'>836</span>
<span class='line-number'>837</span>
<span class='line-number'>838</span>
<span class='line-number'>839</span>
<span class='line-number'>840</span>
<span class='line-number'>841</span>
<span class='line-number'>842</span>
<span class='line-number'>843</span>
<span class='line-number'>844</span>
<span class='line-number'>845</span>
<span class='line-number'>846</span>
<span class='line-number'>847</span>
<span class='line-number'>848</span>
<span class='line-number'>849</span>
<span class='line-number'>850</span>
<span class='line-number'>851</span>
<span class='line-number'>852</span>
<span class='line-number'>853</span>
<span class='line-number'>854</span>
<span class='line-number'>855</span>
<span class='line-number'>856</span>
<span class='line-number'>857</span>
<span class='line-number'>858</span>
<span class='line-number'>859</span>
<span class='line-number'>860</span>
<span class='line-number'>861</span>
<span class='line-number'>862</span>
<span class='line-number'>863</span>
<span class='line-number'>864</span>
<span class='line-number'>865</span>
<span class='line-number'>866</span>
<span class='line-number'>867</span>
<span class='line-number'>868</span>
<span class='line-number'>869</span>
<span class='line-number'>870</span>
<span class='line-number'>871</span>
<span class='line-number'>872</span>
<span class='line-number'>873</span>
<span class='line-number'>874</span>
<span class='line-number'>875</span>
<span class='line-number'>876</span>
<span class='line-number'>877</span>
<span class='line-number'>878</span>
<span class='line-number'>879</span>
<span class='line-number'>880</span>
<span class='line-number'>881</span>
<span class='line-number'>882</span>
<span class='line-number'>883</span>
<span class='line-number'>884</span>
<span class='line-number'>885</span>
<span class='line-number'>886</span>
<span class='line-number'>887</span>
<span class='line-number'>888</span>
<span class='line-number'>889</span>
<span class='line-number'>890</span>
<span class='line-number'>891</span>
<span class='line-number'>892</span>
<span class='line-number'>893</span>
<span class='line-number'>894</span>
<span class='line-number'>895</span>
<span class='line-number'>896</span>
<span class='line-number'>897</span>
<span class='line-number'>898</span>
<span class='line-number'>899</span>
<span class='line-number'>900</span>
<span class='line-number'>901</span>
<span class='line-number'>902</span>
<span class='line-number'>903</span>
<span class='line-number'>904</span>
<span class='line-number'>905</span>
<span class='line-number'>906</span>
<span class='line-number'>907</span>
<span class='line-number'>908</span>
<span class='line-number'>909</span>
<span class='line-number'>910</span>
<span class='line-number'>911</span>
<span class='line-number'>912</span>
<span class='line-number'>913</span>
<span class='line-number'>914</span>
<span class='line-number'>915</span>
<span class='line-number'>916</span>
<span class='line-number'>917</span>
<span class='line-number'>918</span>
<span class='line-number'>919</span>
<span class='line-number'>920</span>
<span class='line-number'>921</span>
<span class='line-number'>922</span>
<span class='line-number'>923</span>
<span class='line-number'>924</span>
<span class='line-number'>925</span>
<span class='line-number'>926</span>
<span class='line-number'>927</span>
<span class='line-number'>928</span>
<span class='line-number'>929</span>
<span class='line-number'>930</span>
<span class='line-number'>931</span>
<span class='line-number'>932</span>
<span class='line-number'>933</span>
<span class='line-number'>934</span>
<span class='line-number'>935</span>
<span class='line-number'>936</span>
<span class='line-number'>937</span>
<span class='line-number'>938</span>
<span class='line-number'>939</span>
<span class='line-number'>940</span>
<span class='line-number'>941</span>
<span class='line-number'>942</span>
<span class='line-number'>943</span>
<span class='line-number'>944</span>
<span class='line-number'>945</span>
<span class='line-number'>946</span>
<span class='line-number'>947</span>
<span class='line-number'>948</span>
<span class='line-number'>949</span>
<span class='line-number'>950</span>
<span class='line-number'>951</span>
<span class='line-number'>952</span>
<span class='line-number'>953</span>
<span class='line-number'>954</span>
<span class='line-number'>955</span>
<span class='line-number'>956</span>
<span class='line-number'>957</span>
<span class='line-number'>958</span>
<span class='line-number'>959</span>
<span class='line-number'>960</span>
<span class='line-number'>961</span>
<span class='line-number'>962</span>
<span class='line-number'>963</span>
<span class='line-number'>964</span>
<span class='line-number'>965</span>
<span class='line-number'>966</span>
<span class='line-number'>967</span>
<span class='line-number'>968</span>
<span class='line-number'>969</span>
<span class='line-number'>970</span>
<span class='line-number'>971</span>
<span class='line-number'>972</span>
<span class='line-number'>973</span>
<span class='line-number'>974</span>
<span class='line-number'>975</span>
<span class='line-number'>976</span>
<span class='line-number'>977</span>
<span class='line-number'>978</span>
<span class='line-number'>979</span>
<span class='line-number'>980</span>
<span class='line-number'>981</span>
<span class='line-number'>982</span>
<span class='line-number'>983</span>
<span class='line-number'>984</span>
<span class='line-number'>985</span>
<span class='line-number'>986</span>
<span class='line-number'>987</span>
<span class='line-number'>988</span>
<span class='line-number'>989</span>
<span class='line-number'>990</span>
<span class='line-number'>991</span>
<span class='line-number'>992</span>
<span class='line-number'>993</span>
<span class='line-number'>994</span>
<span class='line-number'>995</span>
<span class='line-number'>996</span>
<span class='line-number'>997</span>
<span class='line-number'>998</span>
<span class='line-number'>999</span>
<span class='line-number'>1000</span>
<span class='line-number'>1001</span>
<span class='line-number'>1002</span>
<span class='line-number'>1003</span>
<span class='line-number'>1004</span>
<span class='line-number'>1005</span>
<span class='line-number'>1006</span>
<span class='line-number'>1007</span>
<span class='line-number'>1008</span>
<span class='line-number'>1009</span>
<span class='line-number'>1010</span>
<span class='line-number'>1011</span>
<span class='line-number'>1012</span>
<span class='line-number'>1013</span>
<span class='line-number'>1014</span>
<span class='line-number'>1015</span>
<span class='line-number'>1016</span>
<span class='line-number'>1017</span>
<span class='line-number'>1018</span>
<span class='line-number'>1019</span>
<span class='line-number'>1020</span>
<span class='line-number'>1021</span>
<span class='line-number'>1022</span>
<span class='line-number'>1023</span>
<span class='line-number'>1024</span>
<span class='line-number'>1025</span>
<span class='line-number'>1026</span>
<span class='line-number'>1027</span>
<span class='line-number'>1028</span>
<span class='line-number'>1029</span>
<span class='line-number'>1030</span>
<span class='line-number'>1031</span>
<span class='line-number'>1032</span>
<span class='line-number'>1033</span>
<span class='line-number'>1034</span>
<span class='line-number'>1035</span>
<span class='line-number'>1036</span>
<span class='line-number'>1037</span>
<span class='line-number'>1038</span>
<span class='line-number'>1039</span>
<span class='line-number'>1040</span>
<span class='line-number'>1041</span>
<span class='line-number'>1042</span>
<span class='line-number'>1043</span>
<span class='line-number'>1044</span>
<span class='line-number'>1045</span>
<span class='line-number'>1046</span>
<span class='line-number'>1047</span>
<span class='line-number'>1048</span>
<span class='line-number'>1049</span>
<span class='line-number'>1050</span>
<span class='line-number'>1051</span>
<span class='line-number'>1052</span>
<span class='line-number'>1053</span>
<span class='line-number'>1054</span>
<span class='line-number'>1055</span>
<span class='line-number'>1056</span>
<span class='line-number'>1057</span>
<span class='line-number'>1058</span>
<span class='line-number'>1059</span>
<span class='line-number'>1060</span>
<span class='line-number'>1061</span>
<span class='line-number'>1062</span>
<span class='line-number'>1063</span>
<span class='line-number'>1064</span>
<span class='line-number'>1065</span>
<span class='line-number'>1066</span>
<span class='line-number'>1067</span>
<span class='line-number'>1068</span>
<span class='line-number'>1069</span>
<span class='line-number'>1070</span>
<span class='line-number'>1071</span>
<span class='line-number'>1072</span>
<span class='line-number'>1073</span>
<span class='line-number'>1074</span>
<span class='line-number'>1075</span>
<span class='line-number'>1076</span>
<span class='line-number'>1077</span>
<span class='line-number'>1078</span>
<span class='line-number'>1079</span>
<span class='line-number'>1080</span>
<span class='line-number'>1081</span>
<span class='line-number'>1082</span>
<span class='line-number'>1083</span>
<span class='line-number'>1084</span>
<span class='line-number'>1085</span>
<span class='line-number'>1086</span>
<span class='line-number'>1087</span>
<span class='line-number'>1088</span>
<span class='line-number'>1089</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>asmlinkage void __exception asm_do_IRQ(unsigned int irq, struct pt_regs &lt;em&gt;regs)
</span><span class='line'>{
</span><span class='line'>    struct pt_regs &lt;/em&gt;old_regs = set_irq_regs(regs);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    irq_enter();
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'> * Some hardware gives randomly wrong interrupts.  Rather
</span><span class='line'> * than crashing, do something sensible.
</span><span class='line'> */ 
</span><span class='line'>if (irq &gt;= NR_IRQS)
</span><span class='line'>    handle_bad_irq(irq, &amp;bad_irq_desc);
</span><span class='line'>else 
</span><span class='line'>    generic_handle_irq(irq);
</span><span class='line'>
</span><span class='line'>/* AT91 specific workaround */ 
</span><span class='line'>irq_finish(irq);
</span><span class='line'>
</span><span class='line'>irq_exit();
</span><span class='line'>set_irq_regs(old_regs);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;这里要注意，invoke_softirq必须满足两个条件才能被调用到，一个就是不是在硬件中断处理过程中或者在软件中断处理中，第二个就是必须有软件中断处于pending状态。第二个好理解，有软件中断产生才去处理，没有就不处理。第一个就不好理解了。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/*
</span><span class='line'>* Exit an interrupt context. Process softirqs if needed and possible:
</span><span class='line'>*/ 
</span><span class='line'>void irq_exit(void)
</span><span class='line'>{
</span><span class='line'>account_system_vtime(current);
</span><span class='line'>trace_hardirq_exit();
</span><span class='line'>sub_preempt_count(IRQ_EXIT_OFFSET);
</span><span class='line'>if (!in_interrupt() &amp;&amp; local_softirq_pending())
</span><span class='line'>    invoke_softirq();
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_NO_HZ
</span><span class='line'>/* Make sure that timer wheel updates are propagated */ 
</span><span class='line'>rcu_irq_exit();
</span><span class='line'>if (idle_cpu(smp_processor_id()) &amp;&amp; !in_interrupt() &amp;&amp; !need_resched())
</span><span class='line'>    tick_nohz_stop_sched_tick(0);
</span><span class='line'>#endif 
</span><span class='line'>preempt_enable_no_resched();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;在linux系统的进程数据结构里，有这么一个数据结构
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define preempt_count() (current_thread_info()-&gt;preempt_count)，
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;利用preempt_count可以表示是否处于中断处理或者软件中断处理过程中。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define PREEMPT_MASK    (__IRQ_MASK(PREEMPT_BITS) &lt;&lt; PREEMPT_SHIFT)
</span><span class='line'>#define SOFTIRQ_MASK    (__IRQ_MASK(SOFTIRQ_BITS) &lt;&lt; SOFTIRQ_SHIFT)
</span><span class='line'>#define HARDIRQ_MASK    (__IRQ_MASK(HARDIRQ_BITS) &lt;&lt; HARDIRQ_SHIFT)
</span><span class='line'>
</span><span class='line'>#define PREEMPT_OFFSET    (1UL &lt;&lt; PREEMPT_SHIFT)
</span><span class='line'>#define SOFTIRQ_OFFSET    (1UL &lt;&lt; SOFTIRQ_SHIFT)
</span><span class='line'>#define HARDIRQ_OFFSET    (1UL &lt;&lt; HARDIRQ_SHIFT)
</span><span class='line'>
</span><span class='line'>sub_preempt_count(IRQ_EXIT_OFFSET);
</span><span class='line'>
</span><span class='line'>#define in_interrupt() (irq_count())
</span><span class='line'>
</span><span class='line'>#define irq_count() (preempt_count() &amp; (HARDIRQ_MASK | SOFTIRQ_MASK))
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>![](/images/kernel/2015-01-23-1.png)
</span><span class='line'>
</span><span class='line'>preempt_count的8～23位记录中断处理和软件中断处理过程的计数。如果有计数，表示系统在硬件中断或者软件中断处理过程中。系统这么设计是为了避免软件中断在中断嵌套中被调用，并且达到在单个CPU上软件中断不能被重入的目的。对于ARM架构的CPU不存在中断嵌套中调用软件中断的问题，因为ARM架构的CPU在处理硬件中断的过程中是关闭掉中断的。只有在进入了软中断处理过程中之后才会开启硬件中断，如果在软件中断处理过程中有硬件中断嵌套，也不会再次调用软中断，because硬件中断是软件中断处理过程中再次进入的，此时preempt_count已经记录了软件中断！对于其它架构的CPU，有可能在触发调用软件中断前，也就是还在处理硬件中断的时候，就已经开启了硬件中断，可能会发生中断嵌套，在中断嵌套中是不允许调用软件中断处理的。Why？我的理解是，在发生中断嵌套的时候，表明这个时候是系统突发繁忙的时候，内核第一要务就是赶紧把中断中的事情处理完成，退出中断嵌套。避免多次嵌套，哪里有时间处理软件中断，所以把软件中断推迟到了所有中断处理完成的时候才能触发软件中断。
</span><span class='line'>
</span><span class='line'>#### 3. 软件中断的处理过程
</span><span class='line'>
</span><span class='line'>之前我已经说到，软中断的一个很大的目的就是避免中断处理中，处理的操作过多而丢失中断。同时中断还需要考虑到一件事情就是中断处理过程过长就会影响系统响应时间。如果一个中断处理一秒钟，那你一定能感受到串口卡住的现象。从另外一方面说呢，我们又必须考虑中断处理的操作一定的优先度，毕竟是硬件触发的事务，关系到网络、块设备的效率问题。Linux内核就中断方面就必须考虑平衡这三个方面的问题。而下面我要分析的__do_softirq函数就恰似在这三者之间打太极，游刃有余，面面俱到！
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/*
</span><span class='line'>* We restart softirq processing MAX_SOFTIRQ_RESTART times,
</span><span class='line'>* and we fall back to softirqd after that.
</span><span class='line'>*
</span><span class='line'>* This number has been established via experimentation.
</span><span class='line'>* The two things to balance is latency against fairness -
</span><span class='line'>* we want to handle softirqs as soon as possible, but they
</span><span class='line'>* should not be able to lock up the box.
</span><span class='line'>*/ 
</span><span class='line'>#define MAX_SOFTIRQ_RESTART 10 
</span><span class='line'>
</span><span class='line'>asmlinkage void __do_softirq(void)
</span><span class='line'>{
</span><span class='line'>struct softirq_action *h;
</span><span class='line'>__u32 pending;
</span><span class='line'>int max_restart = MAX_SOFTIRQ_RESTART;
</span><span class='line'>int cpu;
</span><span class='line'>
</span><span class='line'>pending = local_softirq_pending();
</span><span class='line'>account_system_vtime(current);
</span><span class='line'>
</span><span class='line'>__local_bh_disable((unsigned long)__builtin_return_address(0));
</span><span class='line'>trace_softirq_enter();
</span><span class='line'>
</span><span class='line'>cpu = smp_processor_id();
</span><span class='line'>restart:
</span><span class='line'>/* Reset the pending bitmask before enabling irqs */ 
</span><span class='line'>set_softirq_pending(0);
</span><span class='line'>
</span><span class='line'>local_irq_enable();
</span><span class='line'>
</span><span class='line'>h = softirq_vec;
</span><span class='line'>
</span><span class='line'>do 
</span><span class='line'>{
</span><span class='line'>    if (pending &amp; 1)
</span><span class='line'>    {
</span><span class='line'>        int prev_count = preempt_count();
</span><span class='line'>
</span><span class='line'>        h-&gt;action(h);
</span><span class='line'>
</span><span class='line'>        if (unlikely(prev_count != preempt_count()))
</span><span class='line'>        {
</span><span class='line'>            printk(KERN_ERR "huh, entered softirq %td %p" 
</span><span class='line'>                   "with preempt_count %08x," 
</span><span class='line'>                   " exited with %08x?\n", h - softirq_vec,
</span><span class='line'>                   h-&gt;action, prev_count, preempt_count());
</span><span class='line'>            preempt_count() = prev_count;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        rcu_bh_qsctr_inc(cpu);
</span><span class='line'>    }
</span><span class='line'>    h++;
</span><span class='line'>    pending &gt;&gt;= 1;
</span><span class='line'>}
</span><span class='line'>while (pending);
</span><span class='line'>
</span><span class='line'>local_irq_disable();
</span><span class='line'>
</span><span class='line'>pending = local_softirq_pending();
</span><span class='line'>if (pending &amp;&amp; --max_restart)
</span><span class='line'>    goto restart;
</span><span class='line'>
</span><span class='line'>if (pending)
</span><span class='line'>    wakeup_softirqd();
</span><span class='line'>
</span><span class='line'>trace_softirq_exit();
</span><span class='line'>
</span><span class='line'>account_system_vtime(current);
</span><span class='line'>_local_bh_enable();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>__do_softirq函数处理软件中断过程如下图流程分析
</span><span class='line'>
</span><span class='line'>4. 首先调用local_softirq_pending函数取得目前有哪些位存在软件中断
</span><span class='line'>
</span><span class='line'>5. 调用__local_bh_disable关闭软中断，其实就是设置正在处理软件中断标记，在同一个CPU上使得不能重入__do_softirq函数
</span><span class='line'>
</span><span class='line'>6. 重新设置软中断标记为0，set_softirq_pending重新设置软中断标记为0，这样在之后重新开启中断之后硬件中断中又可以设置软件中断位。
</span><span class='line'>
</span><span class='line'>7. 开启硬件中断
</span><span class='line'>
</span><span class='line'>8. 之后在一个循环中，遍历pending标志的每一位，如果这一位设置就会调用软件中断的处理函数。在这个过程中硬件中断是开启的，随时可以打断软件中断。这样保证硬件中断不会丢失。
</span><span class='line'>
</span><span class='line'>9. 之后关闭硬件中断，查看是否又有软件中断处于pending状态，如果是，并且在本次调用__do_softirq函数过程中没有累计重复进入软件中断处理的次数超过10次，就可以重新调用软件中断处理。如果超过了10次，就调用wakeup_softirqd();唤醒内核的一个进程来处理软件中断。设立10次的限制，也是为了避免影响系统响应时间。
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2015-01-23-2.png)
</span><span class='line'>
</span><span class='line'>#### 4. 处理软中断内核线程
</span><span class='line'>
</span><span class='line'>之前我说到不能让CPU长时间来处理中断事务，这样会影响系统的响应时间，严重影响用户和系统之间的交互式体验。所以在之前的__do_softirq中最多将循环执行10次，那么当执行了10次仍然有软中断在pending状态，这个时候应该怎么处理呢？系统将唤醒一个软件中断处理的内核进程，在内核进程中处理pending中的软件中断。这里要注意，之前我们分析的触发软件中断的位置其实是中断上下文中，而在软中断的内核线程中实际已经是进程的上下文。
</span><span class='line'>
</span><span class='line'>这里说的软中断上下文指的就是系统为每个CPU建立的ksoftirqd进程。
</span><span class='line'>
</span><span class='line'>看完这个函数，我不得不佩服这个函数设计的精巧！而我更多的从中体会到其中蕴藏的一种做人的道理。那就是做人要霸道一点，太谦和太恭维不行，但是又不能横行霸道，原则的问题要公平讲理，一定的时候顾及别人的利益，好处不能一个人独吞。这就跟下面ksoftirqd处理过程一样，该狠的时候禁止抢占，其它进程别想调度到哦，但是自己占用CPU时间过长的话，也自觉的问一问是不是该释放CPU给其它进程了。
</span><span class='line'>
</span><span class='line'>下面我们就来分析一下这个处理过程怎么就体现了上面的这种说法呢？软中断的内核进程中主要有两个大循环，外层的循环处理有软件中断就处理，没有软件中断就休眠。内层的循环处理软件中断，并每循环一次都试探一次是否过长时间占据了CPU，需要调度释放CPU给其它进程。具体的操作在注释中做了解释。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int ksoftirqd(void *__bind_cpu)
</span><span class='line'>{
</span><span class='line'>set_current_state(TASK_INTERRUPTIBLE);
</span><span class='line'>
</span><span class='line'>while (!kthread_should_stop())
</span><span class='line'>{
</span><span class='line'>    /*不管三七二十一首先禁止抢占，我掌握CPU，并全凭我自己掌握调度*/ 
</span><span class='line'>    preempt_disable();
</span><span class='line'>    if (!local_softirq_pending())
</span><span class='line'>    {
</span><span class='line'>        preempt_enable_no_resched();
</span><span class='line'>        /*如果没有软中断在pending，那就让出CPU来吧*/ 
</span><span class='line'>        schedule();
</span><span class='line'>       /*我被唤醒了，首先掌握CPU，不让自己被抢占，自己决定自己的是否要调度*/ 
</span><span class='line'>        preempt_disable();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    __set_current_state(TASK_RUNNING);
</span><span class='line'>
</span><span class='line'>    while (local_softirq_pending())
</span><span class='line'>    {
</span><span class='line'>        /* Preempt disable stops cpu going offline.
</span><span class='line'>           If already offline, we'll be on wrong CPU:
</span><span class='line'>           don't process */ 
</span><span class='line'>        if (cpu_is_offline((long)__bind_cpu))
</span><span class='line'>            goto wait_to_die;
</span><span class='line'>        /*处理软中断*/ 
</span><span class='line'>        do_softirq();
</span><span class='line'>        /*虽然我自己掌握是否要调度，虽然我可以一直不调度，但是我是
</span><span class='line'>        个正直的人，运行一段时间后我会看看是否需要调度，还其它进程运行*/ 
</span><span class='line'>        preempt_enable_no_resched();
</span><span class='line'>        cond_resched();
</span><span class='line'>        preempt_disable();
</span><span class='line'>        rcu_qsctr_inc((long)__bind_cpu);
</span><span class='line'>    }
</span><span class='line'>    preempt_enable();
</span><span class='line'>    set_current_state(TASK_INTERRUPTIBLE);
</span><span class='line'>}
</span><span class='line'>__set_current_state(TASK_RUNNING);
</span><span class='line'>return 0;
</span><span class='line'>
</span><span class='line'>wait_to_die:
</span><span class='line'>preempt_enable();
</span><span class='line'>/* Wait for kthread_stop */ 
</span><span class='line'>set_current_state(TASK_INTERRUPTIBLE);
</span><span class='line'>while (!kthread_should_stop())
</span><span class='line'>{
</span><span class='line'>    schedule();
</span><span class='line'>    set_current_state(TASK_INTERRUPTIBLE);
</span><span class='line'>}
</span><span class='line'>__set_current_state(TASK_RUNNING);
</span><span class='line'>return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[中断机制]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/01/23/kernel-irq-mark2/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-01-23T14:03:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/01/23/kernel-irq-mark2&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h4&gt;1、&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cpu的中断管理和指令执行（运算器）是两套硬件，他们互相独立又有关联。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2、&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;无论中断是否允许，运算器都按自己的节奏工作，无须花时间去查询是否由中断到达。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;3、&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;中断管理器则不断地探测是否有中断信号到达，若有且中断允许，则保存当前执行状态信息，然后打断当前取指序列，强行转到特定地址（中断向量）取指令，整个过程运算器并不知道，它只是忠实地执行取指电路取得的指令。&lt;br/&gt;
</span><span class='line'>  因此，只要没有中断信号到达，就不存在cpu边走边看的问题。
</span><span class='line'>  为保证正确访问临界数据区和正确执行临界代码段，操作系统一般有：关中断、关调度、信号量，还有些操作系统提供原子变量的方法，linux中广为人知的锁其实是用信号量实现的。那么，这么多的方法中，什么情况适用哪一种方法呢？是有规律的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1、原子变量&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  原子变量可以保证一个变量单次操作的正确性，其保护甚至比信号量还完善，信号量只能保护全局数据不被其他线程破坏，而原子变量能保证全局数据不被中断破坏。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>example1：
</span><span class='line'>    atomic int a;
</span><span class='line'>int b,c;
</span><span class='line'>a = a + b + c;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>上述代码中，cpu对a有一个读、修改、写的过程，这个过程如果被打断，并在其他线程中修改了a值，执行结果将出现错误，而原子变量将保证不会发生这样的错误。
</span><span class='line'>原子变量不能保护一系列操作的原子性，若把上述代码改为
</span><span class='line'>&lt;code&gt;
</span><span class='line'>example2：
</span><span class='line'>atomic int a;
</span><span class='line'>int b,c;
</span><span class='line'>a = a + b; //L1
</span><span class='line'>a = a + c; //L2
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>原子变量不能保证L1和L2两行程序间a不被其他线程修改，因此example2不一定能得到正确的结果。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2、信号量&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  稍微完善一点的操作系统都提供信号量机制，用于保护临界代码。上述example2就应该用下列代码替代L1和L2：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>获取信号量；
</span><span class='line'>a = a + b; //L1
</span><span class='line'>a = a + c; //L2
</span><span class='line'>释放信号量；
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>当一个全局变量可能被多个线程操作时，就应该用信号量保护，注意，不能在中断中访问用信号量保护的变量。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;3、关调度&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  关调度是一种比较粗暴的方式，关调度后，操作系统不会再进行线程上下文切换，而是专心执行一个线程，但是中断仍然开着。关调度可以起到替代信号量保护全局变量的作用，但一般不这样用，太粗暴了。但是如果某一段代码的执行时间有要求，希望cpu全速执行不被打断，但又不希望关中断时，可用关调度的方法。注意，从逻辑上，关调度能替换信号量，但不能替换原子变量。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;4、关中断&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  关中断是最粗暴的一种方式，用于保证最严格的时序执行，比如某段代码要在IO上输出两个高精度脉冲，脉冲宽度2uS，间隔2uS，这种需求只能通过用精确的指令延时来实现，延时过程中，如果被中断，或者发生线程切换，将不能正确输出脉冲。从逻辑上，前面所讲的三种保护，都可以用关中断实现，只是，太粗暴了。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[linux的调度分析（转）]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/01/22/kernel-sched-n2/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-01-22T17:42:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/01/22/kernel-sched-n2&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.csdn.net/cybertan/article/details/5686451"&gt;http://blog.csdn.net/cybertan/article/details/5686451&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;调度&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;公平调度 (fair-share scheduling) 的进程调度算法：&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;一、公平分享的调度策略&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  Linux 的调度算法是相对独立的一个模块，而且较容易理解。因此很多系统高手都爱对调度算法做改进。但是可以说调度器是一个非常神秘，难以捉摸的精灵。可能通过改变一个关键参数你就可以大大提高系统的效率。&lt;br/&gt;
</span><span class='line'>  对于一般进程， CPU 的使用时间都是系统平均分配给每一个进程的，因此这种公平分享都是从 进程的角度 出发的。 Bach 在 1986 年提出了公平分享调度策略（ Fair_Share scheduling ）来解决这个问题。和 Linux 三种内建策略比，公平分享调度策略是一种更抽象的调度策略。它认为 CPU 应该根据拥有进程的组（对 Linux 来说是用户）来分配时间，它实现了从 用户角度 考虑的公平原则。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;由内核的结构来看，实现这个算法有很多种方式。我们可以在与调度相关的程序里做小小的改动来实现，如改动一些数据结构并改写 schedule() 函数。当然也可以做得很复杂，比如重写 schedule() 来实现所需要的结果。但是有一点我们是要必须牢记的，那就是大部分的 Linux 核心都是以短小高效为最高目标。所以，改进的算法必须尽量向这个目标靠拢。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;二、新调度策略的实现：分析&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1 、这里所说的 ‘ 组 ’ 的概念，在 Linux 中是一个用户。我们所关心的是 Linux 的用户，而不是 UNIX 系统下的用户组或是别的什么概念。因此 在公平共享调度策略中，一个进程能够分配到的时间与登录的系统用户数以及拥有该进程用户开辟进程数的多少有关。&lt;br/&gt;
</span><span class='line'>2 、超级用户的进程是 独立于公平分享算法 的，因此它拥有的进程得到的调度时间应该和现在的进程调度算法分配时间相当。&lt;br/&gt;
</span><span class='line'>3 、对于实时进程，调度算法仍旧给予比普通进程更高的优先权。不过也不用担心会花太多的时间去实现，只要在现在调度算法的基础上稍做改进就可以简单实现。&lt;br/&gt;
</span><span class='line'>4 、新的调度算法对系统的吞吐量不能有太多的影响。比如说，如果定义的时间片少于 2 个 “ 滴答 ” ，那么新实现的调度器效率将变得很差。因为过于频繁的进程切换将耗费大部分的系统时间，而真正用于程序计算的时间则排在第二位了。 此条说明时间片的划分不能太小。&lt;br/&gt;
</span><span class='line'>5 、我们所实现的算法并不需要绝对的公平，严格的平均是需要用效率为代价来换取的。如果算法过于精确，那就需要复杂的数据结构和耗时的计算过程，所以我们可以在以速度为第一原则的基础上实现 “ 模糊 ” 的公平分享。&lt;br/&gt;
</span><span class='line'>6 、我们首先需要的是不断地思考和设计，只有将所有的问题都考虑清楚以后才可以开始动手。调度器是操作系统的核心，它将被频繁调用，因此其作用和影响也将是巨大的。我们要花费最小的代价实现算法，并且这种改动对系统核心的影响要降到最小。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Linux 的进程调度机制：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;概述：&lt;br/&gt;
</span><span class='line'>在多进程的操作系统中，进程调度是一个全局性的、关键性的问题。可以说，关于进程调度的研究是整个操作系统理论的核心，它对系统的总体设计、系统的实现、功能设置以及各方面的性能都有着决定性的影响。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1、 150ms ：当系统中有大量进程共存时，根据测定，当每个用户可以接受的相应速度延迟超过１５０ ms 时，使用者就会明显地感觉到了。&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2、 在设计一个进程调度机制时要考虑的具体问题主要有：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;调度的时机：什么情况下、什么时候进行调度；&lt;br/&gt;
</span><span class='line'>调度的政策：根据什么准则挑选下一个进入运行的进程；&lt;br/&gt;
</span><span class='line'>调度的方式：是 “ 可剥夺 ” 还是 “ 不可剥夺 ” 。当正在运行的进程并不自愿暂时放弃对ＣＰＵ的使用权时，是否可以强制性地暂时剥夺其使用权，停止其运行而给其他进程一个机会。如果是可剥夺的，那么是否在任何条件下都可剥夺，有没有例外？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;3、linux 内核的调度机制：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;１）调度的时机：&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;首先，自愿的调度 ( 主动调度 ) 随时都可以进行：在内核里面，一个进程可以通过 schedule() 启动一次调度。也就是由当前进程自愿调用 schedule() 暂时放弃运行的情景。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;除此之外，调度还可以非自愿的，即强制地发生在每次从系统调用返回的前夕，以及每次从中断或者异常处理 返回到用户空间 的前夕。&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;上述红字说明：只有在用户空间（当ＣＰＵ在用户空间运行时）发生的中断或者异常才会引起调度。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>ret_from_exception:
</span><span class='line'>    movl SYMBOL_NAME(bh_mask),%eax
</span><span class='line'>    andl SYMBOL_NAME(bh_active),%eax
</span><span class='line'>    jne handle_bottom_half
</span><span class='line'>    ALIGN
</span><span class='line'>ret_from_intr:
</span><span class='line'>    GET_CURRENT(%ebx)
</span><span class='line'>    movl EFLAGS(%esp),%eax        # mix EFLAGS and CS
</span><span class='line'>    movb CS(%esp),%al
</span><span class='line'>    testl $(VM_MASK | 3),%eax    # return to VM86 mode or non-supervisor?
</span><span class='line'>    jne ret_with_reschedule
</span><span class='line'>    jmp restore_all
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>　　 从上述代码中 (arch/i386/kernel/entry.S) ，可以看出，转入 ret_with_reschedule 的条件为中断或异常发生前 CPU 的运行级别为３，即用户态。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这一点 ( 只有在用户空间发生的中断或者异常才会引起调度 ) 对于系统的设计和实现有很重要的意义：因为这意味着当 CPU 在内核中运行时无需考虑强制调度的可能性。发生在系统空间中的中断或异常当然是可能的，但是这种中断或者异常不会引起调度。这使得内核的实现简化了，早期的 Unix 内核正是靠这个前提来简化其设计与实现的。否则的话，内核中所有可能为一个以上进程共享的变量和数据结构就全都要通过互斥机制 ( 如信号量 ) 加以保护，或者说放在临界区里面。即在内核中由于不会发生调度而无需考虑互斥。但是在多处理器 SMP 系统中，这种简化正在失去重要性：因为我们不得不考虑在另一个处理器上运行的进程访问共享资源的可能性。这样，不管在同一个 CPU 上是否可能在内核中发生调度，所有可能为多个进程 ( 可能在不同的 CPU 上运行 ) 共享的变量和数据结构，都得保护起来。这就是为什么读者在阅读代码时看到那么多的 up() 、 down() 等信号量操作或者加锁操作的原因。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;注意： “ 从系统空间返回到用户空间 ” 只是发生调度的必要条件，而不是充分条件。也就是说，这个条件满足了，调度并不是一定会发生的，具体是否发生调度还要判断当前进程的 task_struct 结构中的 need_resched 成员是否为非０，非０时才会转到 reschedule 处调用 schedule():
</span><span class='line'>&lt;code&gt;
</span><span class='line'> ret_with_reschedule:
</span><span class='line'>    cmpl $0, need_resched(%ebx)
</span><span class='line'>    jne reschedule
</span><span class='line'>    cmpl $0,sigpending(%ebx)
</span><span class='line'>    jne signal_return
</span><span class='line'>....
</span><span class='line'> reschedule:
</span><span class='line'>    call SYMBOL_NAME( schedule )    # test
</span><span class='line'>    jmp ret_from_sys_call
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>need_resched 成员是内核设置的，因为在用户空间是访问不到进程的 task_struct 结构的。除了当前进程通过系统调用自愿让出运行以及在系统调用中因某种原因受阻以外，主要就是当因某种原因唤醒一个进程的时候，以及在时钟中断服务程序发现当前进程已经连续运行太久的时候，内核会对
</span><span class='line'>need_resched 成员进行设置 ( 非０ ) ，以重新调度。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;２）调度的方式：&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Linux 内核的调度方式可以说是 “ 有条件的可剥夺 ” 方式。
</span><span class='line'>＊当进程在用户空间运行时，无论自愿不自愿，一旦有必要 ( 例如该进程已经运行了足够长的时间 ) ，内核就可以暂时剥夺其运行而调度其他进程进入运行。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;＊但是，一旦进程进入了内核空间，或者说进入 “ 系统态 ” 。这时候，尽管内核知道应该要调度了，但是实际上调度并不会发生，直到该进程即将 “ 下台 ” ，也就是 回到用户空间的前夕 才能剥夺其运行权力。所以， linux 的调度方式从原则上来说是可剥夺的，可是实际上由于调度时机的限制而变成了有条件的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;３）调度策略：&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  基本上是从 UNIX 继承下来的 以优先级为基础 的调度。内核为系统中的每个进程计算出一个反映其运行 “ 资格 ” 的权值，然后挑选权值最高的进程投入运行。在运行的过程中，当前进程的资格 ( 权值 ) 随时间而递减，从而在下一次调度的时候原来资格较低的进程可能就更有资格运行了。到所有的进程的资格都变为０时，就重新计算一次所有进程的资格。&lt;br/&gt;
</span><span class='line'>  但是，为了适应各种不同应用的需要，内核 在此基础上 实现了三种不同的策略： SCHED_FIFO 、 SCHED_RR 、 SCHED_OTHER 。每个进程都有自己适用的调度策略，并且，进程还可以通过系统调用 sched_setscheduler() 设定自己适用的调度策略。下面介绍一下他们的区别：&lt;br/&gt;
</span><span class='line'>   SCHED_FIFO ：适用于时间性要求比较强，但每次运行所需的时间比较短的进程，因此多用于实时进程；&lt;br/&gt;
</span><span class='line'>   SCHED_RR:RR 表示 Round Robin ，是轮流的意思 ( 轮换调度 ) ，这种策略适合比较大、也就是每次运行时间较长的程序。使用 SCHED_RR 策略地进程在 schedule() 调度中有一点特殊的处理。　&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  上两者的比较： SCHED_FIFO 、 SCHED_RR 都是基于优先级的调度策略，可是在怎样调度具有相同优先级的进程的问题上两者有区别：&lt;br/&gt;
</span><span class='line'>   调度策略为 SCHED_FIFO 的进程一旦受到调度而开始运行之后，就要一直运行到自愿让出或者被优先级更高的进程剥夺为止。对于每次受到调度时要求运行时间不长的进程，这样并不会有多大的影响。可是， 如果是受到调度后可能执行很长时间的进程 ，这样就不公平了。这种不公正性是对具有相同优先级的进程而言的，同级的进程必须等待该进程自愿让出或者直到其运行结束。因为具有更高优先级的进程可以剥夺他的运行，而优先级则本来就没有机会运行，谈不上不公正。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　所以，对于执行时间可能会很长的进程来说，应该使用 SCHED_RR 调度策略，这种策略 在相同的优先级的进程上实行轮换调度。 也就是说：对调度策略为 SCHED_RR 的进程有个时间配额，用完这个配额就要让具有相同优先级的其他就绪进程先运行。看 schedule() 的５４０行对调度策略为 SCHED_RR 的当前进程的处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; SCHED_OTHER ：是传统的调度策略，比较适合于交互式的分时应用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; 问题：既然每个进程都有自己的适用的调度策略，内核怎样来调用使用不同调度策略的进程的呢？是根据什么挑选出下一个要运行的进程呢？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; 实际上，挑选的原则最后还是归结到每个进程的权值，只不过是在计算资格的时候将适用的策略也考虑进去了，就好像考大学时符合某些特殊条件的考生会获得加分一样。同时，对于适用不同策略地进程的优先级别也加了限制。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;4、调度程序 schedule() ：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  调度程序 schedule() 是一个非常频繁地执行的函数，因此要将运行效率放在第一位，函数中使用了很多的 goto 语句。&lt;br/&gt;
</span><span class='line'>  前面讲过，对 schedule() 只能由进程在内核中主动 调用，或者在当前进程从系统空间返回用户空间的前夕被动的 发生，而不能在一个中断服务程序的内部发生。即使一个中断服务程序有调度的要求，也只能通过把当前进程的 need_resched 字段设为１来表达这种要求，而不能直接调用 schedule() 。所以，如果在某个中断服务程序内部调用了 schedule() ，那一定是有问题的，所以转向 scheduling_in_interrupt.(kernel/sched.c)
</span><span class='line'>&lt;code&gt;
</span><span class='line'>    asmlinkage void schedule(void)
</span><span class='line'>509 {
</span><span class='line'>510 struct schedule_data * sched_data;
</span><span class='line'>511 struct task_struct *prev, *next, *p;
</span><span class='line'>512 struct list_head *tmp;
</span><span class='line'>513 int this_cpu, c;
</span><span class='line'>514
</span><span class='line'>515 if (!current&gt;
</span><span class='line'>active_mm) BUG();
</span><span class='line'>516 need_resched_back:
</span><span class='line'>517 prev = current;
</span><span class='line'>518 this_cpu = prev&gt;
</span><span class='line'>processor;
</span><span class='line'>519
</span><span class='line'>520 if (in_interrupt())
</span><span class='line'>521 goto scheduling_in_interrupt ;
</span><span class='line'>522
</span><span class='line'>523 release_kernel_lock(prev, this_cpu);
</span><span class='line'>524
</span><span class='line'>525 /* Do "administrative" work here while we don't hold any locks */
</span><span class='line'>526 if (softirq_active(this_cpu) &amp; softirq_mask(this_cpu))
</span><span class='line'>　　 /* 检查是否有内核软中断服务请求在等待，若有，就转入 handle_softirq 为这些请求服务 */
</span><span class='line'>527 goto handle_softirq;
</span><span class='line'>528 handle_softirq_back:
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>我们来看一下内核对这种问题的响应：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[schedule()]
</span><span class='line'>686 scheduling_in_interrupt:
</span><span class='line'>687 　　 printk("Scheduling in interrupt/n");
</span><span class='line'>688 　　 BUG();
</span><span class='line'>689 　　 return;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>内核对此的响应是显示或者在 /var/log/messages 文件末尾添上一条出错信息，然后执行一个宏操作 BUG 。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;接着往下看 schedule() ：&lt;br/&gt;
</span><span class='line'>如果有内核软中断服务请求在等待，那么就转入 handle_softirq ：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>　 [schedule()]
</span><span class='line'>675 handle_softirq:
</span><span class='line'>676 　　　 do_softirq();
</span><span class='line'>677 　　　 goto handle_softirq_back;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>执行 softirq 队列完毕以后继续往下看：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>　　 ==================== kernel/sched.c 528 541 ====================
</span><span class='line'>[schedule()]
</span><span class='line'>528 handle_softirq_back:
</span><span class='line'>529
</span><span class='line'>530 /*
</span><span class='line'>531 * 'sched_data' is protected by the fact that we can run
</span><span class='line'>532 * only one process per CPU.
</span><span class='line'>533 */
</span><span class='line'>534 sched_data = &amp; aligned_data[this_cpu].schedule_data;
</span><span class='line'>535
</span><span class='line'>536 spin_lock_irq(&amp;runqueue_lock);
</span><span class='line'>537
</span><span class='line'>538 /* move an exhausted RR process to be last.. */
</span><span class='line'>539 if (prev&gt;policy == SCHED_RR)
</span><span class='line'>540 　　　 goto move_rr_last;
</span><span class='line'>541 move_rr_back:
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>指针 sched_data 指向一个 schedule_data 数据结构，用来保存供下一次调度时使用的信息。此数据结构的定义如下：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>==================== kernel/sched.c 91 101 ====================
</span><span class='line'>91 /*
</span><span class='line'>92 * We align perCPU
</span><span class='line'>scheduling data on cacheline boundaries,
</span><span class='line'>93 * to prevent cacheline pingpong.
</span><span class='line'>94 */
</span><span class='line'>95 static union {
</span><span class='line'>96 　　 struct schedule_data {
</span><span class='line'>97 　　　　 struct task_struct * curr;
</span><span class='line'>98 　　　　 cycles_t last_schedule;
</span><span class='line'>99 　　　 } schedule_data;
</span><span class='line'>100 　　　 char __pad [SMP_CACHE_BYTES];
</span><span class='line'>101 } aligned_data [ NR_CPUS ] __cacheline_aligned = { };
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>这里的 cycles_t 实际上是无符号整数，用来记录调度发生的时间。这个数据结构是为多处理器 SMP 结构而设的，因此我们不必关心。数组中的第一个元素，即 CPU0 的 schedule_data 结构初始化为 {&amp;init_task,0} ，其余的则全为｛０，０｝。代码中的 __cacheline_aligned 表示数据结构的起点应与高速缓存中的缓冲线对齐。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下面就要涉及可执行进程队列了，所以先将这个队列锁住 (536 行 ) ，以防止其他处理器的干扰。从 538 行开始：如果当前进程 prev 的调度策略是 SCHED_RR ，也就是轮换调度，那就要先进行一点特殊的处理 ( 540 : goto move_rr_last; ) 。
</span><span class='line'>（对使用 SCHED_RR 策略的当前进程的处理）
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  ==================== kernel/sched.c 679 685 ====================
</span><span class='line'> [schedule()]
</span><span class='line'>679  move_rr_last:
</span><span class='line'>680   if (!prev&gt;counter) {
</span><span class='line'>681       prev&gt;counter = NICE_TO_TICKS (prev&gt;nice);
</span><span class='line'>682       move_last_runqueue(prev);
</span><span class='line'>683     }
</span><span class='line'>684 goto move_rr_back;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  这里的 prev&gt;counter ：代表这当前进程的运行时间配额，其数值在每次时钟中断时都要递减 (update_process_times() 中实现的 ) 。因此，不管一个进程的时间配额有多高，随着运行时间的积累最终总会递减到０。对于调度策略为 SCHED_RR 的进程，一旦其时间配额降到０，就要从 可执行进程队列 runqueue 中当前的位置上移动到队列的末尾，同时恢复其最初的时间配额（ NICE_TO_TICKS ），以等待下一次的调度。对于具有相同优先级的进程，调度的时候排在前面的进程优先，所以这使队列中具有相同优先级的其他进程有了优势。&lt;br/&gt;
</span><span class='line'>  宏操作 NICE_TO_TICKS 根据系统时钟的精度将进程的优先级别换算成可以运行的时间配额。在 kernel/sched.c 中定义。&lt;br/&gt;
</span><span class='line'>　将一个进程的 task_struct 结构从可执行队列中的当前位置移到队列的末尾是由 move_last_runqueue() 完成的 (kernel/sched.c) 。把进程移到可执行进程队列的末尾意味着：如果队列中没有资格更高的进程，但是有一个资格与之相同的进程存在，那么，这个资格虽然相同而排在前面的进程会被选中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;继续看 schedule() ：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>==================== kernel/sched.c 541 553 ====================
</span><span class='line'>[schedule()]
</span><span class='line'>541 move_rr_back:
</span><span class='line'>542
</span><span class='line'>543 switch ( prev&gt;state ) {
</span><span class='line'>544 case TASK_INTERRUPTIBLE:
</span><span class='line'>545 　　　 if (signal_pending(prev)) {
</span><span class='line'>546 　　　　　　 prev&gt;state = TASK_RUNNING;
</span><span class='line'>547 　　　　　　 break;
</span><span class='line'>548 　　　　 }
</span><span class='line'>549 default:
</span><span class='line'>550 　　　 del_from_runqueue(prev);
</span><span class='line'>551 case TASK_RUNNING:
</span><span class='line'>552 }
</span><span class='line'>553 prev&gt;need_resched = 0;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  当前进程，就是正在执行的进程，当进入 schedule() 时其状态却不一定是 TASK_RUNNING 。例如：当前进程如已经在 do_exit() 中将其状态改成 TASK_ZOMBIE ，又如当前进程在 sys_wait4() 中调用 schedule() 时的状态为 TASK_INTERRUPTIBLE 。所以，这里的 prev&gt;state 与其说是当前进程的状态不如说是其意愿。当其意愿既不是继续执行也不是可中断的睡眠时，就要通过 del_from_runqueue() 把这个进程从可执行队列中撤下来。另一方面， 也可以看出 TASK_INTERRUPTIBLE 和 TASK_UNINTERRUPTIBLE 两种睡眠状态之间的区别： 前者在进程有信号等待处理时要将其改成 TASK_RUNNING ，让其处理完这些信号再说，而后者则不受信号的影响。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  最后，将 prev&gt;need_resched 恢复为０，因为所需求的调度已经在进行了。 下面的任务就是要 挑选出一个进程来运行了 ( 这一部分是很重要的，通过对就绪进程队列进行扫描 ) 。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>==================== kernel/sched.c 555 576 ====================
</span><span class='line'>[schedule()]
</span><span class='line'>555 /*
</span><span class='line'>556 * this is the scheduler proper:
</span><span class='line'>557 */
</span><span class='line'>558
</span><span class='line'>559 repeat_schedule:
</span><span class='line'>560 /*
</span><span class='line'>561 * Default process to select..
</span><span class='line'>562 */
</span><span class='line'>563 next = idle_task (this_cpu);
</span><span class='line'>564 c = 1000;
</span><span class='line'>565 if ( prev&gt;state == TASK_RUNNING )
</span><span class='line'>566      goto still_running;
</span><span class='line'>567
</span><span class='line'>568 still_running_back:
</span><span class='line'>569      list_for_each (tmp, &amp;runqueue_head) {
</span><span class='line'>570          p = list_entry(tmp, struct task_struct, run_list);
</span><span class='line'>571          if (can_schedule(p, this_cpu)) {
</span><span class='line'>572           int weight = goodness (p, this_cpu, prev&gt;active_mm);
</span><span class='line'>573           if ( weight &gt; c )
</span><span class='line'>574            c = weight, next = p;
</span><span class='line'>575          }
</span><span class='line'>576 }
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>在这段程序中， next 总是指向已知最佳的候选进程， c 则是这个进程的综合权值，或者是运行资格。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  挑选的过程是从 idle 进程即 0 号进程开始，其权值为－ 1000 ，这是可能的最低值，表示仅在没有其他进程可以运行时才会让他运行。&lt;br/&gt;
</span><span class='line'>  然后，遍历可执行队列 runqueue 中的每个进程 ( 在单 CPU 系统中 can_schedule() 的返回值永远是 1) ，也就是一般操作系统书中所称的就绪进程。为每一个就绪进程通过函数 goodness () 计算出他当前所具有的权值，然后与当前的最高值 c 相比。注意这里的条件： weight &gt; c ， 这意味着 “ 先入为大 ” 。也就是说，如果两个进程有相同的权值的话，排在队列前面的进程胜出，优先运行。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这里还有一个小插曲：如果当前进程的意图是继续运行，那么就要先执行一下 still_running(kernel/sched.c) ：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>  ==================== kernel/sched.c 670 674 ====================
</span><span class='line'>[schedule()]
</span><span class='line'>670 still_running:
</span><span class='line'>671    c = goodness(prev, this_cpu, prev&gt;active_mm);
</span><span class='line'>672    next = prev;
</span><span class='line'>673    goto still_running_back;
</span><span class='line'>674
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>也就是说，如果当前进程想要继续运行，那么在挑选候选进程时以当前进程此刻的权值开始比较。而且这意味着，对于具有相同权值的其他进程来说，当前进程优先。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  那么，进程的当前权值是怎样计算的呢？也就是 goodness() 是怎样执行的呢？
</span><span class='line'>&lt;code&gt;
</span><span class='line'>==================== kernel/sched.c 123 187 ====================
</span><span class='line'>[schedule()&gt; goodness() ]
</span><span class='line'>123 /*
</span><span class='line'>124 * This is the function that decides how desirable a process is..
</span><span class='line'>125 * You can weigh different processes against each other depending
</span><span class='line'>126 * on what CPU they've run on lately etc to try to handle cache
</span><span class='line'>127 * and TLB miss penalties.
</span><span class='line'>128 *
</span><span class='line'>129 * Return values:
</span><span class='line'>130 * 1000:never select this
</span><span class='line'>131 * 0: out of time, recalculate counters (but it might still be
</span><span class='line'>132 * selected)
</span><span class='line'>133 * +ve: "goodness" value (the larger, the better)
</span><span class='line'>134 * +1000: realtime process, select this.
</span><span class='line'>135 */
</span><span class='line'>136
</span><span class='line'>137 static inline int goodness(struct task_struct * p, int this_cpu, struct mm_struct *this_mm)
</span><span class='line'>138 {
</span><span class='line'>139 int weight;
</span><span class='line'>140
</span><span class='line'>141 /*
</span><span class='line'>142 * select the current process after every other
</span><span class='line'>143 * runnable process, but before the idle thread.
</span><span class='line'>144 * Also, dont trigger a counter recalculation.
</span><span class='line'>145 */
</span><span class='line'>146 weight = -1 ;
</span><span class='line'>147 if (p&gt;policy &amp; SCHED_YIELD )
</span><span class='line'>148 goto out;
</span><span class='line'>149
</span><span class='line'>150 /*
</span><span class='line'>151 * Non RT process normal case first.
</span><span class='line'>152 */
</span><span class='line'>153 if ( p&gt;policy == SCHED_OTHER ) {
</span><span class='line'>154 /*
</span><span class='line'>155 * Give the process a firstapproximation goodness value
</span><span class='line'>156 * according to the number of clockticks it has left.
</span><span class='line'>157 *
</span><span class='line'>158 * Don't do any other calculations if the time slice is
</span><span class='line'>159 * over..
</span><span class='line'>160 */
</span><span class='line'>161    weight = p-&gt;counter;
</span><span class='line'>162    if (!weight)
</span><span class='line'>163    goto out;
</span><span class='line'>164
</span><span class='line'>165 #ifdef CONFIG_SMP
</span><span class='line'>166 /* Give a largish advantage to the same processor... */
</span><span class='line'>167 /* (this is equivalent to penalizing other processors) */
</span><span class='line'>168 if (p-&gt;processor == this_cpu)
</span><span class='line'>169    weight += PROC_CHANGE_PENALTY;
</span><span class='line'>170 #endif
</span><span class='line'>171
</span><span class='line'>172 /* .. and a slight advantage to the current MM */
</span><span class='line'>173   if (p-&gt;mm == this_mm || !p-&gt;mm)
</span><span class='line'>174       weight += 1;
</span><span class='line'>175    weight += 20- p&gt;nice;
</span><span class='line'>176    goto out;
</span><span class='line'>177 }
</span><span class='line'>178
</span><span class='line'>179 /*
</span><span class='line'>180 * Realtime process, select the first one on the
</span><span class='line'>181 * runqueue (taking priorities within processes
</span><span class='line'>182 * into account).
</span><span class='line'>183 */
</span><span class='line'>184      weight = 1000 + p-&gt;rt_priority;
</span><span class='line'>185 out:
</span><span class='line'>186      return weight;
</span><span class='line'>187 }
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  ＊首先，如果一个进程通过系统调用 sched_yield() 明确表示了 “ 礼让 ” 后，就将其权值定位 -1 。这是很低的权值，一般就绪进程的权值至少是 0 。&lt;br/&gt;
</span><span class='line'>  ＊对于没有实时要求的进程 ，即调度策略为 SCHED_OTHER 的进程，其权值主要取决于两个因素：一个是剩下的时间配额 p-&gt;counter ，如果用完了则权值为 0 。另一个是进程的优先级 nice ，这是从早期 Unix 沿用下来的负向优先级 ( 越负，优先级越高 ) ，其取值范围为 19~-20 ，只有特权用户才能把 nice 值设置为小于 0 。所以，综合的权值 weight 在时间配额尚未用完时基本上是二者之和。 此外，如果是内核线程，或者其用户 空间与当前进程的相同，因而无需切换用户空间，则会得到一点小 “ 奖励 ” ，将权值额外加 1 。&lt;br/&gt;
</span><span class='line'>  ＊对于实时进程，即调度策略为 SCHED_FIFO 或者 SCHED_RR 的进程，则另有一种正向的优先级 ，那就是实时优先级 rt_priority ，而权值为 1000 + p-&gt;rt_priority 。可见， SCHED_FIFO 或者 SCHED_RR 两种有时间要求的策略赋予进程很高的权值 ( 相对于 SCHED_OTHER) 。这种进程的权值至少是 1000 。另一方面， rt_priority 的值对于实时进程之间的权值比较也起着重要的作用，其数值也是在 sched_setscheduler() 中与调度策略一起设置的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从上面可以看出：对于这两种实时调度策略，一个进程已经运行了多久，即时间配额 p-&gt;counter 的当前值，对权值的计算不起所用。不过，前面讲到，对于使用 SCHED_RR 策略地进程，当 p-&gt;counter 达到 0 时会导致将进程移到队列尾部。&lt;br/&gt;
</span><span class='line'>  实时进程的 nice 数值与优先级无关，但是对 使用 SCHED_RR 策略地进程的时间配额大小有关 ( 宏操作 NICE_TO_TICKS()) 。由于实时进程的权值有个很大的基数 (1000) ，因此当有实时进程就绪时，非实时进程是没有机会运行的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;由此可见， linux 内核中对权值的计算是很简单的，但是 goodness() 函数并不代表 linux 调度算法的全部，而要与前面讲到的 对 SCHED_RR 进程的特殊处理 、 对意欲继续运行的当前进程的特殊处理 ‘ 以及下面要讲到的 recalculate 结合起来分析。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;上面 still_running_back 运行结束后，变量 c 的值有几种可能：一种可能是一个大于 0 的正数，此时 next 指向挑选出来的进程；另一种可能是 c 的值为 0 ，发生于就绪队列中所有进程的权值都是 0 的时候。由于除了 init 进程和调用了 sched_yield() 的进程以外，每个进程的权值最低为 0 ，所以只要队列中有其他就绪进程存在就不可能为负数。因此，队列中所有其他进程的权值都已经降到 0 了，说明这些进程的调度策略都是 SCHED_OTHER ，即系统中当前没有就绪的实时进程，因为如果有策略为 SCHED_FIFO 或者 SCHED_RR 的进程存在，其权值至少也有 1000 。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;let`s go on ：回到 schedule()
</span><span class='line'>&lt;code&gt;
</span><span class='line'>==================== kernel/sched.c 578 580 ====================
</span><span class='line'>[schedule()]
</span><span class='line'>578 /* Do we need to recalculate
</span><span class='line'>counters? */
</span><span class='line'>579 if (!c)
</span><span class='line'>580 goto recalculate;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>如果当前已经选择的进程（权值最高的进程）的权值为 0 ，那就要重新计算各个进程的时间配额。如上所述，这说明系统中当前没有就绪的实时进程。而且，这种情况已经持续了一段时间，否则 SCHED_OTHER 进程的权值就没有机会消耗到 0 。
</span><span class='line'>&lt;code&gt;
</span><span class='line'> ==================== kernel/sched.c 658 669 ====================
</span><span class='line'>[schedule()]
</span><span class='line'>658 recalculate:
</span><span class='line'>659 {
</span><span class='line'>660     struct task_struct *p;
</span><span class='line'>661     spin_unlock_irq(&amp;runqueue_lock);
</span><span class='line'>662     read_lock(&amp;tasklist_lock);
</span><span class='line'>663     for_each_task (p)
</span><span class='line'>664         p-&gt;counter = (p-&gt;counter &gt;&gt; 1) + NICE_TO_TICKS(p-&gt;nice);
</span><span class='line'>665     read_unlock(&amp;tasklist_lock);
</span><span class='line'>666     spin_lock_irq(&amp;runqueue_lock);
</span><span class='line'>667 }
</span><span class='line'>668  goto repeat_schedule;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  这里所作的运算是将每个进程的当前的时间配额 p-&gt;counter 除以 2 ，再在上面加上由该进程的 nice 值换算过来的 tick 数量。宏操作 NICE_TO_TICKS 的定义在前面已经见过，显然 nice 值对于非实时进程既表示优先级也决定着时间配额。&lt;br/&gt;
</span><span class='line'>  注意：这里的 for_each_task() 是对所有进程的循环，而并不是仅对就绪进程队列的循环，对于不再就绪进程队列中的非实时进程 ，这里得到了提升其时间配额、从而提升其综合权值的机会。不过，这种对综合权值的提升是很有限的，每次重新计算都将原有的时间配额减半，再与 NICE_TO_TICKS(p-&gt;nice) 相加，这样就决定了重新计算以后的综合权值永远也不可能达到 NICE_TO_TICKS(p-&gt;nice) 的两倍。因此，即使经过很长时间的韬光养晦，也不可能达到可与实时进程竞争的地步，所以只是对非实时进程之间的竞争有意义。&lt;br/&gt;
</span><span class='line'>  至于实时进程，时间配额的增加并不会提升其综合权值，而且对于 SCHED_FIFO 进程，时间配额就没有什么意义。
</span><span class='line'>重新计算完权值以后，程序转回 repeat_schedule( 跳回前面，再次执行挑选进程 ) 处重新挑选。这样，当再次完成对就绪进程队列的扫描时，变量 c 的值就应该不为 0 了，此时 next 指向挑选出来的进程。&lt;br/&gt;
</span><span class='line'>至此，已经挑选好进程了（权值最高的进程）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;还没有结束阿？哈哈&lt;br/&gt;
</span><span class='line'>进程挑好之后，接下来要做的就是切换的事情了。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[schedule()]
</span><span class='line'>581 /*
</span><span class='line'>582 * from this point on nothing can prevent us from
</span><span class='line'>583 * switching to the next task, save this fact in
</span><span class='line'>584 * sched_data.
</span><span class='line'>585 */
</span><span class='line'>586 sched_data&gt;curr = next;
</span><span class='line'>587 #ifdef CONFIG_SMP
</span><span class='line'>.....
</span><span class='line'>590 #endif
</span><span class='line'>591 spin_unlock_irq(&amp;runqueue_lock);
</span><span class='line'>592
</span><span class='line'>593 if ( prev == next )
</span><span class='line'>594     goto same_process;
</span><span class='line'>595
</span><span class='line'>596 #ifdef CONFIG_SMP
</span><span class='line'>==================== kernel/sched.c 612 657 ====================
</span><span class='line'>612 #endif /* CONFIG_SMP */
</span><span class='line'>613
</span><span class='line'>614 kstat.context_swtch++;
</span><span class='line'>615 /*
</span><span class='line'>616 * there are 3 processes which are affected by a context switch:
</span><span class='line'>617 *
</span><span class='line'>618 * prev == .... ==&gt; (last =&gt; next)
</span><span class='line'>620 * It's the 'much more previous' 'prev' that is on next's stack,
</span><span class='line'>621 * but prev is set to (the just run) 'last' process by switch_to().
</span><span class='line'>622 * This might sound slightly confusing but makes tons of sense.
</span><span class='line'>623 */
</span><span class='line'>624 prepare_to_switch ();
</span><span class='line'>625 {
</span><span class='line'>626   struct mm_struct *mm = next-&gt;mm;
</span><span class='line'>627   struct mm_struct *oldmm = prev-&gt;active_mm;
</span><span class='line'>628   if (!mm) {
</span><span class='line'>629         if (next&gt;active_mm) BUG();
</span><span class='line'>630         next&gt;active_mm = oldmm;
</span><span class='line'>631         atomic_inc(&amp;oldmm&gt;mm_count);
</span><span class='line'>632          enter_lazy_tlb(oldmm, next, this_cpu);
</span><span class='line'>633 } else {
</span><span class='line'>634      if (next&gt;active_mm != mm) BUG();
</span><span class='line'>635     switch_mm(oldmm, mm, next, this_cpu);
</span><span class='line'>636 }
</span><span class='line'>637
</span><span class='line'>638 if (!prev&gt;mm) {
</span><span class='line'>639       prev&gt;active_mm = NULL;
</span><span class='line'>640       mmdrop(oldmm);
</span><span class='line'>641 }
</span><span class='line'>642 }
</span><span class='line'>643
</span><span class='line'>644 /*
</span><span class='line'>645 * This just switches the register state and the
</span><span class='line'>646 * stack.
</span><span class='line'>647 */
</span><span class='line'>648 switch_to(prev, next, prev);
</span><span class='line'>649 __schedule_tail(prev);
</span><span class='line'>650
</span><span class='line'>651 same_process:
</span><span class='line'>652     reacquire_kernel_lock(current);
</span><span class='line'>653     if (current&gt;need_resched)
</span><span class='line'>654        goto need_resched_back;
</span><span class='line'>655
</span><span class='line'>656    return;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>跳过对 SMP 结构的条件编译部分。&lt;br/&gt;
</span><span class='line'>  首先，如果挑选出来的进程 next 就是当前进程 prev ，就不用切换，直接跳转到 same_process 处就返回了。这里的 reacquire_kernel_lock() 对于 i386 单 CPU 结构而言是空语句。前面已经把当前进程的 need_resched 清 0 ，如果现在又成了非 0 ，则一定是发生了中断并且情况有了变化，所以转回 need_resched_back 再调度一次。&lt;br/&gt;
</span><span class='line'>  否则，如果挑选出来的进程 next 与当前进程 prev 不同，那就要切换了。对于 i386 单 CPU 结构而言， prepare_to_switch() 也是空语句。而 649 行的 __schedule_tail() 则只是将当前进程 prev 的 task_struct 结构中的 policy 字段里的 SCHED_YIELD 标志位清成 0 。所以实际上只剩下了两件事：对用户虚存空间的处理；进程的切换 switch_to() 。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;实验：&lt;br/&gt;
</span><span class='line'>第二部分：如何在 sched.c 中实现算法？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先，确定何时进行算法的计算过程。 是在 schedule() 中选择下一运行进程之前？&lt;br/&gt;
</span><span class='line'>选择下一运行进程时？选择下一运行进程之后？还是直接修改 goodness() 函数以确定下一运行进程呢？&lt;br/&gt;
</span><span class='line'>  在以上提到的各个位置都可以添加代码实现我们的算法，但是考虑到 schedule() 函数是被频繁调用的一个函数 ，它的运行效率直接影响到了系统的吞吐量，因此我们所添加的代码段应该是被调用的频率越小越好。&lt;br/&gt;
</span><span class='line'>  在这种原则的指导之下，我们发现有一段代码只有在 CPU 的时间段（ epoch ）全部耗尽的时候才去调用，而在此时刻可以根据一些信息调度进程，达到给每个用户平均分配 CPU 时间的效果。在 schedule() 函数选择了一个进程之后，它将判断是否需要重新计算进程的 counter 值，这个过程只有在运行队列中所有进程的都用完了时间片时才被调用。在这段代码中加入我们的算法是最合适不过的了。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　原文为：&lt;a href="http://www.cublog.cn/u2/69737/showart_1070708.html"&gt;http://www.cublog.cn/u2/69737/showart_1070708.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[linux 调度总结]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/01/22/kernel-sched-n1/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-01-22T16:56:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/01/22/kernel-sched-n1&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://zzjlzx.blog.chinaunix.net/uid-29060569-id-4076183.html"&gt;http://zzjlzx.blog.chinaunix.net/uid-29060569-id-4076183.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;调度：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;操作系统的调度程序的两项任务：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;1： 调度：&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;实现调度策略，决定就绪的进程、线程竞争cpu的次序的裁决原则。说白了就是进程和线程何时应该放弃cpu和选择那个就绪进程、线程来执行。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;2： 分派：&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原来实现调度机制如何时分复用cpu，处理好上下文交换的细节、完成进程、线程和cpu的绑定和放弃的具工作。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;linux 2.4 调度：&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1：policy ：&lt;br/&gt;
</span><span class='line'>进程的调度策略：&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>1）SCHED_FIFO : 实时进程使用的的先进先出策略，进程会一直占用cpu除非其自动放弃cpu。
</span><span class='line'>2）SCHED_RR : 实时进程的轮转策略，当分配个u进程的时间片用完后，进程会插入到原来优先级的队列中。
</span><span class='line'>3）SHED_OTHER：普通进程基于优先级的的时间片轮转调度。
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>2：priority：进程的静态优先级。&lt;br/&gt;
</span><span class='line'>3：nice：进程用来控制优先级的因子。在-20～19间的整数。增加nice的值会使优先级降低。默认值为0。&lt;br/&gt;
</span><span class='line'>4：rt_priority：实时进程的优先级。&lt;br/&gt;
</span><span class='line'>5：counter：一个计时器，进程目前的剩余时间片。用来动态计算进程的动态优先级。系统将休眠次数多的进程的剩余时间叠会加起来。&lt;br/&gt;
</span><span class='line'>6：schedule()的流程：&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>1）检查是否有软中断请求。有则先执行。
</span><span class='line'>2）如果当前进程的调度策略为RR并且counter==0,将此进程移到运行进程队列的尾部。重新计算counter的值。
</span><span class='line'>3）若当前进程的状态为 TASK_INTERRUPTIBLE 且有信号接收，则将进程状态设置为TASK_RUNNING，
</span><span class='line'>   若当前进程的状态不是TASK_RUNNING,则将进程从可执行的队列中移出，将其进程描述符的need_resched置为0。
</span><span class='line'>4）选择出可运行队列中最大权值，保存在变量c中，与之对应的进程描述符保存在变量next中。
</span><span class='line'>5）检查c是否为0,c==0,则队列中的所有进程的时间片都用完了。此时对队列中所有进程的时间片重新计算。重新执行第5步。
</span><span class='line'>6）如果netx==当前进程，则结束调度进程。否则，进行进程切换。
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;过程：2.4的调度算法，将所有的就绪进程组织成一条可运行队列，不管是单核环境还是smp环境，cpu都只从这条可运行队列中循环遍历直到挑选到下一个要运行的进程。如果所有的进程的时间片都用完，就重新计算所有进程的时间片。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2.4调度的数据结构：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-01-22-1.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2.4调度的不足：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1）一个明显的缺点就是时间复杂度为O(n)，每次都要遍历队列，效率低！。虽然说O(n)的复杂度看起来不是很糟糕，而且系统能容纳进程数量也不一定会很大，但复杂度为O(n)还是很难忍受的。&lt;br/&gt;
</span><span class='line'>2）由于在smp环境下多个cpu还是使用同一条运行队列，所以进程在多个cpu间切换会使cpu的缓存效率降低，降低系统的性能。&lt;br/&gt;
</span><span class='line'>3）多个cpu共享一条运行队列，使得每个cpu在对队列操作的时候需要对运行队列进行加锁，这时如果其他空闲cpu要访问运行队列，则只能等待了。由2、3两点可以看出2.4的调度算法对smp环境的伸缩性不高！不能很好地支持smp环境。&lt;br/&gt;
</span><span class='line'>4）不支持内核抢占，内核不能及时响应实时任务，无法满足实时系统的要求（即使linux不是一个硬实时，但同样无法满足软实时性的要求）。&lt;br/&gt;
</span><span class='line'>5）进程的剩余时间是除了nice值外对动态优先级影响最大的因素，并且系统将休眠次数多的进程的剩余时间叠加起来，从而得出更大的动态优先级。这体现了系统更倾向优先执行I/O型进程。内核就是通过这种方式来提高交互进程的优先级，使其优先执行。但休眠多的进程就代表是交互型的进程吗？并不是的，这只能说明它是I/O型进程。I/O型进程需要进行I/O交互，如读写磁盘时进程会经常处于休眠的状态。如果把这种进程当成是交互进程，反而会影响其他真正的交互进程。&lt;br/&gt;
</span><span class='line'>6）简单的负载平衡。那个cpu空闲就把就绪的进程调度到这个cpu上去执行。或者某个cpu的进程的优先级比某个进程低，就调度到那个cpu上去执行。这样简单的负载平衡缺点不言而喻。进程迁移比较频繁，而且出现2、3的情况。这样的负载平衡弊大于利！&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;linux 2.6 O(1)调度：&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1：policy：调度策略跟2.4的一样。&lt;br/&gt;
</span><span class='line'>2：rt_priority：实时进程的优先级。在0～99之间。MAX_RT_PRIO为100。不参与优先级的计算。&lt;br/&gt;
</span><span class='line'>3：static_prio：非实时进程的静态优先级，由nice值转换而来，-20 &lt;= nice &lt;= 19。static_prio = MAX_RT_PRIO + nice + 20。所以 100 &lt;= static_prio &lt;= 139。&lt;br/&gt;
</span><span class='line'>4：sleep_avg：进程平均等待时间。进程等待时间与执行时间的差。反映进程的交互性，又表示了进程需要运行的紧急程度。这个值越大，进程的优先级就越高。&lt;br/&gt;
</span><span class='line'>5：prio：进程的动态优先级。主要影响进程的prio的因素是sleep_avg。其计算时机为：&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>1）进程在创建时继承父进程的prio。
</span><span class='line'>2）进程由睡眠到被唤醒时进行优先级修正。
</span><span class='line'>3）时钟中断中重新计算进程的优先级并且进程进入相应的队列。
</span><span class='line'>4）负载平衡/修改nice/修改调度策略等都有可能修改prio的值。
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>6：time_slice：进程的时间片余额。进程的默认时间片与static_prio有关。&lt;br/&gt;
</span><span class='line'>7：load_weight：平衡负载用的权重。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;linux 2.6 O(1)调度的数据结构代码：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1：运行队列：部分代码如图：
</span><span class='line'>&lt;img src="/images/kernel/2015-01-22-2.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2：优先级数组代码如图：
</span><span class='line'>&lt;img src="/images/kernel/2015-01-22-3.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;1）nr_active：数组内可运行的进程
</span><span class='line'>2）DECLARE_BITMP(...)：优先级位图的宏。找出优先级最高的且有就绪进程的队列。
</span><span class='line'>3）list_head queue：使用通用链表，优先级队列。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;linux 2.6 O(1)调度的数据结构（active or expired）：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-01-22-4.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;每个cpu维护一个自己的运行队列，每个运行队列有分别维护自己的active队列与expried队列。当进程的时间片用完后就会被放入expired队列中。当active队列中所有进程的时间片都用完，进程执行完毕后，交换active队列和expried。这样expried队列就成为了active队列。这样做只需要指针的交换而已。当调度程序要找出下一个要运行的进程时，只需要根据上面提过的位图宏来找出优先级最高的且有就绪进程的队列。这样的数据组织下，2.6的调度程序的时间复杂度由原来2.4的O(n)提高到O(1)。而其对smp环境具有较好的伸缩性。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;数据结构的组织如下：
</span><span class='line'>&lt;img src="/images/kernel/2015-01-22-5.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;linux 2.6 O(1) 调度的进程优先级：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2.6调度有140个优先级级别，由0～139, 0～99 为实时优先级，而100～139为非实时优先级。上面的图有说。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;特点：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1）动态优先级是在静态优先级的基础上结合进程的运行状态和进程的交互性来计算。所以真正参与调度的是进程的动态优先级。而进程的交互性是通过进程的睡眠时间来判断的（这点从根本上来说还是和2.4思想的一样）。所以动态优先级是通过静态优先级和进程睡眠时间来计算的。这里要注意的是，动态优先级是非实时进程插入优先级队列的依据。但实时进程是根据rt_prioirty来插入队列的，实时进程的实时优先级由进程被创建到进程结束都是不会改变的。但其执行的时间片是根据静态优先级来计算的。&lt;br/&gt;
</span><span class='line'>2）进程优先级越高，它每次执行的时间片就越长。&lt;br/&gt;
</span><span class='line'>3）使用TASK_INTERACTIVE()宏来判断进程是否为交互进程，该宏是基于nice来判断的，nice值越高，优先级越低，这样交互性越低。&lt;br/&gt;
</span><span class='line'>4）如果一个进程的交互性比较强，那么其执行完自身的时间片后不会移到expired队列中，而是插到原来队列的尾部。这样交互性进程可以快速地响应用户，交互性会提高。如果被移到expired队列，那么在交换队列指针前，交互性进程可能就会发生严重的饥饿，从而使交互性严重下降&lt;br/&gt;
</span><span class='line'>5）在创建新的进程时，子进程会与父进程平分进程的剩余时间片。即在 fork()&mdash;&mdash;&gt;do_fork() 后父子进程的时间片之和等于原来父进程的时间片大小。这样做的原因是为了防止父进程利用创建子进程来窃取时间片。如果子进程在退出时，从来没有被重新分配时间片，且还有时间片剩余，则其剩余的时间片会返还给父进程。这样父进程就不会因为创建子进程而受到时间片上的惩罚。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2.6 O(1)调度动态优先级的计算代码：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1）effective_prio(p)：&lt;br/&gt;
</span><span class='line'>&lt;img src="/images/kernel/2015-01-22-6.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2）normal_prio：&lt;br/&gt;
</span><span class='line'>&lt;img src="/images/kernel/2015-01-22-7.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;3）__normal_prio：&lt;br/&gt;
</span><span class='line'>&lt;img src="/images/kernel/2015-01-22-8.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;linux 2.6 O(1)调度的调度与抢占时机：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1：直接调度：当前进程因为阻塞而直接调用schedule()主动放弃cpu。&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;1）当前进程被放入相应的等待队列。
</span><span class='line'>2）改变当前进程的进程状态。由TASK_RUNNING 改为TASK_UNINTERRUPTIBLE 或者 TASK_INTERRUPTIBLE。
</span><span class='line'>3）选择新的进程运行。调用schedule() 来获得下一个需要运行的进程。
</span><span class='line'>4）当资源可用时，把当前进程从等待队列中移除。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2：被动调度：当前进程因为时间片用完，或者被更高优先级的进程抢占，而被逼放弃cpu。这时当前进程不会立刻被调度出去，而是通过设置TIF_NEED_RESCHED位为1来告知kernel需要调度了。在适当的时机kernel会重新调度。&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1）问题：为什么不能立刻调度？&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;进程在内核里运行时，可能要申请共享资源，如自旋锁，如果这个时候去抢占当前进程，使其立刻让出cpu，如果新进程也需要相同的共享资源的话，那么会导致死锁！所以这里进程只设置了标志位通知内核需要调度。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2）问题：什么时候才是合适的时机？&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核在即将返回用户空间时会检查TIF_NEED_RESCHED，如果设置了就调用schedule()，这样就会发生用户抢占。&lt;br/&gt;
</span><span class='line'>a：从中断处理程序返回用户空间时。&lt;br/&gt;
</span><span class='line'>b：从系统调用返回用户空间时。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;linux 2.6 O(1)调度的负载平衡：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;复杂！&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;linux 2.6 O(1)调度的过渡：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1：SD调度器：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;O(1)调度的复杂性主要来至于动态优先级的计算。调度器根据一些难以理解的经验公式和平均休眠时间来决定、修改进程的优先级。这是O(1)调度一个比较大的缺点（甚至可以说是致命的。）。SD调度的特点：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1）数据结构跟O(1)调度差不多，不过少了expired队列。&lt;br/&gt;
</span><span class='line'>2）进程在用完其时间片后不会放到expired队列，而是放到下一个优先级队列中（这就是为什么没有expired队列的原因）。当下降到最低一级时，时间片用完，就回到初始优先级队列去，重新降级的过程！每一次降级就像我们下楼梯的过程，所以这被称为楼梯算法。&lt;br/&gt;
</span><span class='line'>3）两种时间片：粗粒度、细粒度。粗粒度由多个细粒度组成，当一个粗粒度时间片被用完，进程就开始降级，一个细粒度用完就进行轮回。这样cpu消耗型的进程在每个优先级上停留的时间都是一样的。而I/O消耗型的进程会在优先级最高的队列上停留比较长的时间，而且不一定会滑落到很低的优先级队列上去。&lt;br/&gt;
</span><span class='line'>4）不会饥饿，代码比O(1)调度简单，最重要的意义在于证明了完全公平的思想的可行性。&lt;br/&gt;
</span><span class='line'>5）相对与O(1)调度的算法框架还是没有多大的变化，每一次调整优先级的过程都是一次进程的切换过程，细粒度的时间片通常比O(1)调度的时间片短很多。这样不可避免地带来了较大的额外开销，使吞吐量下降的问题。这是SD算法不被采用的主要原因！&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2：RSDL调度器：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对SD算法的改进，其核心思想是“完全公平”，并且没有复杂的动态优先级的调整策略。引进“组时间配额” → tg 每个优先级队列上所有进程可以使用的总时间 ，”优先级时间配额“ → tp, tp不等于进程的时间片，而是小于进程时间片。当进程的tp用完后就降级。与SD算法相类似。当每个队列的tg用完后不管队列中是否有tp没有用完，该队列的所有进程都会被强制降级。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;linux 2.6 O(1)调度的不足：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1：复杂的难以理解的经验公式。&lt;br/&gt;
</span><span class='line'>2：公平吗？&lt;br/&gt;
</span><span class='line'>3：实时性？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;linux 杰出的调度算法 → cfs：&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;按照cfs的作者的说法：”cfs的 80% 的工作可以用一句话来概括：cfs在真实的硬件上模拟了完全理想的多任务处理器。“ 在完全理想的多任务处理器下，每个进程都能够同时获得cpu的执行时间，当系统中有两个进程时，cpu时间被分成两份，每个进程占50%。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1：虚拟运行时间。进程的 vt 与其实际的运行时间成正比，与其权重成反比。权重是由进程优先级来决定的，而优先级又参照nice值的大小。进程优先级权重越高，在实际运行时间相同时，进程的vt就越小。所有的非实时的可运行的进程用红黑树来组织起来，调度时选择的vt最小的那个进程。因为这里的红黑树左子树的键值比右边的小，所以每次调度时都选择树的最左下角的那个进程（实体）就可以了。&lt;br/&gt;
</span><span class='line'>2：完全公平的思想。cfs不再跟踪进程的休眠时间、也不再区分交互式进程，其将所有的进程统一对待，在既定的时间内每个进程都获得了公平的cpu占用时间，这就是cfs里的公平所在！&lt;br/&gt;
</span><span class='line'>3：cfs 引入了模块化、完全公平调度、组调度等一系列特性。虽说是完全公平调度，但进程之间本来就不公平的（有些内核线程用于处理紧急情况），所以这种完全公平是不能够实现的。cfs使用weight 权重来区分进程间不平等的地位，这也是cfs实现公平的依据。权重由优先级来决定，优先级越高，权重越大。但优先级与权重之间的关系并不是简单的线性关系。内核使用一些经验数值来进行转化。
</span><span class='line'>如果有a、b、c 三个进程，权重分别是1、2、3,那么所有的进程的权重和为6, 按照cfs的公平原则来分配，那么a的重要性为1/6, b、c 为2/6, 3/6。这样如果a、b、c 运行一次的总时间为6个时间单位，a占1个，b占2个，c占3个。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;cfs调度器：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;各个部分的数据结构关系图如下：&lt;br/&gt;
</span><span class='line'>&lt;img src="/images/kernel/2015-01-22-9.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;虚拟运行时间&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在完全理想的多任务处理器下，每个进程都能同时获得cpu的时间。但实际上当一个进程占用cpu时，其他的进程必须等待，这样就产生了不公平。所以linux 的cfs调度引入了虚拟运行时间。虚拟运行时间主要由两个因素决定，一个是实际的运行时间，一个是其权重，它随自己的实际运行时间增加而增加，但又不等于实际运行时间。上面提过内核采用红黑树来对虚拟运行时间来排序，这样红黑树最左边的进程（调度实体）就是受到了最不公平待遇的进程，需要作为下一个被调度的进程。
</span><span class='line'>进程的虚拟运行时间由calc_delta_fair()来计算。在每次时钟中断后都会进行更新。公式为：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>if (se.load.weight != NICE_0_LOAD)
</span><span class='line'>    vruntime += delta * NICE_0_LOAD / se.load.weight;
</span><span class='line'>else
</span><span class='line'>    vruntime += delta;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>delta是进程增加的实际的运行时间。 NICE_0_LOAD为nice 0进程的权重。虚拟运行时间与权重成反比，进程的权重越大虚拟运行时间就增加得越慢，位置就越左，越有可能被调度。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对cfs的理解最好就是看源代码了，下面贴出代码（网上有人整理得很好了）：&lt;br/&gt;
</span><span class='line'>各个函数的调用关系图：&lt;br/&gt;
</span><span class='line'>（1）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-01-22-10.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    tick中断
</span><span class='line'>在tick中断处理函数中,会调用scheduler_tick()函数.该函数代码如下:
</span><span class='line'>在tick中断处理函数中，会调用scheduler_tick()函数。该函数代码如下:
</span><span class='line'>void scheduler_tick(void)
</span><span class='line'>{
</span><span class='line'>  /*取得当前CPU*/
</span><span class='line'>int cpu = smp_processor_id();
</span><span class='line'>/*取得当前CPU对应的runqueue*/
</span><span class='line'>    struct rq *rq = cpu_rq(cpu);
</span><span class='line'>/*当前运行的进程*/
</span><span class='line'>    struct task_struct *curr = rq-&gt;curr;
</span><span class='line'>
</span><span class='line'>    sched_clock_tick();
</span><span class='line'>
</span><span class='line'>    spin_lock(&amp;rq-&gt;lock);
</span><span class='line'>    /*更新rq的当前时间戳.即使rq-&gt;clock变为当前时间戳*/
</span><span class='line'>    update_rq_clock(rq);scheduler_tick()
</span><span class='line'>    /*更新rq的负载*/
</span><span class='line'>    update_cpu_load(rq);
</span><span class='line'>    /*调用调度模块的task_tick函数*/
</span><span class='line'>    curr-&gt;sched_class-&gt;task_tick(rq, curr, 0);
</span><span class='line'>    spin_unlock(&amp;rq-&gt;lock);
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_SMP
</span><span class='line'>    rq-&gt;idle_at_tick = idle_cpu(cpu);
</span><span class='line'>    trigger_load_balance(rq, cpu);
</span><span class='line'>#endif
</span><span class='line'>}
</span><span class='line'>我们从上面的代码中可以看到,经过一部份共同处理之后,流程会转入调度模块的task_tick()函数.
</span><span class='line'>对应CFS,它的sched_class结构如下:
</span><span class='line'>static const struct sched_class fair_sched_class = {
</span><span class='line'>    .next = &amp;idle_sched_class,
</span><span class='line'>    .enqueue_task = enqueue_task_fair,
</span><span class='line'>    .dequeue_task = dequeue_task_fair,
</span><span class='line'>    .yield_task = yield_task_fair,
</span><span class='line'>
</span><span class='line'>    .check_preempt_curr = check_preempt_wakeup,
</span><span class='line'>
</span><span class='line'>    .pick_next_task = pick_next_task_fair,
</span><span class='line'>    .put_prev_task = put_prev_task_fair,
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_SMP
</span><span class='line'>    .select_task_rq = select_task_rq_fair,
</span><span class='line'>
</span><span class='line'>    .load_balance = load_balance_fair,
</span><span class='line'>    .move_one_task = move_one_task_fair,
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>    .set_curr_task = set_curr_task_fair,
</span><span class='line'>    .task_tick = task_tick_fair,
</span><span class='line'>    .task_new = task_new_fair,
</span><span class='line'>
</span><span class='line'>    .prio_changed = prio_changed_fair,
</span><span class='line'>    .switched_to = switched_to_fair,
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_FAIR_GROUP_SCHED
</span><span class='line'>    .moved_group = moved_group_fair,
</span><span class='line'>#endif
</span><span class='line'>};
</span><span class='line'>即对应task_tick的处理函数为task_tick_fair().代码如下:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;（2）&lt;br/&gt;
</span><span class='line'>&lt;img src="/images/kernel/2015-01-22-11.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    schedule()的执行过程
</span><span class='line'>当进程需要被抢占或者是进程主运让出处理器,则会调用schedule()函数.为了减小篇幅,在这里就不分析schedule()函数代码.只列出在该函数中调用模块的主要函数.如下示:
</span><span class='line'>Schedule()----&gt;
</span><span class='line'>sched_class-&gt;put_prev_task(rq,prev)----&gt;
</span><span class='line'>sched_class-&gt;pick_next_task()
</span><span class='line'>
</span><span class='line'>对应到CFS中,put_prev_task()函数为put_prev_task_fair(),该操作就是将进程放回队列.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;（3）&lt;br/&gt;
</span><span class='line'>&lt;img src="/images/kernel/2015-01-22-12.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    新进程的调度过程
</span><span class='line'>在创建新进程的时候,在do_fork()中有如下过程:
</span><span class='line'>long do_fork(unsigned long clone_flags,
</span><span class='line'>          unsigned long stack_start,
</span><span class='line'>          struct pt_regs *regs,
</span><span class='line'>          unsigned long stack_size,
</span><span class='line'>          int __user *parent_tidptr,
</span><span class='line'>          int __user *child_tidptr)
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>if (unlikely(clone_flags &amp; CLONE_STOPPED)) {
</span><span class='line'>            /*
</span><span class='line'>             * We'll start up with an immediate SIGSTOP.
</span><span class='line'>             */
</span><span class='line'>            sigaddset(&amp;p-&gt;pending.signal, SIGSTOP);
</span><span class='line'>            set_tsk_thread_flag(p, TIF_SIGPENDING);
</span><span class='line'>            __set_task_state(p, TASK_STOPPED);
</span><span class='line'>        } else {
</span><span class='line'>            wake_up_new_task(p, clone_flags);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>｝
</span><span class='line'>即在末带CLONE_STOPPED标志创建进程时,就会对新进程调用wake_up_new_task().
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[squid--代理]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/01/15/tools-squid/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-01-15T16:05:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/01/15/tools-squid&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;yum install squid
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;centos 5&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ERROR:</span></code></pre></td></tr></table></div></figure>
    While trying to retrieve the URL: <a href="http://192.168.34.80/">http://192.168.34.80/</a></p>

<pre><code>The following error was encountered:

Unable to forward this request at this time.
This request could not be forwarded to the origin server or to any parent caches. The most likely cause for this error is that:

The cache administrator does not allow this cache to make direct connections to origin servers, and
All configured parent caches are currently unreachable.
Your cache administrator is root. 
</code></pre>

<pre><code>
将 /etc/squid/squid.conf 中
</code></pre>

<pre><code>never_direct allow all
</code></pre>

<pre><code>改成
</code></pre>

<pre><code>always_direct allow all
</code></pre>

<p>```
再去掉cache_peer</p>
]]></content>
  </entry>
  
</feed>
