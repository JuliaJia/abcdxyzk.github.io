<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system~mysql | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system~mysql/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-28T22:31:01+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[导入数据库、导出表]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/04/17/mysql-dump-data/"/>
    <updated>2012-04-17T18:40:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/04/17/mysql-dump-data</id>
    <content type="html"><![CDATA[<h4>导入数据库</h4>

<h5>常用source 号令</h5>

<p>步入mysql数据库节制台，<br/>
如mysql -u root -p<br/>
mysql>use 数据库<br/>
然后施用source号令，后面参数为脚本文件（如这里用到的.sql）
<code>
mysql&gt;source /home/abcdxyzk/chai.sql
</code></p>

<h4>MySQL 导出表</h4>

<pre><code>mysqldump -uroot -p123456 test &gt; /home/my.sql
</code></pre>

<p>说下上面参数<br/>
数据库用户名：root<br/>
密码 ：123456<br/>
数据库名：test<br/>
/home/my.sql 为导出文件地址，</p>

<p>这里 是linux系统 所以为/home/my.sql如果是windows替换 它为：e:/my.sql 注意空格奥。。</p>

<h5>导出单个数据表结构和数据</h5>

<pre><code>导出整个数据库结构（不包含数据）
mysqldump -h localhost -uroot -p123456 database table &gt; dump.sql

导出单个数据表结构（不包含数据）
mysqldump -h localhost -uroot -p123456 -d database &gt; dump.sql

mysqldump -h localhost -uroot -p123456 -d database table &gt; dump.sql
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[on DUPLICATE KEY UPDATE]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/04/12/mysql-duplicate/"/>
    <updated>2012-04-12T14:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/04/12/mysql-duplicate</id>
    <content type="html"><![CDATA[<p>MySQL 当记录不存在时插入，当记录存在时更新
网上基本有三种解决方法。</p>

<h4>第一种：</h4>

<h5>示例一：插入多条记录</h5>

<p>假设有一个主键为 client_id 的 clients 表，可以使用下面的语句：
<code>
INSERT INTO clients
(client_id,client_name,client_type)
SELECTsupplier_id,supplier_name,'advertising'
FROMsuppliers
WHEREnotexists(select*fromclients
whereclients.client_id=suppliers.supplier_id);
</code></p>

<h5>示例一：插入单条记录</h5>

<pre><code>INSERTINTOclients
(client_id,client_name,client_type)
SELECT10345,'IBM','advertising'
FROMdual
WHEREnotexists(select*fromclients
whereclients.client_id=10345);
</code></pre>

<p>使用 dual 做表名可以让你在 select 语句后面直接跟上要插入字段的值，即使这些值还不存在当前表中。</p>

<h4>第二种：</h4>

<pre><code>INSERT 中ON DUPLICATE KEY UPDATE的使用
</code></pre>

<p>如果您指定了ON DUPLICATE KEY UPDATE，并且插入行后会导致在一个UNIQUE或PRIMARY KEY中出现重复值，则执行旧行UPDATE。例如，如果列a被定义为UNIQUE，并且包含值1，则以下两个语句具有相同的效果：
<code>
mysql&gt;INSERT INTO table (a,b,c) VALUES (1,2,3)      -&gt;ON DUPLICATE KEY UPDATE c=c+1;mysql&gt;UPDATE table SET c=c+1 WHERE a=1;
</code>
如果行作为新记录被插入，则受影响行的值为1；如果原有的记录被更新，则受影响行的值为2。</p>

<p>注释：如果列b也是唯一列，则INSERT与此UPDATE语句相当：
<code>
mysql&gt;UPDATE table SET c=c+1 WHERE a=1 OR b=2 LIMIT 1;
</code>
如果a=1 OR b=2与多个行向匹配，则只有一个行被更新。通常，您应该尽量避免对带有多个唯一关键字的表使用ON DUPLICATE KEY子句。</p>

<p>您可以在UPDATE子句中使用VALUES(col_name)从INSERT&hellip;UPDATE语句的INSERT部分引用列值。换句话说，如果没有发生重复关键字冲突，则UPDATE子句中的VALUES(col_name)可以引用被插入的col_name的值。本函数特别适用于多行插入。VALUES()函数只在INSERT&hellip;UPDATE语句中有意义，其它时候会返回NULL。</p>

<p>示例：
<code>
mysql&gt;INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)      -&gt;ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);
</code></p>

<p>本语句与以下两个语句作用相同：
<code>
mysql&gt;INSERT INTO table (a,b,c) VALUES (1,2,3)      -&gt;ON DUPLICATE KEY UPDATE c=3;mysql&gt;INSERT INTO table (a,b,c) VALUES (4,5,6)      -&gt;ON DUPLICATE KEY UPDATE c=9;
</code>
当您使用ON DUPLICATE KEY UPDATE时，DELAYED选项被忽略。</p>

<h4>第三种：</h4>

<h5>REPLACE语句</h5>

<p>我们在使用时可能会经常遇到这种情况。如果一个表在一个字段上建立了唯一索引，当我们再向这个表中使用已经存在的键值插入一条记录，那将会抛出一个主键冲突的错误。当然，我们可能想用新记录的值来覆盖原来的记录值。如果使用传统的做法，必须先使用DELETE语句删除原先的记录，然后再使用INSERT插入新的记录。而在MySQL中为我们提供了一种新的解决方案，这就是REPLACE语句。使用REPLACE插入一条记录时，如果不重复，REPLACE就和INSERT的功能一样，如果有重复记录，REPLACE就使用新记录的值来替换原来的记录值。</p>

<p>使用REPLACE的最大好处就是可以将DELETE和INSERT合二为一，形成一个原子操作。这样就可以不必考虑在同时使用DELETE和INSERT时添加事务等复杂操作了。</p>

<p>在使用REPLACE时，表中必须有唯一索引，而且这个索引所在的字段不能允许空值，否则REPLACE就和INSERT完全一样的。</p>

<p>在执行REPLACE后，系统返回了所影响的行数，如果返回1，说明在表中并没有重复的记录，如果返回2，说明有一条重复记录，系统自动先调用了DELETE删除这条记录，然后再记录用INSERT来插入这条记录。如果返回的值大于2，那说明有多个唯一索引，有多条记录被删除和插入。</p>

<p>REPLACE的语法和INSERT非常的相似，如下面的REPLACE语句是插入或更新一条记录。
<code>
REPLACE INTO users (id,name,age) VALUES(123, '赵本山', 50);
</code>
插入多条记录：
<code>
REPLACE INTO users(id, name, age)
VALUES(123, '赵本山', 50), (134,'Mary',15);
</code>
REPLACE也可以使用SET语句
<code>
REPLACE INTO users SET id = 123, name = '赵本山', age = 50;
</code>
上面曾提到REPLACE可能影响3条以上的记录，这是因为在表中有超过一个的唯一索引。在这种情况下，REPLACE将考虑每一个唯一索引，并对每一个索引对应的重复记录都删除，然后插入这条新记录。假设有一个table1表，有3个字段a, b, c。它们都有一个唯一索引。
<code>
CREATE TABLE table1(a INT NOT NULL UNIQUE,b INT NOT NULL UNIQUE,c INT NOT NULL UNIQUE);
</code>
假设table1中已经有了3条记录
<code>
a b c
1 1 1
2 2 2
3 3 3
</code>
下面我们使用REPLACE语句向table1中插入一条记录。
<code>
REPLACE INTO table1(a, b, c) VALUES(1,2,3);
</code>
返回的结果如下
<code>
Query OK, 4 rows affected (0.00 sec)
</code>
在table1中的记录如下
<code>
a b c
1 2 3
</code>
我们可以看到，REPLACE将原先的3条记录都删除了，然后将（1, 2, 3）插入。总结：虽然没有具体测试，感觉第一种最费资源了（只是感觉），不过你要是没有主键的话也只能用他了。第二种和第三种的区别是：1)insert是先尝试插入，若主键存在则更新。REPLACE是先尝试插入，若主键存在则删除原纪录再插入。2)如果有多个唯一关键字发生冲突(不同关键字的冲突发生在不同记录),比如现在有2个字段2条记录冲突了(没条记录冲突一个字段)，则insert是选择排序后在前面的一条进行更新，REPLACE是删除那两条记录，然后插入新记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 触发器]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/04/10/mysql-trigger/"/>
    <updated>2012-04-10T17:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/04/10/mysql-trigger</id>
    <content type="html"><![CDATA[<h4>一.语法：</h4>

<p>Create trigger 触发器名 before|after 触发事件
     On 表名 for each row 执行语句
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; create trigger books_trig1 beforeinsert
</span><span class='line'>   -&gt; on users for each row
</span><span class='line'>   -&gt; insert into trigger_time values(now());
</span><span class='line'>Query OK, 0 rows affected (0.05 sec)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; desc users;
</span><span class='line'>+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;+&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;-+
</span><span class='line'>|Field    |Type       | Null | Key | Default |Extra         |
</span><span class='line'>+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;+&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;-+
</span><span class='line'>| user_id   |int(10)    | NO   | PRI |NULL    |auto_increment |
</span><span class='line'>| user_name | varchar(50) | NO  |    |        |               |
</span><span class='line'>| user_pwd  | varchar(20) |NO  |    |        |               |
</span><span class='line'>|email    | varchar(50) | NO  |    |        |               |
</span><span class='line'>+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;+&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;-+
</span><span class='line'>4 rows in set (0.02 sec)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; insert into usersvalues(null,&lsquo;helloc&rsquo;,&lsquo;hello&rsquo;,&lsquo;&lt;a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#58;&#x68;&#101;&#108;&#108;&#x6f;&#x40;&#x71;&#x71;&#x2e;&#99;&#111;&#109;"&gt;&#104;&#x65;&#x6c;&#x6c;&#111;&#x40;&#x71;&#x71;&#x2e;&#99;&#111;&#109;&lt;/a&gt;&rsquo;);
</span><span class='line'>Query OK, 1 row affected (0.05 sec)
</span><span class='line'>mysql&gt; select * from users;
</span><span class='line'>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&ndash;+
</span><span class='line'>| user_id | user_name | user_pwd |email       |
</span><span class='line'>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&ndash;+
</span><span class='line'>|     10 | helloc    |hello    | |
</span><span class='line'>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&ndash;+
</span><span class='line'>1 row in set (0.00 sec)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; select * from trigger_time;
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>|datetimes          |
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>| 2011-10-29 16:27:33 |
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>1 row in set (0.00 sec)</span></code></pre></td></tr></table></div></figure></p>

<h4>二.创建有多个执行语句的触发器:</h4>

<p>语法：Create trigger 触发器名 before|after 触发事件<br/>
     On 表名 for each row<br/>
     Begin<br/>
         执行语句列表<br/>
     End<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; delimiter&amp;&amp;
</span><span class='line'>mysql&gt; create trigger books_trig2 after delete
</span><span class='line'>   -&gt; on users for each row
</span><span class='line'>   -&gt; begin
</span><span class='line'>   -&gt;  insert into trigger_timevalues(now());
</span><span class='line'>   -&gt;  insert into trigger_timevalues(now());
</span><span class='line'>   -&gt; end&amp;&amp;
</span><span class='line'>Query OK, 0 rows affected (0.01 sec)
</span><span class='line'>mysql&gt; delimiter ;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; delete from users
</span><span class='line'>   -&gt; where user_id = 10;
</span><span class='line'>Query OK, 1 row affected (0.06 sec)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; select * from users;
</span><span class='line'>Empty set (0.00 sec)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; select * from trigger_time;
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>|datetimes          |
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>| 2011-10-29 16:27:33 |
</span><span class='line'>| 2011-10-29 16:41:16 |
</span><span class='line'>| 2011-10-29 16:41:16 |
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>3 rows in set (0.00 sec)</span></code></pre></td></tr></table></div></figure></p>

<h4>三.查看触发器：</h4>

<p>语法：Show Triggers;</p>

<pre><code>mysql&gt; show triggers\G
*************************** 1. row***************************
  Trigger: books_trig1
    Event:INSERT
    Table:users
Statement: insert into trigger_time values(now())
   Timing: BEFORE
  Created: NULL
 sql_mode:NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
  Definer:
*************************** 2. row***************************
  Trigger: books_trig2
    Event:DELETE
    Table:users
Statement: begin
       insert into trigger_time values(now());
       insert into trigger_time values(now());
end
   Timing: AFTER
  Created: NULL
 sql_mode:NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
  Definer:
2 rows in set (0.00 sec)
</code></pre>

<p>也可在triggers表中查看触发器信息：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; select * frominformation_schema.triggers\G&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  --where trigger_name=‘触发器名';
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt; 1. row&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;
</span><span class='line'>          TRIGGER_CATALOG: NULL
</span><span class='line'>           TRIGGER_SCHEMA: books
</span><span class='line'>             TRIGGER_NAME: books_trig1
</span><span class='line'>       EVENT_MANIPULATION: INSERT
</span><span class='line'>     EVENT_OBJECT_CATALOG: NULL
</span><span class='line'>      EVENT_OBJECT_SCHEMA: books
</span><span class='line'>       EVENT_OBJECT_TABLE: users
</span><span class='line'>             ACTION_ORDER: 0
</span><span class='line'>         ACTION_CONDITION: NULL
</span><span class='line'>         ACTION_STATEMENT: insert into trigger_time values(now())
</span><span class='line'>       ACTION_ORIENTATION: ROW
</span><span class='line'>            ACTION_TIMING: BEFORE
</span><span class='line'>ACTION_REFERENCE_OLD_TABLE: NULL
</span><span class='line'>ACTION_REFERENCE_NEW_TABLE: NULL
</span><span class='line'>  ACTION_REFERENCE_OLD_ROW: OLD
</span><span class='line'>  ACTION_REFERENCE_NEW_ROW: NEW
</span><span class='line'>                  CREATED: NULL
</span><span class='line'>                 SQL_MODE: NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
</span><span class='line'>                  DEFINER:
</span><span class='line'>&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt; 2. row&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;
</span><span class='line'>          TRIGGER_CATALOG: NULL
</span><span class='line'>           TRIGGER_SCHEMA: books
</span><span class='line'>             TRIGGER_NAME: books_trig2
</span><span class='line'>       EVENT_MANIPULATION: DELETE
</span><span class='line'>     EVENT_OBJECT_CATALOG: NULL
</span><span class='line'>      EVENT_OBJECT_SCHEMA: books
</span><span class='line'>       EVENT_OBJECT_TABLE: users
</span><span class='line'>             ACTION_ORDER: 0
</span><span class='line'>         ACTION_CONDITION: NULL
</span><span class='line'>         ACTION_STATEMENT: begin
</span><span class='line'>       insert into trigger_time values(now());
</span><span class='line'>       insert into trigger_time values(now());
</span><span class='line'>end
</span><span class='line'>       ACTION_ORIENTATION: ROW
</span><span class='line'>            ACTION_TIMING: AFTER
</span><span class='line'>ACTION_REFERENCE_OLD_TABLE: NULL
</span><span class='line'>ACTION_REFERENCE_NEW_TABLE: NULL
</span><span class='line'>  ACTION_REFERENCE_OLD_ROW: OLD
</span><span class='line'>  ACTION_REFERENCE_NEW_ROW: NEW
</span><span class='line'>                  CREATED: NULL
</span><span class='line'>                 SQL_MODE: NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
</span><span class='line'>                  DEFINER:
</span><span class='line'>2 rows in set (1.61 sec)</span></code></pre></td></tr></table></div></figure></p>

<p>四.触发器的作用：
  在MySQL中，触发器执行的顺序是Before触发器、表操作（insert、update和delete）和After触发器。</p>

<p>五.删除触发器：
  DROP TRIGGER触发器名;</p>

<p>例如
<code>
delimiter |
create trigger submit_update
after update
on submit
for each row
begin
if OLD.status&lt;&gt;40 AND NEW.status=40 then
    update contestinfo set accept = accept+1 where contestinfo.contestid=NEW.contestid and contestinfo.pid=NEW.pid;
elseif OLD.status=40 AND NEW.status&lt;&gt;40 then
    update contestinfo set accept = accept-1 where contestinfo.contestid=NEW.contestid and contestinfo.pid=NEW.pid;
end if;
end
|
delimiter ;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下安装MySQL获得 mysql.h]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/04/08/mysql-head-file/"/>
    <updated>2012-04-08T13:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/04/08/mysql-head-file</id>
    <content type="html"><![CDATA[<h4>先安装MySQL</h4>

<pre><code>sudo apt-get install mysql-server mysql-client
</code></pre>

<h4>再装开发包</h4>

<pre><code>sudo apt-get install libmysqlclient15-dev
</code></pre>

<h4>安装完以后，C代码里添加头文件</h4>

<pre><code>#include &lt;mysql.h&gt;   还是 #include&lt;mysql/mysql.h&gt;
</code></pre>

<h4>编译方法：</h4>

<pre><code>gcc $(mysql_config --cflags) xxx.c -o xxx $(mysql_config --libs)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 最常用命令]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/05/23/mysql-command/"/>
    <updated>2011-05-23T21:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/05/23/mysql-command</id>
    <content type="html"><![CDATA[<p>登录到mysql中，然后在mysql的提示符下运行命令，每个命令以分号(;)结束。</p>

<h5>一：mysql服务的启动和停止</h5>

<pre><code>    sudo /etc/init.d/mysql stop  // net stop mysql
    sudo /etc/init.d/mysql start     // net start mysql
</code></pre>

<h5>二：登陆mysql</h5>

<p>  语法如下： mysql -u用户名 -p用户密码<br/>
命令 mysql -uroot -p ， 回车后提示你输入密码，输入12345，然后回车即可进入到mysql中了，mysql的提示符是：<br/>
mysql><br/>
注意，如果是连接到另外的机器上，则需要加入一个参数-h机器IP</p>

<h5>三：增加新用户</h5>

<p>  格式：grant 权限 on 数据库.* to 用户名@登录主机 identified by &ldquo;密码&rdquo;
如，增加一个用户user1密码为password1，让其可以在本机上登录， 并对所有数据库有所有的权限。首先用以root用户连入mysql，然后键入以下命令：
<code>
    grant all privileges on *.* to user1@localhost Identified by "password1";
</code>
  如，增加一个用户user1密码为password1，让其可以在本机上登录， 并对abc数据库有查询、插入、修改、删除的权限。首先用以root用户连入mysql，然后键入以下命令：
<code>
    grant select,insert,update,delete on abc.* to user1@localhost Identified by "password1";
</code>
如果希望该用户能够在任何机器上登陆mysql，则将localhost改为"%&ldquo;。
如果你不想user1有密码，可以再打一个命令将密码去掉。
<code>
    grant select,insert,update,delete on abc.* to user1@localhost dentified by "";
</code></p>

<h5>四：显示数据库列表。</h5>

<pre><code>    show databases;  
</code></pre>

<p>缺省数据库：mysql。 mysql库存放着mysql的系统和用户权限信息，我们改密码和新增用户，实际上就是对这个库进行操作。</p>

<h5>五：建库与删库：</h5>

<pre><code>    create database 库名;
    drop database 库名;
</code></pre>

<h5>六：显示库中的数据表：</h5>

<pre><code>    use abc;
    show tables;
</code></pre>

<h5>七：显示数据表的结构：</h5>

<pre><code>    describe 表名;
</code></pre>

<h5>八：建表与删表：</h5>

<pre><code>    use abc;
    create table 表名(字段列表);
    drop table 表名;
    如：create table imformation(name varchar(11), age int(5));
</code></pre>

<h5>九：清空表中记录：</h5>

<pre><code>    delete from 表名;
</code></pre>

<h5>十：显示表中的记录：</h5>

<pre><code>    select * from 表名;
</code></pre>

<h5>十一：增加一个字段：</h5>

<pre><code>    alter table table_name add column &lt;字段名&gt;&lt;字段选项&gt;
    alter table imformation add phone varchar(5);
    觉得5太小，修改为15
    修改字段： 
    alter table table_name change &lt;旧字段名&gt; &lt;新字段名&gt;&lt;选项&gt;
    alter table imformation change phone phone varchar(15);
    增加几个字段:
    alter table imformation add authors varchar(100),add category varchar(20);
</code></pre>

<h5>十二：删除一个字段：</h5>

<pre><code>    alter table table_name drop column &lt;字段名&gt;
    alter table imformation drop authors;
</code></pre>

<h5>十三：插入记录：</h5>

<pre><code>    insert into 表名称（字段名1，字段名2…） values （字段1的值，字段2 的值，…）;
    insert into imformation(name,phone) values('a1','123456789');
</code></pre>

<h5>十四：修改记录：</h5>

<pre><code>    update imformation set column_name1="" where column_name2="";
    update imformation set phone="987654321" where name="a1";
</code></pre>

<h5>十五：删除记录：</h5>

<pre><code>    delete from 表名称 where 条件表达式;
    delete from imformation where name="a2";
</code></pre>

<h5>十六：查看建表信息：</h5>

<pre><code>    show create table imformation\G;  大写G
</code></pre>

<h5>十七：某个字段不同值的数目：</h5>

<pre><code>    SELECT tid,count(tid) as tnum FROM TABLE group by tid order by tnum DESC;   DESC降序，ASC升序。
</code></pre>

<h5>十八：不同id的status=0的数目：</h5>

<pre><code>    SELECT id,count(*) AS tnum FROM TABLE WHERE id IN (id1, id2, id3, ...) AND status=0 GROUP BY id;
</code></pre>

<h5>十九：替换函数</h5>

<pre><code>    UPDATE `table_name` SET `field_name` = replace (`field_name`,'from_str','to_str') WHERE `field_name` LIKE '%from_str%'
</code></pre>

<h5>二十：如何清除输入过的mysql命令</h5>

<p>清空用户目录下的.mysql_history</p>
]]></content>
  </entry>
  
</feed>
