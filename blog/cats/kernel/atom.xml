<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-28T22:31:01+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[offsetof宏 container_of宏]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/09/15/kernel-offset-container_of/"/>
    <updated>2014-09-15T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/09/15/kernel-offset-container_of</id>
    <content type="html"><![CDATA[<p>Linux内核中，用两个非常巧妙地宏实现了，一个是offsetof宏，另一个是container_of宏，下面讲解一下这两个宏。</p>

<h4>1.  offsetof宏</h4>

<h5>【定义】：</h5>

<pre><code>#define offsetof(TYPE, MEMBER) ((size_t) &amp; ((TYPE *)0)-&gt;MEMBER )
</code></pre>

<h5>【功能】： 获得一个结构体变量成员在此结构体中的偏移量。</h5>

<h5>【例子】：</h5>

<pre><code class="">    struct A 
        { 
        int x ; 
        int y; 
        int z; 
    }; 

    void main() 
    { 
        printf("the offset of z is %d",offsetof( struct A, z )  ); 
    } 
</code></pre>

<p>// 输出结果为 8</p>

<h5>【分析】：</h5>

<p>该宏，TYPE为结构体类型，MEMBER 为结构体内的变量名。<br/>
(TYPE <em>)0) 是欺骗编译器说有一个指向结构TYPE 的指针，其地址值0 <br/>
(TYPE </em>)0)->MEMBER 是要取得结构体TYPE中成员变量MEMBER的地址. 因为基址为0，所以，这时MEMBER的地址当然就是MEMBER在TYPE中的偏移了。</p>

<h4>2. container_of宏（即实现了题目中的功能）</h4>

<h5>【定义】：</h5>

<pre><code>#define container_of(ptr, type, member)   ({const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr); (type *)( (char *)__mptr - offsetof(type,member) );})
</code></pre>

<h5>【功能】：</h5>

<p>从结构体（type）某成员变量（member）指针（ptr）来求出该结构体（type）的首指针。</p>

<h5>【例子】：</h5>

<pre><code>    struct A 
    { 
        int x ; 
        int y; 
        int z; 
    }; 

    struct A myTest; 

    int *pz = &amp;myTest.z; 

    struct A* getHeaderPtr( int *pz ) 
    { 
        return container_of( pz , struct A, z ); 
    } 
</code></pre>

<h5>【分析】：</h5>

<p>（1） typeof( ( (type <em>)0)->member )为取出member成员的变量类型。<br/>
（2） 定义__mptr指针ptr为指向该成员变量的指针(即指向ptr所指向的变量处)<br/>
（3） (char </em>)__mptr - offsetof(type,member)) 用该成员变量的实际地址减去该变量在结构体中的偏移，来求出结构体起始地址。<br/>
（4） ({ })这个扩展返回程序块中最后一个表达式的值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux内核模块签名]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/21/kernel-module-signed/"/>
    <updated>2014-08-21T18:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/21/kernel-module-signed</id>
    <content type="html"><![CDATA[<h4>linux内核模块签名 Documentation/module_signing.txt</h4>

<p>内核在模块模块加载时使用加密签名验证，校验签名是否与已编译的内核公钥匹配。目前只支持RSA X.509验证。<br/>
签名验证在通过CONFIG_MODULE_SIG使能。打开签名同时还会强制做模块ELF元数据检查，然后再做签名验证。</p>

<h4>公钥生成</h4>

<p>内核编译时可以指定一系列的公钥。x509.genkey文件用来生成X509密钥。如果没有该文件，系统会自动提供一个默认的配置。Makefile会根据x509.genkey规则在内核编译根目录生成默认配置，用户可以手动更改该文件。</p>

<p>由此在内核编译过程中分别生成私钥和公钥文件分别为./signing_key.priv和./signing_key.x509。</p>

<p>默认配置是使用/dev/random生成的。如果/dev/random没有足够数据，在后台运行以下命令可以生成更多的数据：rngd -r /dev/urandom。</p>

<h4>模块签名</h4>

<p>设置了CONFIG_MODULE_SIG_ALL，所有模块将会自动添加签名。如果没有设置，需要手动添加：<br/>
scripts/sign-file <hash algo> $(MODSECKEY) $(MODPUBKEY) modules.ko<br/>
哈希算法必须为sha1, sha224, sha256, sha384, sha512。对应的加密算法必须是使能的。CONFIG_MODULE_SIG_HASH设置sign-file使用的默认算法。</p>

<p><code>MODSECKEY=&lt;secret-key-ring-path&gt;</code><br/>
加密私钥文件，默认是./signing_key.priv</p>

<p><code>MODPUBKEY=&lt;public-key-ring-path&gt;</code><br/>
加密公钥文件，默认为./signing_key.x509</p>

<h6>签名模块裁减</h6>

<p>签名模块裁减就是去除签名部分，在重新签名之前需要先裁减之前的签名。在打包内核模块发布时，并没有自动裁减。</p>

<h6>加载签名模块</h6>

<p>模块是通过insmod来加载的，模块加载时通过检查模块的签名部分来验证。</p>

<h6>不合法签名和没有签名的模块</h6>

<p>如果设 置了CONFIG_MODULE_SIG_FORCE或者在内核启动命令行设置了module.sig_enforce，内核将只加载带有公钥的合法签名 模块。如果都没有设置则会加载没有签名的模块。如果内核有密钥，但模块没有提供合法的签名就会被拒绝加载。下表说明了各种情况：</p>

<pre><code>模块状态        许可模式    强制检查
未签名           通过      EKEYREJECTED
签名，没有公钥       ENOKEY      ENOKEY
签名，公钥     通过      通过
非法签名，公钥       EKEYREJECTED    EKEYREJECTED
签名，过期密钥       EKEYEXPIRED EKEYEXPIRED
破坏的签名     EBADMSG     EBADMSG
破坏的ELF        ENOEXEC     ENOEXEC
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 即时修改 启动级别 启动参数 磁盘满无法进系统 忘记密码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/14/kernel-init-edit-args/"/>
    <updated>2014-08-14T17:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/14/kernel-init-edit-args</id>
    <content type="html"><![CDATA[<h4>1、修改启动级别错误配置的方法</h4>

<p>如果你不小心把级别设成0或6，用下边的方法补救：<br/>
1. 启动系统后，在倒计时结束前按任意键，进入grub引导界面 <br/>
2. 在grub引导界面的输入‘e’，进入下一级，高亮第二行，再输入‘e’<br/>
3. 在最后输入 1[单用户模式] 按回车回到上一级（单用户模式启动不会去读取/etc/inittab）
4. 输入‘b’重启系统</p>

<p>也可以改其他启动参数
进行紧急引导最简单的方法是：<br/>
把 init=/bin/bash 或 init=/bin/sh 选项传递给内核</p>

<h5>2、磁盘满导致无法进入系统</h5>

<p>删除一些文件后重启<br/>
没法删除 说文件系统是只读的 ，重新mount 你的磁盘系统为可读写的。<br/>
<code>
mount -o remount,rw  /
</code></p>

<h5>3、忘记密码</h5>

<p>passwd user</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log_buf(ring buffer)(syslog)(printk)]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/08/kernel-syslog/"/>
    <updated>2014-08-08T09:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/08/kernel-syslog</id>
    <content type="html"><![CDATA[<h5>printk 的输出都是保存在log_buf里的</h5>

<p>How to read it the ring buffer? Here is a beautiful illustration from IBM Developerworks
dmesg would be your first resort! How does dmesg accomplish its task? By a call to syslog()! How does syslog do its job? Through the system call interface which in turn call do_syslog(). do_syslog() does the finishing act like this</p>

<p><img src="/images/kernel/2014-08-08.gif" alt="alt" /></p>

<p>// 模仿kernel/printk.c中do_syslog，在module 中读printk输出的最后4k
```
        char <em><em>log_buf;
        int </em>log_buf_len, </em>log_start, *log_end;</p>

<pre><code>    int MASK;
    int end, len;
    unsigned i, j, limit, count;
    char c;
    int ret;


    log_buf = (char**) 0xffffffff803270e0;
    log_buf_len = (int*)0xffffffff803270d8;
    log_start = (int*) 0xffffffff804eabd0;
    log_end = (int*) 0xffffffff804eabe0;

    i = 0;
    end = *log_end;
    len = *log_buf_len;
    MASK = len - 1;

    count = L;
    if (count &gt; len) count = len;
    limit = end;

    for (i=0;i&lt;count;i++) {
            j = limit-1-i;
            c = *(*log_buf + (j&amp;MASK));
            if (c == '\0') c = '\n';
            buf[count-1-i] = c;
    }
</code></pre>

<p>// 输出</p>

<pre><code>    file = filp_open(file_path, O_RDWR|O_CREAT|O_APPEND, 0777);
    if(IS_ERR(file)) {
            printk("Open file %s failed..\n", file_path);
            return 0;
    }
    old_fs = get_fs();
    set_fs(get_ds());
    ret = file-&gt;f_op-&gt;write(file, buf, i, &amp;file-&gt;f_pos);
    file-&gt;f_op-&gt;fsync(file, file-&gt;f_dentry, 0);
    set_fs(old_fs);
    filp_close(file, NULL);
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用kexec快速切换内核]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/04/23/kernel-kexec-setup/"/>
    <updated>2014-04-23T15:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/04/23/kernel-kexec-setup</id>
    <content type="html"><![CDATA[<p>kexec是一个用于在当前系统下快速切换到另一个内核的一种办法，它采用了一定的机制略过了硬件的初始化，所以切换速度会很快。</p>

<p>自2.6.13以后，Linux内核就已经自置了kexec，而Debian采用的内核已经是2.6.26，而且默认就支持kexec，所以在Debian下我们只要安装kexec-tools就行了。</p>

<pre><code>$ yum install kexec-tools
$ sudo apt-get install kexec-tools
</code></pre>

<p>安装好以后，就可以开始加载其他的内核了。<br/>
先看看我有哪些内核可以用：
<code>
$ ls /boot/vmlinuz-2.6.26-1-*
/boot/vmlinuz-2.6.26-1-amd64         
/boot/vmlinuz-2.6.26-1-vserver-amd64
</code>
好多好多，再看看当前的内核
<code>
$ uname -r
2.6.26-1-vserver-amd64
</code>
好了，现在我打算切换到2.6.26-1-amd64去：<br/>
记得，需要root权限的
<code>
$ sudo -s
</code>
先要用kexec加载它，先看看该追加哪些参数
<code>
$ cat /boot/grub/menu.lst | grep 2.6.26-1-amd64
title Debian GNU/Linux, kernel 2.6.26-1-amd64
kernel /vmlinuz-2.6.26-1-amd64 root=/dev/sda1 ro
initrd /initrd.img-2.6.26-1-amd64
</code>
找到了，对照上面开始用kexec加载了
<code>
$ kexec -l /boot/vmlinuz-2.6.26-1-amd64 --initrd /boot/initrd.img-2.6.26-1-amd64 --append="root=/dev/sda1 ro"
</code>
加载以后并不直接执行哦，所以我们要执行一下才会切换
<code>
$ kexec -e
</code>
不要紧张，等一下下就好了，起来以后还会提示登录的<br/>
看看我的效果：<br/>
<code>
$ uname -r
2.6.26-1-amd64
</code>
切换到我想要的内核了</p>
]]></content>
  </entry>
  
</feed>
