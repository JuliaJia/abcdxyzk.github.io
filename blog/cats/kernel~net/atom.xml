<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~net | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~net/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-06-01T15:48:01+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TCP三次握手源码详解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/06/01/kernel-net-shark-hand/"/>
    <updated>2015-06-01T14:24:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/06/01/kernel-net-shark-hand</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/qy532846454/article/details/7882819">http://blog.csdn.net/qy532846454/article/details/7882819</a></p>

<p><a href="http://m.bianceng.cn/OS/Linux/201301/35179_6.htm">http://m.bianceng.cn/OS/Linux/201301/35179_6.htm</a></p>

<p>内核：2.6.34</p>

<p>TCP是应用最广泛的传输层协议，其提供了面向连接的、可靠的字节流服务，但也正是因为这些特性，使得TCP较之UDP异常复杂，还是分两部分[创建与使用]来进行分析。这篇主要包括TCP的创建及三次握手的过程。</p>

<p>编程时一般用如下语句创建TCP Socket：</p>

<pre><code>    socket(AF_INET, SOCK_DGRAM, IPPROTO_TCP)  
</code></pre>

<p>由此开始分析，调用接口[net/socket.c]: SYSCALL_DEFINE3(socket)</p>

<p>其中执行两步关键操作：sock_create()与sock_map_fd()</p>

<pre><code>    retval = sock_create(family, type, protocol, &amp;sock);  
    if (retval &lt; 0)  
        goto out;  
    retval = sock_map_fd(sock, flags &amp; (O_CLOEXEC | O_NONBLOCK));  
    if (retval &lt; 0)  
        goto out_release;  
</code></pre>

<p>  sock_create()用于创建socket，sock_map_fd()将之映射到文件描述符，使socket能通过fd进行访问，着重分析sock_create()的创建过程。</p>

<pre><code>    sock_create() -&gt; __sock_create()
</code></pre>

<p>  从__sock_create()代码看到创建包含两步：sock_alloc()和pf->create()。sock_alloc()分配了sock内存空间并初始化inode；pf->create()初始化了sk。</p>

<pre><code>    sock = sock_alloc();  
    sock-&gt;type = type;  
    ……  
    pf = rcu_dereference(net_families[family]);  
    ……  
    pf-&gt;create(net, sock, protocol, kern);  
</code></pre>

<h4>sock_alloc()</h4>

<p>  分配空间，通过new_inode()分配了节点(包括socket)，然后通过SOCKET_I宏获得sock，实际上inode和sock是在new_inode()中一起分配的，结构体叫作sock_alloc。</p>

<pre><code>    inode = new_inode(sock_mnt-&gt;mnt_sb);  
    sock = SOCKET_I(inode);  
</code></pre>

<p>  设置inode的参数，并返回sock。</p>

<pre><code>    inode-&gt;i_mode = S_IFSOCK | S_IRWXUGO;  
    inode-&gt;i_uid = current_fsuid();  
    inode-&gt;i_gid = current_fsgid();  
    return sock;  
</code></pre>

<p>  继续往下看具体的创建过程：new_inode()，在分配后，会设置i_ino和i_state的值。</p>

<pre><code>    struct inode *new_inode(struct super_block *sb)  
    {  
        ……  
        inode = alloc_inode(sb);  
        if (inode) {  
            spin_lock(&amp;inode_lock);  
            __inode_add_to_lists(sb, NULL, inode);  
            inode-&gt;i_ino = ++last_ino;  
            inode-&gt;i_state = 0;  
            spin_unlock(&amp;inode_lock);  
        }  
        return inode;  
    }  
</code></pre>

<p>  其中的alloc_inode() -> sb->s_op->alloc_inode()，sb是sock_mnt->mnt_sb，所以alloc_inode()指向的是sockfs的操作函数sock_alloc_inode。</p>

<pre><code>    static const struct super_operations sockfs_ops = {  
        .alloc_inode = sock_alloc_inode,  
        .destroy_inode =sock_destroy_inode,  
        .statfs = simple_statfs,  
    };  
</code></pre>

<p>  sock_alloc_inode()中通过kmem_cache_alloc()分配了struct socket_alloc结构体大小的空间，而struct socket_alloc结构体定义如下，但只返回了inode，实际上socket和inode都已经分配了空间，在之后就可以通过container_of取到socket。</p>

<pre><code>    static struct inode *sock_alloc_inode(struct super_block *sb)  
    {  
        struct socket_alloc *ei;  
        ei = kmem_cache_alloc(sock_inode_cachep, GFP_KERNEL);  
        ......  
        return &amp;ei-&gt;vfs_inode;  
    }  
    struct socket_alloc {  
        struct socket socket;  
        struct inode vfs_inode;  
    };  

    net_families[AF_INET]:  
    static const struct net_proto_family inet_family_ops = {  
        .family = PF_INET,  
        .create = inet_create,  
        .owner = THIS_MODULE,  
    };  
</code></pre>

<p>err = pf->create(net, sock, protocol, kern); ==> inet_create()
这段代码就是从inetsw[]中取到适合的协议类型answer，sock->type就是传入socket()函数的type参数SOCK_DGRAM，最终取得结果answer->ops==inet_stream_ops，从上面这段代码还可以看出以下问题：</p>

<p>  socket(AF_INET, SOCK_RAW, IPPROTO_IP)这样是不合法的，因为SOCK_RAW没有默认的协议类型；同样socket(AF_INET, SOCK_DGRAM, IPPROTO_IP)与socket(AF_INET, SOCK_DGRAM, IPPROTO_TCP)是一样的，因为TCP的默认协议类型是IPPTOTO_TCP；SOCK_STREAM与IPPROTO_UDP同上。</p>

<pre><code>    sock-&gt;state = SS_UNCONNECTED;  
    list_for_each_entry_rcu(answer, &amp;inetsw[sock-&gt;type], list) {  
        err = 0;  
        /* Check the non-wild match. */  
        if (protocol == answer-&gt;protocol) {  
            if (protocol != IPPROTO_IP)  
                break;  
        } else {  
            /* Check for the two wild cases. */  
            if (IPPROTO_IP == protocol) {  
                protocol = answer-&gt;protocol;  
                break;  
            }  
            if (IPPROTO_IP == answer-&gt;protocol)  
                break;  
        }  
        err = -EPROTONOSUPPORT;  
    }  
</code></pre>

<p>sock->ops指向inet_stream_ops，然后创建sk，sk->proto指向tcp_prot，注意这里分配的大小是struct tcp_sock，而不仅仅是struct sock大小</p>

<pre><code>    sock-&gt;ops = answer-&gt;ops;  
    answer_prot = answer-&gt;prot;  
    ……  
    sk = sk_alloc(net, PF_INET, GFP_KERNEL, answer_prot);  
</code></pre>

<p>然后设置inet的一些参数，这里直接将sk类型转换为inet，因为在sk_alloc()中分配的是struct tcp_sock结构大小，返回的是struct sock，利用了第一个成员的特性，三者之间的关系如下图：
<code>
    inet = inet_sk(sk);  
    ……  
    inet-&gt;inet_id = 0;  
    sock_init_data(sock, sk);  
</code>
其中有些设置是比较重要的，如
<code>
    sk-&gt;sk_state = TCP_CLOSE;  
    sk_set_socket(sk, sock);  
    sk-&gt;sk_protocol = protocol;  
    sk-&gt;sk_backlog_rcv = sk-&gt;sk_prot-&gt;backlog_rcv;  
</code></p>

<p>创建socket后，接下来的流程会因为客户端或服务器的不同而有所差异，下面着重于分析建立连接的三次握手过程。典型的客户端流程：<br/>
connect() -> send() -> recv()</p>

<p>典型的服务器流程：<br/>
bind() -> listen() -> accept() -> recv() -> send()</p>

<h4>客户端流程</h4>

<p>发送SYN报文，向服务器发起tcp连接</p>

<pre><code>            connect(fd, servaddr, addrlen);
                -&gt; SYSCALL＿DEFINE3() 
                -&gt; sock-&gt;ops-&gt;connect() == inet_stream_connect (sock-&gt;ops即inet_stream_ops)
                -&gt; tcp_v4_connect()
</code></pre>

<p>查找到达[daddr, dport]的路由项，路由项的查找与更新与”路由表”章节所述一样。要注意的是由于是作为客户端调用，创建socket后调用connect，因而saddr, sport都是0，同样在未查找路由前，要走的出接口oif也是不知道的，因此也是0。在查找完路由表后(注意不是路由缓存)，可以得知出接口，但并未存储到sk中。因此插入的路由缓存是特别要注意的：它的键值与实际值是不相同的，这个不同点就在于oif与saddr，键值是[saddr=0, sport=0, daddr, dport, oif=0]，而缓存项值是[saddr, sport=0, daddr, dport, oif]。</p>

<pre><code>    tmp = ip_route_connect(&amp;rt, nexthop, inet-&gt;inet_saddr,  
                            RT_CONN_FLAGS(sk), sk-&gt;sk_bound_dev_if,  
                            IPPROTO_TCP,  
                            inet-&gt;inet_sport, usin-&gt;sin_port, sk, 1);  
    if (tmp &lt; 0) {  
        if (tmp == -ENETUNREACH)  
            IP_INC_STATS_BH(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);  
        return tmp;  
    }  
</code></pre>

<p>通过查找到的路由项，对inet进行赋值，可以看到，除了sport，都赋予了值，sport的选择复杂点，因为它要随机从未使用的本地端口中选择一个。</p>

<pre><code>    if (!inet-&gt;inet_saddr)  
        inet-&gt;inet_saddr = rt_rt_src;   
    inet-&gt;inet_rcv_addr = inet-&gt;inet_saddr;  
    ……  
    inet-&gt;inet_dport = usin-&gt;sin_port;  
    inet-&gt;inet_daddr = daddr;  
</code></pre>

<p>状态从CLOSING转到TCP_SYN_SENT，也就是我们熟知的TCP的状态转移图。</p>

<pre><code>    tcp_set_state(sk, TCP_SYN_SENT);  
</code></pre>

<p>插入到bind链表中</p>

<pre><code>    err = inet_hash_connect(&amp;tcp_death_row, sk); //== &gt; __inet_hash_connect()  
</code></pre>

<p>当snum==0时，表明此时源端口没有指定，此时会随机选择一个空闲端口作为此次连接的源端口。low和high分别表示可用端口的下限和上限，remaining表示可用端口的数，注意这里的可用只是指端口可以用作源端口，其中部分端口可能已经作为其它socket的端口号在使用了，所以要循环1~remaining，直到查找到空闲的源端口。</p>

<pre><code>    if (!snum) {  
        inet_get_local_port_range(&amp;low, &amp;high);  
        remaining = (high - low) + 1;  
        ……  
        for (i = 1; i &lt;= remaining; i++) {  
            ……// choose a valid port  
        }  
    }  
</code></pre>

<p>下面来看下对每个端口的检查，即//choose a valid port部分的代码。这里要先了解下tcp的内核表组成，udp的表内核表udptable只是一张hash表，tcp的表则稍复杂，它的名字是tcp_hashinfo，在tcp_init()中被初始化，这个数据结构定义如下(省略了不相关的数据)：</p>

<pre><code>    struct inet_hashinfo {  
        struct inet_ehash_bucket *ehash;  
        ……  
        struct inet_bind_hashbucket *bhash;  
        ……  
        struct inet_listen_hashbucket  listening_hash[INET_LHTABLE_SIZE]  
                        ____cacheline_aligned_in_smp;  
    };  
</code></pre>

<p>从定义可以看出，tcp表又分成了三张表ehash, bhash, listening_hash，其中ehash, listening_hash对应于socket处在TCP的ESTABLISHED, LISTEN状态，bhash对应于socket已绑定了本地地址。三者间并不互斥，如一个socket可同时在bhash和ehash中，由于TIME_WAIT是一个比较特殊的状态，所以ehash又分成了chain和twchain，为TIME_WAIT的socket单独形成一张表。</p>

<p>回到刚才的代码，现在还只是建立socket连接，使用的就应该是tcp表中的bhash。首先取得内核tcp表的bind表 – bhash，查看是否已有socket占用：<br/>
  如果没有，则调用inet_bind_bucket_create()创建一个bind表项tb，并插入到bind表中，跳转至goto ok代码段；<br/>
  如果有，则跳转至goto ok代码段。<br/>
  进入ok代码段表明已找到合适的bind表项(无论是创建的还是查找到的)，调用inet_bind_hash()赋值源端口inet_num。</p>

<pre><code>    for (i = 1; i &lt;= remaining; i++) {  
        port = low + (i + offset) % remaining;  
        head = &amp;hinfo-&gt;bhash[inet_bhashfn(net, port, hinfo-&gt;bhash_size)];  
        ……  
        inet_bind_bucket_for_each(tb, node, &amp;head-&gt;chain) {  
            if (net_eq(ib_net(tb), net) &amp;&amp; tb-&gt;port == port) {  
                if (tb-&gt;fastreuse &gt;= 0)  
                    goto next_port;  
                WARN_ON(hlist_empty(&amp;tb-&gt;owners));  
                if (!check_established(death_row, sk, port, &amp;tw))  
                    goto ok;  
                goto next_port;  
            }  
        }  

        tb = inet_bind_bucket_create(hinfo-&gt;bind_bucket_cachep, net, head, port);  
        ……  
        next_port:  
            spin_unlock(&amp;head-&gt;lock);  
    }  

    ok:  
        ……  
    inet_bind_hash(sk, tb, port);  
        ……  
        goto out;  
</code></pre>

<p>在获取到合适的源端口号后，会重建路由项来进行更新：</p>

<pre><code>    err = ip_route_newports(&amp;rt, IPPROTO_TCP, inet-&gt;inet_sport, inet-&gt;inet_dport, sk);  
</code></pre>

<p>函数比较简单，在获取sport前已经查找过一次路由表，并插入了key=[saddr=0, sport=0, daddr, dport, oif=0]的路由缓存项；现在获取到了sport，调用ip_route_output_flow()再次更新路由缓存表，它会添加key=[saddr=0, sport, daddr, dport, oif=0]的路由缓存项。这里可以看出一个策略选择，查询路由表->获取sport->查询路由表，为什么不是获取sport->查询路由表的原因可能是效率的问题。</p>

<pre><code>    if (sport != (*rp)-&gt;fl.fl_ip_sport ||  
                    dport != (*rp)-&gt;fl.fl_ip_dport) {  
        struct flowi fl;  

        memcpy(&amp;fl, &amp;(*rp)-&gt;fl, sizeof(fl));  
        fl.fl_ip_sport = sport;  
        fl.fl_ip_dport = dport;  
        fl.proto = protocol;  
        ip_rt_put(*rp);  
        *rp = NULL;  
        security_sk_classify_flow(sk, &amp;fl);  
        return ip_route_output_flow(sock_net(sk), rp, &amp;fl, sk, 0);  
    }  
</code></pre>

<p>write_seq相当于第一次发送TCP报文的ISN，如果为0，则通过计算获取初始值，否则延用上次的值。在获取完源端口号，并查询过路由表后，TCP正式发送SYN报文，注意在这之前TCP状态已经更新成了TCP_SYN_SENT，而在函数最后才调用tcp_connect(sk)发送SYN报文，这中间是有时差的。</p>

<pre><code>    if (!tp-&gt;write_seq)  
        tp-&gt;write_seq = secure_tcp_sequence_number(inet-&gt;inet_saddr,  
                                        inet-&gt;inet_daddr,  
                                        inet-&gt;inet_sport,  
                                        usin-&gt;sin_port);  
    inet-&gt;inet_id = tp-&gt;write_seq ^ jiffies;  
    err = tcp_connect(sk);  
</code></pre>

<h5>tcp_connect()　发送SYN报文</h5>

<p>几步重要的代码如下，tcp_connect_init()中设置了tp->rcv_nxt=0，tcp_transmit_skb()负责发送报文，其中seq=tcb->seq=tp->write_seq，ack_seq=tp->rcv_nxt。</p>

<pre><code>    tcp_connect_init(sk);  
    tp-&gt;snd_nxt = tp-&gt;write_seq;  
    ……  
    tcp_transmit_skb(sk, buff, 1, sk-&gt;sk_allocation);  
</code></pre>

<h5>收到服务端的SYN+ACK，发送ACK</h5>

<h5>tcp_rcv_synsent_state_process()</h5>

<p>此时已接收到对方的ACK，状态变迁到TCP_ESTABLISHED。最后发送对方SYN的ACK报文。</p>

<pre><code>    tcp_set_state(sk, TCP_ESTABLISHED);  
    tcp_send_ack(sk);  
</code></pre>

<h4>服务端流程</h4>

<h5>bind() -> inet_bind()</h5>

<p>  bind操作的主要作用是将创建的socket与给定的地址相绑定，这样创建的服务才能公开的让外部调用。当然对于socket服务器的创建来说，这一步不是必须的，在listen()时如果没有绑定地址，系统会选择一个随机可用地址作为服务器地址。</p>

<p>  一个socket地址分为ip和port，inet->inet_saddr赋值了传入的ip，snum是传入的port，对于端口，要检查它是否已被占用，这是由sk->sk_prot->get_port()完成的(这个函数前面已经分析过，在传入port时它检查是否被占用；传入port=0时它选择未用的端口)。如果没有被占用，inet->inet_sport被赋值port，因为是服务监听端，不需要远端地址，inet_daddr和inet_dport都置0。</p>

<p>  注意bind操作不会改变socket的状态，仍为创建时的TCP_CLOSE。</p>

<pre><code>    snum = ntohs(addr-&gt;sin_port);  
    ……  
    inet-&gt;inet_rcv_saddr = inet-&gt;inet_saddr = addr-&gt;sin_addr.s_addr;  
    if (sk-&gt;sk_prot-&gt;get_port(sk, snum)) {  
        inet-&gt;inet_saddr = inet-&gt;inet_rcv_saddr = 0;  
        err = -EADDRINUSE;  
        goto out_release_sock;  
    }  
    ……  
    inet-&gt;inet_sport = htons(inet-&gt;inet_num);  
    inet-&gt;inet_daddr = 0;  
    inet-&gt;inet_dport = 0;  
</code></pre>

<h5>listen() -> inet_listen()</h5>

<p>  listen操作开始服务器的监听，此时服务就可以接受到外部连接了。在开始监听前，要检查状态是否正确，sock->state==SS_UNCONNECTED确保仍是未连接的socket，sock->type==SOCK_STREAM确保是TCP协议，old_state确保此时状态是TCP_CLOSE或TCP_LISTEN，在其它状态下进行listen都是错误的。</p>

<pre><code>    if (sock-&gt;state != SS_UNCONNECTED || sock-&gt;type != SOCK_STREAM)  
        goto out;  
    old_state = sk-&gt;sk_state;  
    if (!((1 &lt;&lt; old_state) &amp; (TCPF_CLOSE | TCPF_LISTEN)))  
        goto out;  
</code></pre>

<p>  如果已是TCP_LISTEN态，则直接跳过，不用再执行listen了，而只是重新设置listen队列长度sk_max_ack_backlog，改变listen队列长也是多次执行listen的作用。如果还没有执行listen，则还要调用inet_csk_listen_start()开始监听。</p>

<p>  inet_csk_listen_start()变迁状态至TCP_LISTEN，分配监听队列，如果之前没有调用bind()绑定地址，则这里会分配一个随机地址。</p>

<pre><code>    if (old_state != TCP_LISTEN) {  
        err = inet_csk_listen_start(sk, backlog);  
        if (err)  
            goto out;  
    }  
    sk-&gt;sk_max_ack_backlog = backlog;  
</code></pre>

<h5>accept()</h5>

<p>accept() -> sys_accept4() -> inet_accept() -> inet_csk_accept()</p>

<p>  accept()实际要做的事件并不多，它的作用是返回一个已经建立连接的socket(即经过了三次握手)，这个过程是异步的，accept()并不亲自去处理三次握手过程，而只是监听icsk_accept_queue队列，当有socket经过了三次握手，它就会被加到icsk_accept_queue中，所以accept要做的就是等待队列中插入socket，然后被唤醒并返回这个socket。而三次握手的过程完全是协议栈本身去完成的。换句话说，协议栈相当于写者，将socket写入队列，accept()相当于读者，将socket从队列读出。这个过程从listen就已开始，所以即使不调用accept()，客户仍可以和服务器建立连接，但由于没有处理，队列很快会被占满。</p>

<pre><code>    if (reqsk_queue_empty(&amp;icsk-&gt;icsk_accept_queue)) {  
        long timeo = sock_rcvtimeo(sk, flags &amp; O_NONBLOCK);  
        ……  
        error = inet_csk_wait_for_connect(sk, timeo);  
        ……  
    }  

    newsk = reqsk_queue_get_child(&amp;icsk-&gt;icsk_accept_queue, sk);  
</code></pre>

<p>  协议栈向队列中加入socket的过程就是完成三次握手的过程，客户端通过向已知的listen fd发起连接请求，对于到来的每个连接，都会创建一个新的sock，当它经历了TCP_SYN_RCV -> TCP_ESTABLISHED后，就会被添加到icsk_accept_queue中，而监听的socket状态始终为TCP_LISTEN，保证连接的建立不会影响socket的接收。</p>

<h4>接收客户端发来的SYN，发送SYN+ACK</h4>

<h5>tcp_v4_do_rcv()</h5>

<p>  tcp_v4_do_rcv()是TCP模块接收的入口函数，客户端发起请求的对象是listen fd，所以sk->sk_state == TCP_LISTEN，调用tcp_v4_hnd_req()来检查是否处于半连接，只要三次握手没有完成，这样的连接就称为半连接，具体而言就是收到了SYN，但还没有收到ACK的连接，所以对于这个查找函数，如果是SYN报文，则会返回listen的socket(连接尚未创建)；如果是ACK报文，则会返回SYN报文处理中插入的半连接socket。其中存储这些半连接的数据结构是syn_table，它在listen()调用时被创建，大小由sys_ctl_max_syn_backlog和listen()传入的队列长度决定。</p>

<p>此时是收到SYN报文，tcp_v4_hnd_req()返回的仍是sk，调用tcp_rcv_state_process()来接收SYN报文，并发送SYN+ACK报文，同时向syn_table中插入一项表明此次连接的sk。</p>

<pre><code>    if (sk-&gt;sk_state == TCP_LISTEN) {  
        struct sock *nsk = tcp_v4_hnd_req(sk, skb);  
        if (!nsk)  
            goto discard;  
        if (nsk != sk) {  
            if (tcp_child_process(sk, nsk, skb)) {  
                rsk = nsk;  
                goto reset;  
            }  
            return 0;  
        }  
    }  
    TCP_CHECK_TIMER(sk);  
    if (tcp_rcv_state_process(sk, skb, tcp_hdr(skb), skb-&gt;len)) {  
        rsk = sk;  
        goto reset;  
    }  
</code></pre>

<p>  tcp_rcv_state_process()处理各个状态上socket的情况。下面是处于TCP_LISTEN的代码段，处于TCP_LISTEN的socket不会再向其它状态变迁，它负责监听，并在连接建立时创建新的socket。实际上，当收到第一个SYN报文时，会执行这段代码，conn_request() => tcp_v4_conn_request。</p>

<pre><code>    case TCP_LISTEN:  
    ……  
        if (th-&gt;syn) {  
            if (icsk-&gt;icsk_af_ops-&gt;conn_request(sk, skb) &lt; 0)  
                return 1;  
            kfree_skb(skb);  
            return 0;  
        }  
</code></pre>

<p>  tcp_v4_conn_request()中注意两个函数就可以了：tcp_v4_send_synack()向客户端发送了SYN+ACK报文，inet_csk_reqsk_queue_hash_add()将sk添加到了syn_table中，填充了该客户端相关的信息。这样，再次收到客户端的ACK报文时，就可以在syn_table中找到相应项了。</p>

<pre><code>    if (tcp_v4_send_synack(sk, dst, req, (struct request_values *)&amp;tmp_ext) || want_cookie)  
        goto drop_and_free;  
    inet_csk_reqsk_queue_hash_add(sk, req, TCP_TIMEOUT_INIT);  
</code></pre>

<h4>接收客户端发来的ACK</h4>

<h5>tcp_v4_do_rcv()</h5>

<p>  过程与收到SYN报文相同，不同点在于syn_table中已经插入了有关该连接的条目，tcp_v4_hnd_req()会返回一个新的sock: nsk，然后会调用tcp_child_process()来进行处理。在tcp_v4_hnd_req()中会创建新的sock，下面详细看下这个函数。</p>

<pre><code>    if (sk-&gt;sk_state == TCP_LISTEN) {  
        struct sock *nsk = tcp_v4_hnd_req(sk, skb);  
        if (!nsk)  
            goto discard;  
        if (nsk != sk) {  
            if (tcp_child_process(sk, nsk, skb)) {  
                rsk = nsk;  
                goto reset;  
            }  
            return 0;  
        }  
    }  
</code></pre>

<h5>tcp_v4_hnd_req()</h5>

<p>之前已经分析过，inet_csk_search_req()会在syn_table中找到req，此时进入tcp_check_req()</p>

<pre><code>    struct request_sock *req = inet_csk_search_req(sk, &amp;prev, th-&gt;source, iph-&gt;saddr, iph-&gt;daddr);  
    if (req)  
        return tcp_check_req(sk, skb, req, prev);  
</code></pre>

<h5>tcp_check_req()</h5>

<p>  syn_recv_sock() -> tcp_v4_syn_recv_sock()会创建一个新的sock并返回，创建的sock状态被直接设置为TCP_SYN_RECV，然后因为此时socket已经建立，将它添加到icsk_accept_queue中。</p>

<p>  状态TCP_SYN_RECV的设置可能比较奇怪，按照TCP的状态转移图，在服务端收到SYN报文后变迁为TCP_SYN_RECV，但看到在实现中收到ACK后才有了状态TCP_SYN_RECV，并且马上会变为TCP_ESTABLISHED，所以这个状态变得无足轻重。这样做的原因是listen和accept返回的socket是不同的，而只有真正连接建立时才会创建这个新的socket，在收到SYN报文时新的socket还没有建立，就无从谈状态变迁了。这里同样是一个平衡的存在，你也可以在收到SYN时创建一个新的socket，代价就是无用的socket大大增加了。</p>

<pre><code>    child = inet_csk(sk)-&gt;icsk_af_ops-&gt;syn_recv_sock(sk, skb, req, NULL);  
    if (child == NULL)  
        goto listen_overflow;  
    inet_csk_reqsk_queue_unlink(sk, req, prev);  
    inet_csk_reqsk_queue_removed(sk, req);  
    inet_csk_reqsk_queue_add(sk, req, child);  
</code></pre>

<h5>tcp_child_process()</h5>

<p>如果此时sock: child被用户进程锁住了，那么就先添加到backlog中__sk_add_backlog()，待解锁时再处理backlog上的sock；如果此时没有被锁住，则先调用tcp_rcv_state_process()进行处理，处理完后，如果child状态到达TCP_ESTABLISHED，则表明其已就绪，调用sk_data_ready()唤醒等待在isck_accept_queue上的函数accept()。</p>

<pre><code>    if (!sock_owned_by_user(child)) {  
        ret = tcp_rcv_state_process(child, skb, tcp_hdr(skb), skb-&gt;len);  
        if (state == TCP_SYN_RECV &amp;&amp; child-&gt;sk_state != state)  
            parent-&gt;sk_data_ready(parent, 0);  
    } else {  
        __sk_add_backlog(child, skb);  
    }  
</code></pre>

<p>  tcp_rcv_state_process()处理各个状态上socket的情况。下面是处于TCP_SYN_RECV的代码段，注意此时传入函数的sk已经是新创建的sock了(在tcp_v4_hnd_req()中)，并且状态是TCP_SYN_RECV，而不再是listen socket，在收到ACK后，sk状态变迁为TCP_ESTABLISHED，而在tcp_v4_hnd_req()中也已将sk插入到了icsk_accept_queue上，此时它就已经完全就绪了，回到tcp_child_process()便可执行sk_data_ready()。</p>

<pre><code>    case TCP_SYN_RECV:  
        if (acceptable) {  
            ……  
            tcp_set_state(sk, TCP_ESTABLISHED);  
            sk-&gt;sk_state_change(sk);  
            ……  
            tp-&gt;snd_una = TCP_SKB_CB(skb)-&gt;ack_seq;  
            tp-&gt;snd_wnd = ntohs(th-&gt;window) &lt;&lt; tp-&gt;rx_opt.snd_wscale;  
            tcp_init_wl(tp, TCP_SKB_CB(skb)-&gt;seq);   
            ……  
    }  
</code></pre>

<p>最后总结三次握手的过程</p>

<p><img src="/images/kernel/2015-06-01.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipv6初始化和处理流程分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/15/kernel-net-ipv6/"/>
    <updated>2015-05-15T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/15/kernel-net-ipv6</id>
    <content type="html"><![CDATA[<p><a href="/download/kernel/ipv6%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90.pdf">ipv6初始化和处理流程分析.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP的URG标志和内核实现]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/15/kernel-net-tcp_urg/"/>
    <updated>2015-05-15T13:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/15/kernel-net-tcp_urg</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/phenix_lord/article/details/42012931">TCP的URG标志和内核实现之一：协议</a><br/>
<a href="http://blog.csdn.net/phenix_lord/article/details/42046125">TCP的URG标志和内核实现之二：发送的实现</a><br/>
<a href="http://blog.csdn.net/phenix_lord/article/details/42065897">TCP的URG标志和内核实现之三：接收的实现</a></p>

<hr />

<h3>TCP的URG标志和内核实现之一：协议</h3>

<p>定义urgent数据的目的：<br/>
urgent机制，是用于通知应用层需要接收urgent data，在urgent data接收完成后，通知应用层urgent data数据接收完毕。相关协议文本RFC793 RFC1122 RFC6093</p>

<h4>哪些数据是urgent data？</h4>

<h5>协议规定</h5>

<p>在TCP报头的URG位有效的时候，通过TCP报头中的urgent pointer来标识urgent data的位置，但是在urgent pointer的解析方式上各个协议文本的描述有差异：</p>

<p>解读一：RFC793  P17，描述是“The urgent pointer points to the sequence number of the octet following the urgent data.”，在P41有描述“This mechanism permits a point in the data stream to be designated as the end of urgent information. Whenever this point is in advance of the receive sequence number (RCV.NXT) at the receiving TCP, that TCP must tell the user to go into &ldquo;urgent mode&rdquo;; when the receive sequence number catches up to the urgent pointer, the TCP must tell user to go”，可以认为是：当前接收的报文中SEQ在SEG.SEQ+Urgent Pointer之前的都是,而urgent pointer是第一个非urgent data（ TCP已经接受，但是还没有提交给应用的数据是不是呢？）</p>

<p>解读二：在P56的描述是“If the urgent flag is set, then SND.UP &lt;-SND.NXT-1 and set the urgent pointer in the outgoing segments”，也就是urgent pointer是最后一个urgent data字节。而在RFC1122中消除了这一歧义：在P84中说明“the urgent pointer points to the sequence number of the LAST octet (not LAST+1) in a sequence of urgent data”</p>

<h5>linux实现</h5>

<p>虽然在RFC1122中消除了这一歧义，linux仍然使用了解读一的解析方式，如果要使用解读二定义的方式，需要使用tcp_stdurg这个配置项。</p>

<h4>urgent data数据能有多长？</h4>

<h5>协议规定</h5>

<p>按照RFC793 P41的描述，长度不受限，RFC1122 P84中，更是明确了“A TCP MUST support a sequence of urgent data of any length”</p>

<h5>linux实现</h5>

<p>其实，linux只支持1BYTE的urgent data</p>

<h4>urgent data与OOB数据</h4>

<p>OOB数据说的是带外数据，也就是这些数据不是放到TCP流供读取的，而是通过额外的接口来获取，linux默认把urgent data实现为OOB数据；而按照协议的规定，urgent data不是out of band data</p>

<p>由于OOB数据的协议和实现上存在很多不确定因素，因此现在已经不建议使用了</p>

<hr />

<h3>TCP的URG标志和内核实现之二：发送的实现</h3>

<p>Linxu内核在默认情况下，把urgent data实现为OOB数据</p>

<h4>发送URG数据的接口</h4>

<p>在内核态，使用kernel_sendmsg/kernel_sendpage完成发送，只不过需要加上MSG_OOB标志，表示要发送的URG数据。</p>

<h4>URG数据发送接口的实现</h4>

<p>分片主要在kernel_sendmsg中完成，在OOB数据的处理上，它和kernel_sendpage是一致
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int tcp_sendmsg(struct kiocb &lt;em&gt;iocb, struct sock &lt;/em&gt;sk, struct msghdr &lt;em&gt;msg,&lt;br/&gt;
</span><span class='line'>        size_t size)&lt;br/&gt;
</span><span class='line'>{&lt;br/&gt;
</span><span class='line'>    。。。。。。。。。。。。。。&lt;br/&gt;
</span><span class='line'>    /&lt;/em&gt;如果flags设置了MSG_OOB该接口其实返回的mss_now关闭了TSO功能&lt;em&gt;/&lt;br/&gt;
</span><span class='line'>    mss_now = tcp_send_mss(sk, &amp;size_goal, flags);&lt;br/&gt;
</span><span class='line'>    。。。。。。。。。。。。。。&lt;br/&gt;
</span><span class='line'>    while (&ndash;iovlen &gt;= 0) {&lt;br/&gt;
</span><span class='line'>        size_t seglen = iov-&gt;iov_len;&lt;br/&gt;
</span><span class='line'>        unsigned char __user &lt;/em&gt;from = iov-&gt;iov_base;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;        iov++;  
</span><span class='line'>
</span><span class='line'>    while (seglen &gt; 0) {  
</span><span class='line'>        int copy = 0;  
</span><span class='line'>        int max = size_goal;  
</span><span class='line'>
</span><span class='line'>        skb = tcp_write_queue_tail(sk);  
</span><span class='line'>        if (tcp_send_head(sk)) {  
</span><span class='line'>            if (skb-&gt;ip_summed == CHECKSUM_NONE)  
</span><span class='line'>                max = mss_now;  
</span><span class='line'>            copy = max - skb-&gt;len;  
</span><span class='line'>        }  
</span><span class='line'>
</span><span class='line'>        if (copy &lt;= 0) {  
</span><span class='line'>new_segment:  
</span><span class='line'>            /* Allocate new segment. If the interface is SG, 
</span><span class='line'>             * allocate skb fitting to single page. 
</span><span class='line'>             */  
</span><span class='line'>            if (!sk_stream_memory_free(sk))  
</span><span class='line'>                goto wait_for_sndbuf;  
</span><span class='line'>
</span><span class='line'>            skb = sk_stream_alloc_skb(sk,  
</span><span class='line'>                          select_size(sk, sg),  
</span><span class='line'>                          sk-&gt;sk_allocation);  
</span><span class='line'>            if (!skb)  
</span><span class='line'>                goto wait_for_memory;  
</span><span class='line'>
</span><span class='line'>            /* 
</span><span class='line'>             * Check whether we can use HW checksum. 
</span><span class='line'>             */  
</span><span class='line'>            if (sk-&gt;sk_route_caps &amp; NETIF_F_ALL_CSUM)  
</span><span class='line'>                skb-&gt;ip_summed = CHECKSUM_PARTIAL;  
</span><span class='line'>
</span><span class='line'>            skb_entail(sk, skb);  
</span><span class='line'>            copy = size_goal;  
</span><span class='line'>            max = size_goal;  
</span><span class='line'>        }  
</span><span class='line'>
</span><span class='line'>        /* Try to append data to the end of skb. */  
</span><span class='line'>        if (copy &gt; seglen)  
</span><span class='line'>            copy = seglen;  
</span><span class='line'>
</span><span class='line'>        /* Where to copy to? */  
</span><span class='line'>        if (skb_availroom(skb) &gt; 0) {  
</span><span class='line'>            /* We have some space in skb head. Superb! */  
</span><span class='line'>            copy = min_t(int, copy, skb_availroom(skb));  
</span><span class='line'>            err = skb_add_data_nocache(sk, skb, from, copy);  
</span><span class='line'>            if (err)  
</span><span class='line'>                goto do_fault;  
</span><span class='line'>        } else {  
</span><span class='line'>            int merge = 0;  
</span><span class='line'>            int i = skb_shinfo(skb)-&gt;nr_frags;  
</span><span class='line'>            struct page *page = sk-&gt;sk_sndmsg_page;  
</span><span class='line'>            int off;  
</span><span class='line'>
</span><span class='line'>            if (page &amp;&amp; page_count(page) == 1)  
</span><span class='line'>                sk-&gt;sk_sndmsg_off = 0;  
</span><span class='line'>
</span><span class='line'>            off = sk-&gt;sk_sndmsg_off;  
</span><span class='line'>
</span><span class='line'>            if (skb_can_coalesce(skb, i, page, off) &amp;&amp;  
</span><span class='line'>                off != PAGE_SIZE) {  
</span><span class='line'>                /* We can extend the last page 
</span><span class='line'>                 * fragment. */  
</span><span class='line'>                merge = 1;  
</span><span class='line'>            } else if (i == MAX_SKB_FRAGS || !sg) {  
</span><span class='line'>                /* Need to add new fragment and cannot 
</span><span class='line'>                 * do this because interface is non-SG, 
</span><span class='line'>                 * or because all the page slots are 
</span><span class='line'>                 * busy. */  
</span><span class='line'>                tcp_mark_push(tp, skb);  
</span><span class='line'>                goto new_segment;  
</span><span class='line'>            } else if (page) {  
</span><span class='line'>                if (off == PAGE_SIZE) {  
</span><span class='line'>                    put_page(page);  
</span><span class='line'>                    sk-&gt;sk_sndmsg_page = page = NULL;  
</span><span class='line'>                    off = 0;  
</span><span class='line'>                }  
</span><span class='line'>            } else  
</span><span class='line'>                off = 0;  
</span><span class='line'>
</span><span class='line'>            if (copy &gt; PAGE_SIZE - off)  
</span><span class='line'>                copy = PAGE_SIZE - off;  
</span><span class='line'>            if (!sk_wmem_schedule(sk, copy))  
</span><span class='line'>                goto wait_for_memory;  
</span><span class='line'>
</span><span class='line'>            if (!page) {  
</span><span class='line'>                /* Allocate new cache page. */  
</span><span class='line'>                if (!(page = sk_stream_alloc_page(sk)))  
</span><span class='line'>                    goto wait_for_memory;  
</span><span class='line'>            }  
</span><span class='line'>
</span><span class='line'>            /* Time to copy data. We are close to 
</span><span class='line'>             * the end! */  
</span><span class='line'>            err = skb_copy_to_page_nocache(sk, from, skb,  
</span><span class='line'>                               page, off, copy);  
</span><span class='line'>            if (err) {  
</span><span class='line'>                /* If this page was new, give it to the 
</span><span class='line'>                 * socket so it does not get leaked. 
</span><span class='line'>                 */  
</span><span class='line'>                if (!sk-&gt;sk_sndmsg_page) {  
</span><span class='line'>                    sk-&gt;sk_sndmsg_page = page;  
</span><span class='line'>                    sk-&gt;sk_sndmsg_off = 0;  
</span><span class='line'>                }  
</span><span class='line'>                goto do_error;  
</span><span class='line'>            }  
</span><span class='line'>
</span><span class='line'>            /* Update the skb. */  
</span><span class='line'>            if (merge) {  
</span><span class='line'>                skb_frag_size_add(&amp;skb_shinfo(skb)-&gt;frags[i - 1], copy);  
</span><span class='line'>            } else {  
</span><span class='line'>                skb_fill_page_desc(skb, i, page, off, copy);  
</span><span class='line'>                if (sk-&gt;sk_sndmsg_page) {  
</span><span class='line'>                    get_page(page);  
</span><span class='line'>                } else if (off + copy &lt; PAGE_SIZE) {  
</span><span class='line'>                    get_page(page);  
</span><span class='line'>                    sk-&gt;sk_sndmsg_page = page;  
</span><span class='line'>                }  
</span><span class='line'>            }  
</span><span class='line'>
</span><span class='line'>            sk-&gt;sk_sndmsg_off = off + copy;  
</span><span class='line'>        }  
</span><span class='line'>
</span><span class='line'>        if (!copied)  
</span><span class='line'>            TCP_SKB_CB(skb)-&gt;tcp_flags &amp;= ~TCPHDR_PSH;  
</span><span class='line'>
</span><span class='line'>        tp-&gt;write_seq += copy;  
</span><span class='line'>        TCP_SKB_CB(skb)-&gt;end_seq += copy;  
</span><span class='line'>        skb_shinfo(skb)-&gt;gso_segs = 0;  
</span><span class='line'>
</span><span class='line'>        from += copy;  
</span><span class='line'>        copied += copy;  
</span><span class='line'>        if ((seglen -= copy) == 0 &amp;&amp; iovlen == 0)  
</span><span class='line'>            goto out;  
</span><span class='line'>        /*对于OOB数据，即使一个分片用光，如果还有 
</span><span class='line'>        send_buff和OOB数据，就继续积累分片*/  
</span><span class='line'>        if (skb-&gt;len &lt; max || (flags &amp; MSG_OOB))  
</span><span class='line'>            continue;  
</span><span class='line'>
</span><span class='line'>        if (forced_push(tp)) {  
</span><span class='line'>            tcp_mark_push(tp, skb);  
</span><span class='line'>            __tcp_push_pending_frames(sk, mss_now, TCP_NAGLE_PUSH);  
</span><span class='line'>        } else if (skb == tcp_send_head(sk))  
</span><span class='line'>            tcp_push_one(sk, mss_now);  
</span><span class='line'>        continue;  
</span><span class='line'>
</span><span class='line'>wait_for_sndbuf:  
</span><span class='line'>        set_bit(SOCK_NOSPACE, &amp;sk-&gt;sk_socket-&gt;flags);  
</span><span class='line'>wait_for_memory:  
</span><span class='line'>        if (copied)  
</span><span class='line'>            tcp_push(sk, flags &amp; ~MSG_MORE, mss_now, TCP_NAGLE_PUSH);  
</span><span class='line'>
</span><span class='line'>        if ((err = sk_stream_wait_memory(sk, &amp;timeo)) != 0)  
</span><span class='line'>            goto do_error;  
</span><span class='line'>
</span><span class='line'>        mss_now = tcp_send_mss(sk, &amp;size_goal, flags);  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>out:  
</span><span class='line'>if (copied)  
</span><span class='line'>    tcp_push(sk, flags, mss_now, tp-&gt;nonagle);  
</span><span class='line'>release_sock(sk);  
</span><span class='line'>return copied;  
</span><span class='line'>
</span><span class='line'>do_fault:  
</span><span class='line'>if (!skb-&gt;len) {  
</span><span class='line'>    tcp_unlink_write_queue(skb, sk);  
</span><span class='line'>    /* It is the one place in all of TCP, except connection 
</span><span class='line'>     * reset, where we can be unlinking the send_head. 
</span><span class='line'>     */  
</span><span class='line'>    tcp_check_send_head(sk, skb);  
</span><span class='line'>    sk_wmem_free_skb(sk, skb);  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>do_error:  
</span><span class='line'>if (copied)  
</span><span class='line'>    goto out;  
</span><span class='line'>out_err:  
</span><span class='line'>err = sk_stream_error(sk, flags, err);  
</span><span class='line'>release_sock(sk);  
</span><span class='line'>return err;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>tcp_sendmsg中，涉及对OOB数据的处理主要有：
</span><span class='line'>
</span><span class='line'>##### 1、在调用tcp_send_mss确定分片大小的时候：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int tcp_send_mss(struct sock *sk,int *size_goal, int flags)
</span><span class='line'>{
</span><span class='line'>intmss_now;
</span><span class='line'>mss_now= tcp_current_mss(sk);
</span><span class='line'>
</span><span class='line'>/*如果是OOB数据，large_allowed=0，关闭TSO*/
</span><span class='line'>*size_goal= tcp_xmit_size_goal(sk, mss_now, !(flags &amp; MSG_OOB));
</span><span class='line'>returnmss_now;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;如果是OOB数据，其实是关闭了TSO功能，这样做的原因是：天知道各个网卡芯片在执行分片的时候咋个处理TCP报头中的URG标志和urgent point
</span><span class='line'>
</span><span class='line'>##### 2、在确定何时开始执行分片的发送的时候：
</span><span class='line'>
</span><span class='line'>如果是OOB数据，即使当前已经积累了一整个分片，也不会想普通的数据一样执行发送(tcp_push)，而是继续积累直到用户下发的数据全部分片或者snd_buf/内存用尽。
</span><span class='line'>
</span><span class='line'>##### 3、执行tcp_push的时候：
</span><span class='line'>
</span><span class='line'>在用户下发的数据全部分片或者snd_buf/内存用尽后，进入tcp_push执行发送操作(所有的OOB数据，都会通过这个接口来执行发送)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline void tcp_push(struct sock*sk, int flags, int mss_now,
</span><span class='line'>                     int nonagle)
</span><span class='line'>{
</span><span class='line'>if(tcp_send_head(sk)) {
</span><span class='line'>    structtcp_sock *tp = tcp_sk(sk);
</span><span class='line'>    if(!(flags &amp; MSG_MORE) || forced_push(tp))
</span><span class='line'>        tcp_mark_push(tp,tcp_write_queue_tail(sk));    
</span><span class='line'>          /*tcp_mark_urg设置tp-&gt;snd_up，标识进入OOB数据发送模式，设置urgent point
</span><span class='line'>          指向urgentdata接受后的第一个字符*/
</span><span class='line'>    tcp_mark_urg(tp,flags);
</span><span class='line'>    __tcp_push_pending_frames(sk,mss_now,
</span><span class='line'>                  (flags &amp; MSG_MORE) ? TCP_NAGLE_CORK :nonagle);
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 发送处理
</span><span class='line'>
</span><span class='line'>使用struct tcp_sock中的snd_up来标识当前的urgent point，同时也使用该数据来判断当前是否处于urgent data发送模式，在普通数据的发送模式中tcp_sock::snd_up总是和tcp_sock::snd_una相等，只有在有urgent data发送的时候，才在tcp_push---&gt;tcp_mark_urg中设置为urgentpoint，进入到urgent data的处理模式
</span><span class='line'>
</span><span class='line'>在tcp_transmit_skb中的以下代码段负责urgent data相关的处理：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if (unlikely(tcp_urg_mode(tp) &amp;&amp; before(tcb-&gt;seq, tp-&gt;snd_up))) {  
</span><span class='line'>if (before(tp-&gt;snd_up, tcb-&gt;seq + 0x10000)) {  
</span><span class='line'>    th-&gt;urg_ptr = htons(tp-&gt;snd_up - tcb-&gt;seq);  
</span><span class='line'>    th-&gt;urg = 1;  
</span><span class='line'>} else if (after(tcb-&gt;seq + 0xFFFF, tp-&gt;snd_nxt)) {  
</span><span class='line'>    th-&gt;urg_ptr = htons(0xFFFF);  
</span><span class='line'>    th-&gt;urg = 1;  
</span><span class='line'>}  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>只要当前待发送的skb的seq在tcp_sock记录的urgent point前面，就需要在报头中对URG标志置位，同时如果tcp_sock记录的urgent point。如果该报文的seq距离大于16为能表示的最大值，就置TCP报头中的urgent point为65535。
</span><span class='line'>
</span><span class='line'>#### 切换回普通模式：
</span><span class='line'>
</span><span class='line'>在收到对方ACK的处理流程tcp_ack---&gt;tcp_clean_rtx_queue中：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if (likely(between(tp-&gt;snd_up, prior_snd_una, tp-&gt;snd_una)))  
</span><span class='line'>tp-&gt;snd_up = tp-&gt;snd_una;  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 报文体现
</span><span class='line'>根据对发送代码的分析，可以看到：如果用户使用MSG_OOB数据发送一段比较长(若干个MSS)的数据，那么线路上的报文应该是分成了若干组，每组由若干个长度为MSS的报文构成，组内的每个报文有一样的urgent pointer，指向下一组报文的起始seq，每一组的长度最长为65535。
</span><span class='line'>
</span><span class='line'>----------
</span><span class='line'>### TCP的URG标志和内核实现之三：接收的实现
</span><span class='line'>
</span><span class='line'>大致的处理过程
</span><span class='line'>
</span><span class='line'>TCP的接收流程：在tcp_v4_do_rcv中的相关处理(网卡收到报文触发)中，会首先通过tcp_check_urg设置tcp_sock的urg_data为TCP_URG_NOTYET(urgent point指向的可能不是本报文，而是后续报文或者前面收到的乱序报文)，并保存最新的urgent data的sequence和对于的1 BYTE urgent data到tcp_sock的urg_data (如果之前的urgent data没有读取，就会被覆盖)。
</span><span class='line'>
</span><span class='line'>用户接收流程：在tcp_recvmsg流程中，如果发现当前的skb的数据中有urgent data，首先拷贝urgent data之前的数据，然后tcp_recvmsg退出，提示用户来接收OOB数据；在用户下一次调用tcp_recvmsg来接收数据的时候，会跳过urgent data，并设置urgent data数据接收完成。
</span><span class='line'>相关的数据结构和定义
</span><span class='line'>
</span><span class='line'>tcp_sock结构：
</span><span class='line'>
</span><span class='line'>1、 urg_data成员，其高8bit为urgent data的接收状态；其低8位为保存的1BYTE urgent数据。urgent data的接收状态对应的宏的含义描述：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#defineTCP_URG_VALID    0x0100  /*urgent data已经读到了tcp_sock::urg_data*/
</span><span class='line'>
</span><span class='line'>#defineTCP_URG_NOTYET   0x0200  /*已经发现有urgent data，还没有读取到tcp_sock::urg_data*/
</span><span class='line'>
</span><span class='line'>#defineTCP_URG_READ     0x0400  /*urgent data已经被用户通过MSG_OOB读取了*/
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>2、 urg_seq成员，为当前的urgent data的sequence
</span><span class='line'>
</span><span class='line'>流程详情
</span><span class='line'>
</span><span class='line'>#### TCP的接收过程
</span><span class='line'>
</span><span class='line'>在tcp_rcv_established的slow_path中
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;slow_path:  
</span><span class='line'>if (len &lt; (th-&gt;doff &lt;&lt; 2) || tcp_checksum_complete_user(sk, skb))  
</span><span class='line'>    goto csum_error;  
</span><span class='line'>/* 
</span><span class='line'> *  Standard slow path. 
</span><span class='line'> */  
</span><span class='line'>if (!tcp_validate_incoming(sk, skb, th, 1))  
</span><span class='line'>    return 0;  
</span><span class='line'>step5:  
</span><span class='line'>if (th-&gt;ack &amp;&amp;  
</span><span class='line'>    tcp_ack(sk, skb, FLAG_SLOWPATH | FLAG_UPDATE_TS_RECENT) &lt; 0)  
</span><span class='line'>    goto discard;  
</span><span class='line'>tcp_rcv_rtt_measure_ts(sk, skb);  
</span><span class='line'>/* 处理紧急数据. */  
</span><span class='line'>tcp_urg(sk, skb, th);  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>也就是在报文的CRC验证和sequence验证完成后，就会通过tcp_urg来处理接收到的urgent data ：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void tcp_urg(struct sock *sk, struct sk_buff *skb, const struct tcphdr *th)  
</span><span class='line'>{  
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);  
</span><span class='line'>
</span><span class='line'>/*收到了urgent data,则检查和设置urg_data和urg_seq成员*/  
</span><span class='line'>if (th-&gt;urg)  
</span><span class='line'>    tcp_check_urg(sk, th);  
</span><span class='line'>
</span><span class='line'>/* Do we wait for any urgent data? - normally not... 
</span><span class='line'>发现了有urgent data，但是还没有保存到tp-&gt;urg_data*/  
</span><span class='line'>if (tp-&gt;urg_data == TCP_URG_NOTYET) {  
</span><span class='line'>    u32 ptr = tp-&gt;urg_seq - ntohl(th-&gt;seq) + (th-&gt;doff * 4) -  
</span><span class='line'>          th-&gt;syn;  
</span><span class='line'>
</span><span class='line'>    /* Is the urgent pointer pointing into this packet? */  
</span><span class='line'>    if (ptr &lt; skb-&gt;len) {  
</span><span class='line'>        u8 tmp;  
</span><span class='line'>        if (skb_copy_bits(skb, ptr, &amp;tmp, 1))  
</span><span class='line'>            BUG();  
</span><span class='line'>        tp-&gt;urg_data = TCP_URG_VALID | tmp;  
</span><span class='line'>        if (!sock_flag(sk, SOCK_DEAD))  
</span><span class='line'>            sk-&gt;sk_data_ready(sk, 0);  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>检查和设置urg_data和urg_seq成员的处理函数tcp_check_urg的具体流程
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void tcp_check_urg(struct sock *sk, const struct tcphdr *th)  
</span><span class='line'>{  
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);  
</span><span class='line'>u32 ptr = ntohs(th-&gt;urg_ptr);  
</span><span class='line'>/*两种urgent point的解析方式: 
</span><span class='line'>一是指向urgent data之后的第一个字节 
</span><span class='line'>二是执行urgent data的结束字节(RFC1122) 
</span><span class='line'>sysctl_tcp_stdurg被设置表示当前采用的是第二种模式 
</span><span class='line'>不需要把urgent point -1来指向urgent data的结束字节*/  
</span><span class='line'>if (ptr &amp;&amp; !sysctl_tcp_stdurg)  
</span><span class='line'>    ptr--;  
</span><span class='line'>ptr += ntohl(th-&gt;seq);  
</span><span class='line'>
</span><span class='line'>/* Ignore urgent data that we've already seen and read.  
</span><span class='line'>如果copied_seq已经大于urgent point，那么对于从tcp_rcv_established 
</span><span class='line'>来执行的，前面的tcp_validate_incoming已经拒绝了这种报文( 
</span><span class='line'>接收窗口外)，这里要处理的是哪种情形?*/  
</span><span class='line'>if (after(tp-&gt;copied_seq, ptr))  
</span><span class='line'>    return;  
</span><span class='line'>
</span><span class='line'>/* Do not replay urg ptr. 
</span><span class='line'> * 
</span><span class='line'> * NOTE: interesting situation not covered by specs. 
</span><span class='line'> * Misbehaving sender may send urg ptr, pointing to segment, 
</span><span class='line'> * which we already have in ofo queue. We are not able to fetch 
</span><span class='line'> * such data and will stay in TCP_URG_NOTYET until will be eaten 
</span><span class='line'> * by recvmsg(). Seems, we are not obliged to handle such wicked 
</span><span class='line'> * situations. But it is worth to think about possibility of some 
</span><span class='line'> * DoSes using some hypothetical application level deadlock. 
</span><span class='line'> */  
</span><span class='line'>/*  这种情况什么时候发生?没搞明白*/  
</span><span class='line'>if (before(ptr, tp-&gt;rcv_nxt))  
</span><span class='line'>    return;  
</span><span class='line'>
</span><span class='line'>/* Do we already have a newer (or duplicate) urgent pointer?  
</span><span class='line'>如果当前已经进入urg数据读取模式，且urgent point不大于当前 
</span><span class='line'>保存的值，那么之前已经开始了读取tp-&gt;urg_seq对应的 
</span><span class='line'>urgent 数据，无需重复处理了*/  
</span><span class='line'>if (tp-&gt;urg_data &amp;&amp; !after(ptr, tp-&gt;urg_seq))  
</span><span class='line'>    return;  
</span><span class='line'>
</span><span class='line'>/* Tell the world about our new urgent pointer.*/  
</span><span class='line'>sk_send_sigurg(sk);  
</span><span class='line'>
</span><span class='line'>/* We may be adding urgent data when the last byte read was 
</span><span class='line'> * urgent. To do this requires some care. We cannot just ignore 
</span><span class='line'> * tp-&gt;copied_seq since we would read the last urgent byte again 
</span><span class='line'> * as data, nor can we alter copied_seq until this data arrives 
</span><span class='line'> * or we break the semantics of SIOCATMARK (and thus sockatmark()) 
</span><span class='line'> * 
</span><span class='line'> * NOTE. Double Dutch. Rendering to plain English: author of comment 
</span><span class='line'> * above did something sort of  send("A", MSG_OOB); send("B", MSG_OOB); 
</span><span class='line'> * and expect that both A and B disappear from stream. This is _wrong_. 
</span><span class='line'> * Though this happens in BSD with high probability, this is occasional. 
</span><span class='line'> * Any application relying on this is buggy. Note also, that fix "works" 
</span><span class='line'> * only in this artificial test. Insert some normal data between A and B and we will 
</span><span class='line'> * decline of BSD again. Verdict: it is better to remove to trap 
</span><span class='line'> * buggy users. 
</span><span class='line'> */  
</span><span class='line'> /*用户下一次要读取的数据就是用户还没有读取的urgent数据 
</span><span class='line'>且当前存在新的用户未读取数据*/  
</span><span class='line'>if (tp-&gt;urg_seq == tp-&gt;copied_seq &amp;&amp; tp-&gt;urg_data &amp;&amp;  
</span><span class='line'>    !sock_flag(sk, SOCK_URGINLINE) &amp;&amp; tp-&gt;copied_seq != tp-&gt;rcv_nxt) {  
</span><span class='line'>    struct sk_buff *skb = skb_peek(&amp;sk-&gt;sk_receive_queue);  
</span><span class='line'>    tp-&gt;copied_seq++;  
</span><span class='line'>    if (skb &amp;&amp; !before(tp-&gt;copied_seq, TCP_SKB_CB(skb)-&gt;end_seq)) {  
</span><span class='line'>        __skb_unlink(skb, &amp;sk-&gt;sk_receive_queue);  
</span><span class='line'>        __kfree_skb(skb);  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>tp-&gt;urg_data = TCP_URG_NOTYET;  
</span><span class='line'>tp-&gt;urg_seq = ptr;  
</span><span class='line'>
</span><span class='line'>/* Disable header prediction. */  
</span><span class='line'>tp-&gt;pred_flags = 0;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 用户接收数据接口
</span><span class='line'>##### 用户接收URG数据的接口
</span><span class='line'>在用户接收数据的tcp_recvmsg函数中，如果用户通过MSG_OOB来接收数据，会进入tcp_recv_urg处理
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int tcp_recv_urg(struct sock *sk, struct msghdr *msg, int len, int flags)  
</span><span class='line'>{  
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);  
</span><span class='line'>
</span><span class='line'>/* No URG data to read.  
</span><span class='line'>用户已经读取过了*/  
</span><span class='line'>if (sock_flag(sk, SOCK_URGINLINE) || !tp-&gt;urg_data ||  
</span><span class='line'>    tp-&gt;urg_data == TCP_URG_READ)  
</span><span class='line'>    return -EINVAL; /* Yes this is right ! */  
</span><span class='line'>
</span><span class='line'>if (sk-&gt;sk_state == TCP_CLOSE &amp;&amp; !sock_flag(sk, SOCK_DONE))  
</span><span class='line'>    return -ENOTCONN;  
</span><span class='line'>/*当前的tp-&gt;urg_data为合法的数据，可以读取*/  
</span><span class='line'>if (tp-&gt;urg_data &amp; TCP_URG_VALID) {  
</span><span class='line'>    int err = 0;  
</span><span class='line'>    char c = tp-&gt;urg_data;  
</span><span class='line'>    /*标识urgent data已读*/  
</span><span class='line'>    if (!(flags &amp; MSG_PEEK))  
</span><span class='line'>        tp-&gt;urg_data = TCP_URG_READ;  
</span><span class='line'>
</span><span class='line'>    /* Read urgent data. */  
</span><span class='line'>    msg-&gt;msg_flags |= MSG_OOB;  
</span><span class='line'>
</span><span class='line'>    if (len &gt; 0) {  
</span><span class='line'>        if (!(flags &amp; MSG_TRUNC))  
</span><span class='line'>            err = memcpy_toiovec(msg-&gt;msg_iov, &amp;c, 1);  
</span><span class='line'>        len = 1;  
</span><span class='line'>    } else  
</span><span class='line'>        msg-&gt;msg_flags |= MSG_TRUNC;  
</span><span class='line'>
</span><span class='line'>    return err ? -EFAULT : len;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>if (sk-&gt;sk_state == TCP_CLOSE || (sk-&gt;sk_shutdown &amp; RCV_SHUTDOWN))  
</span><span class='line'>    return 0;  
</span><span class='line'>
</span><span class='line'>/* Fixed the recv(..., MSG_OOB) behaviour.  BSD docs and 
</span><span class='line'> * the available implementations agree in this case: 
</span><span class='line'> * this call should never block, independent of the 
</span><span class='line'> * blocking state of the socket. 
</span><span class='line'> * Mike &lt;pall@rz.uni-karlsruhe.de&gt; 
</span><span class='line'> */  
</span><span class='line'>return -EAGAIN;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>##### 用户接收普通数据的接口中的相关处理
</span><span class='line'>
</span><span class='line'>在用户接收数据的tcp_recvmsg函数中，在查找到待拷贝的skb后，首先拷贝urgent data数据前的数据，然后退出接收过程，在用户下一次执行tcp_recvmsg的时候跳过urgent data，设置urgent data读取结束
</span><span class='line'>
</span><span class='line'>查找到准备拷贝的skb后的处理：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;found_ok_skb:  
</span><span class='line'>/* Ok so how much can we use? */  
</span><span class='line'>used = skb-&gt;len - offset;  
</span><span class='line'>if (len &lt; used)  
</span><span class='line'>used = len;  
</span><span class='line'>
</span><span class='line'>/* 当前有urg_data数据*/  
</span><span class='line'>if (tp-&gt;urg_data) {  
</span><span class='line'>u32 urg_offset = tp-&gt;urg_seq - *seq;  
</span><span class='line'>/*urgent data在当前待拷贝的数据范围内*/  
</span><span class='line'>if (urg_offset &lt; used) {  
</span><span class='line'>    if (!urg_offset) {/*待拷贝的数据就是urgent data，跨过该urgent data， 
</span><span class='line'>    只给用户读取后面的数据*/  
</span><span class='line'>        if (!sock_flag(sk, SOCK_URGINLINE)) {  
</span><span class='line'>            ++*seq;  
</span><span class='line'>            urg_hole++;  
</span><span class='line'>            offset++;  
</span><span class='line'>            used--;  
</span><span class='line'>            if (!used)  
</span><span class='line'>                goto skip_copy;  
</span><span class='line'>        }  
</span><span class='line'>    }   
</span><span class='line'>    } else/*指定只拷贝urgent data数据之前的，完成后在下一次循环 
</span><span class='line'>    开始的位置，会退出循环，返回用户；下一次用户调用tcp_recvmsg 
</span><span class='line'>    就进入到上面的分支了*/  
</span><span class='line'>        used = urg_offset;  
</span><span class='line'>}  
</span><span class='line'>}   
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;skip_copy:  
</span><span class='line'>    /*用户读取的数据跨过了urgent point，设置读取结束 
</span><span class='line'>    开启fast path*/  
</span><span class='line'>    if (tp-&gt;urg_data &amp;&amp; after(tp-&gt;copied_seq, tp-&gt;urg_seq)) {  
</span><span class='line'>        tp-&gt;urg_data = 0;  
</span><span class='line'>        tcp_fast_path_check(sk);  
</span><span class='line'>    }  
</span><span class='line'>    if (used + offset &lt; skb-&gt;len)  
</span><span class='line'>        continue;  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>在接收完urgent data数据前的所有数据之后， tcp_recvmsg的以下代码片段得到执行，这段代码退出当前接收过程，提示用户有urgent data数据到来，需要用MSG_OOB来接收
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if (tp-&gt;urg_data &amp;&amp; tp-&gt;urg_seq == *seq) {  
</span><span class='line'>if (copied)  
</span><span class='line'>    break;  
</span><span class='line'>if (signal_pending(current)) {  
</span><span class='line'>    copied = timeo ? sock_intr_errno(timeo) : -EAGAIN;  
</span><span class='line'>    break;  
</span><span class='line'>}  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;后记&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;TCP的urg数据，由于定义和实现上的混乱，当前已经不建议使用，但是为了兼容之前已经已经存在的实现，该机制会长期在内核中存在，如果不了解该机制及其内核行为，有可能就很难解释一些奇怪的问题：比如某段代码不小心地造成send接口事实上设置了MSG_OOB，就会造成接收端少了一个BYTE。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[tcp三个接收队列]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/05/11/kernel-net-tcp_queue/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-05-11T15:46:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/05/11/kernel-net-tcp_queue&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://www.cnblogs.com/alreadyskb/p/4386565.html"&gt;http://www.cnblogs.com/alreadyskb/p/4386565.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;三个接收队列&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;tcp协议栈数据接收实现了三个接收缓存分别是prequeue、sk_write_queue、sk_backlog。&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;之所以需要三个接收缓存的原因如下：&lt;br/&gt;
</span><span class='line'>tcp协议栈接收到数据包时struct sock *sk 可能被进程下上文或者中断上下文占用：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  1、如果处于进程上下文sk_lock.owned=1，软中断因为sk_lock.owned=1，所以数据只能暂存在后备队列中（backlog），当进程上下文逻辑处理完成后会回调tcp_v4_do_rcv处理backlog队列作为补偿，具体看tcp_sendmsg 函数 release_sock的实现。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  2、如果当前处于中断上下文，sk_lock.owned=0，那么数据可能被放置到receive_queue或者prequeue，数据优先放置到prequeue中，如果prequeue满了则会放置到receive_queue中，理论上这里有一个队列就行了，但是TCP协议栈为什么要设计两个呢？其实是为了快点结束软中断数据处理流程，软中断处理函数中禁止了进程抢占和其他软中断发生，效率应该是很低下的，如果数据被放置到prequeue中，那么软中断流程很快就结束了，如果放置到receive_queue那么会有很复杂的逻辑需要处理。receive_queue队列的处理在软中断中，prequeue队列的处理则是在进程上下文中。总的来说就是为了提高TCP协议栈的效率。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;后备队列的处理逻辑&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1、什么时候使用后备队列&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tcp协议栈对struct sock &lt;em&gt;sk有两把锁，第一把是sk_lock.slock，第二把则是sk_lock.owned。sk_lock.slock用于获取struct sock &lt;/em&gt;sk对象的成员的修改权限；sk_lock.owned用于区分当前是进程上下文或是软中断上下文，为进程上下文时sk_lock.owned会被置1，中断上下文为0。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果是要对sk修改，首先是必须拿锁sk_lock.slock，其后是判断当前是软中断或是进程上下文，如果是进程上下文，那么接收到的skb则只能先放置到后备队列中sk_backlog中。如果是软中断上下文则可以放置到prequeue和sk_write_queue中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;代码片段如下：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>    bh_lock_sock_nested(sk);               // 获取第一把锁。
</span><span class='line'>    ret = 0;
</span><span class='line'>    if (!sock_owned_by_user(sk)) {         // 判断第二把锁，区分是处于进程上下文还是软中断上下文。
</span><span class='line'>#ifdef CONFIG_NET_DMA
</span><span class='line'>        struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>        if (!tp-&gt;ucopy.dma_chan &amp;&amp; tp-&gt;ucopy.pinned_list)
</span><span class='line'>            tp-&gt;ucopy.dma_chan = dma_find_channel(DMA_MEMCPY);
</span><span class='line'>        if (tp-&gt;ucopy.dma_chan)
</span><span class='line'>            ret = tcp_v4_do_rcv(sk, skb);
</span><span class='line'>        else
</span><span class='line'>#endif
</span><span class='line'>        {
</span><span class='line'>            if (!tcp_prequeue(sk, skb))    // 如果处于中断上下文，则优先放置到prequeue中，如果prequeue满则放置到sk_write_queue中。
</span><span class='line'>                ret = tcp_v4_do_rcv(sk, skb);
</span><span class='line'>        }
</span><span class='line'>    } else if (unlikely(sk_add_backlog(sk, skb,  // 如果是处于进程上下文则直接放置到后备队列中(sk_backlog中)。
</span><span class='line'>                        sk-&gt;sk_rcvbuf + sk-&gt;sk_sndbuf))) {
</span><span class='line'>        bh_unlock_sock(sk);
</span><span class='line'>        NET_INC_STATS_BH(net, LINUX_MIB_TCPBACKLOGDROP);
</span><span class='line'>        goto discard_and_relse;
</span><span class='line'>    }
</span><span class='line'>    bh_unlock_sock(sk);
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2、skb怎么add到sk_backlog中&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;sk_add_backlog函数用于add sbk到sk_backlog中，所以下面我们分析次函数。</span></code></pre></td></tr></table></div></figure>
    /<em> The per-socket spinlock must be held here. </em>/
    static inline __must_check int sk_add_backlog(struct sock <em>sk, struct sk_buff </em>skb,
                               unsigned int limit)
    {
        if (sk_rcvqueues_full(sk, skb, limit))  // 判断接收缓存是否已经用完了，很明显sk_backlog的缓存大小也算在了总接收缓存中。
            return -ENOBUFS;</p>

<pre><code>    __sk_add_backlog(sk, skb);              // 将skb添加到sk_backlog队列中。
    sk_extended(sk)-&gt;sk_backlog.len += skb-&gt;truesize;  // 更新sk_backlog中已经挂载的数据量。
    return 0;
}
</code></pre>

<pre><code></code></pre>

<pre><code>/* OOB backlog add */
static inline void __sk_add_backlog(struct sock *sk, struct sk_buff *skb)
{
    if (!sk-&gt;sk_backlog.tail) {   // 如果当前sk_backlog为NULL，此时head和tail都指向skb。
        sk-&gt;sk_backlog.head = sk-&gt;sk_backlog.tail = skb;
    } else {                      // 分支表示sk_backlog中已经有数据了，那么skb直接挂在tail的尾部，之后tail指针后移到skb。
        sk-&gt;sk_backlog.tail-&gt;next = skb;
        sk-&gt;sk_backlog.tail = skb;
    }
    skb-&gt;next = NULL;             // 这种很重要，在sk_backlog处理时会用来判断skb是否处理完毕。
}
</code></pre>

<pre><code>
##### 3、sk_backlog中skb的处理

很明显sk_backlog的处理必然中进程上下文进行，对于数据接收，进程上下文的接口是tcp_recvmmsg，所以sk_backlog肯定要在tcp_recvmmsg中处理。

tcp_recvmmsg sk_backlog的代码处理片段如下：
</code></pre>

<pre><code>tcp_cleanup_rbuf(sk, copied);
TCP_CHECK_TIMER(sk);
release_sock(sk);
</code></pre>

<pre><code>
release_sock(sk)涉及到sk_backlog处理。
</code></pre>

<pre><code>void release_sock(struct sock *sk)
{
    /*
    * The sk_lock has mutex_unlock() semantics:
    */
    mutex_release(&amp;sk-&gt;sk_lock.dep_map, 1, _RET_IP_);

    spin_lock_bh(&amp;sk-&gt;sk_lock.slock);   // 获取第一把锁。
    if (sk-&gt;sk_backlog.tail)            // 如果后备队列不为NULL，则开始处理。
        __release_sock(sk);

    if (proto_has_rhel_ext(sk-&gt;sk_prot, RHEL_PROTO_HAS_RELEASE_CB) &amp;&amp;
            sk-&gt;sk_prot-&gt;release_cb)
        sk-&gt;sk_prot-&gt;release_cb(sk);

    sk-&gt;sk_lock.owned = 0;              // 进成上下文skb处理完了，释放第二把锁。
    if (waitqueue_active(&amp;sk-&gt;sk_lock.wq))
        wake_up(&amp;sk-&gt;sk_lock.wq);
    spin_unlock_bh(&amp;sk-&gt;sk_lock.slock); // 释放第一把锁。
}
</code></pre>

<pre><code>
`__release_sock(sk)`是后备队列的真正处理函数。
</code></pre>

<pre><code>static void __release_sock(struct sock *sk)
{
    struct sk_buff *skb = sk-&gt;sk_backlog.head;

    do {
        sk-&gt;sk_backlog.head = sk-&gt;sk_backlog.tail = NULL;
        bh_unlock_sock(sk);

        do {
            struct sk_buff *next = skb-&gt;next;

            skb-&gt;next = NULL;
            sk_backlog_rcv(sk, skb);    // skb的处理函数，其实调用的是tcp_v4_do_rcv函数。

            /*
             * We are in process context here with softirqs
             * disabled, use cond_resched_softirq() to preempt.
             * This is safe to do because we've taken the backlog
             * queue private:
             */
            cond_resched_softirq();

            skb = next;
        } while (skb != NULL);          // 如果skb=NULL，那么说明之前的sk_backlog已经处理完了。

        bh_lock_sock(sk);
    } while ((skb = sk-&gt;sk_backlog.head) != NULL); // 在处理上一个sk_backlog时，可能被软中断中断了，建立了新的sk_backlog，新建立的sk_backlog也将一并被处理。

    /*
    * Doing the zeroing here guarantee we can not loop forever
    * while a wild producer attempts to flood us.
    */
    sk_extended(sk)-&gt;sk_backlog.len = 0;
}
</code></pre>

<p><code>``
  一开始重置sk-&gt;sk_backlog.head ，sk-&gt;sk_backlog.tail为NULL。sk_backlog是一个双链表，head指向了链表头部的skb，而tail则指向了链表尾部的skb。这里之所以置NULL head 和tail，是因为struct sk_buff *skb = sk-&gt;sk_backlog.head 提前取到了head指向的skb，之后就可以通过skb-&gt;next来获取下一个skb处理，结束的条件是skb-&gt;next=NULL，这个是在</code>__sk_add_backlog`函数中置位的，也就说对于sk_backlog的处理head和tail指针已经没有用了。</p>

<p>  为什么要置NULLsk->sk_backlog.head ，sk->sk_backlog.tail呢？第一想法是它可能要被重新使用了。那么在什么情况下会被重新使用呢？试想一下当前是在进程上下文，并且sk->sk_lock.slock没有被锁住，那是不是可能被软中断打断呢？如果被软中断打断了是不是要接收数据呢，tcp协议栈为了效率考虑肯定是要接收数据的，前面分析道这种情况的数据必须放置到后备队列中(sk_backlog)，所以可以肯定置NULL sk->sk_backlog.head ，sk->sk_backlog.tail是为了在处理上一个sk_backlog时，能重用sk_backlog，建立一条新的sk_backlog，或许有人会问为什么不直接添加到原先的sk_backlog tail末尾呢？这个问题我也没有想太清楚，或许是同步不好做吧。</p>

<h5>4、skb被处理到哪去了</h5>

<p>  很明显接收的数据最终都将被传递到应用层，在传递到应用层前必须要保证三个接收队列中的数据有序，那么这三个队列是怎么保证数据字节流有序的被递交给应用层呢？三个队列都会调用tcp_v4_do_rcv函数，prequeue和sk_backlog是在tcp_recvmsg中调用tcp_v4_do_rcv函数，也就是进程上下文中调用tcp_v4_do_rcv函数，但会local_bh_disable禁止软中断。如果在tcp_rcv_established, tcp_data_queue中如果刚好数据可以直接copy到用户空间，又会短暂开始软中断local_bh_enable。</p>

<p>  但在tcp_checksum_complete_user、tcp_rcv_established、tcp_data_queue函数中开启软中断将来容易出问题，进入软中断:softirq()+=1; local_bh_enable:softirq()-=2; 所以现在只是软中断中softirq()统计不准，进程中还是准的。但如果以后在软中断中在local_bh_enable之前给softirq()+=1了，那么就会导致软中断被打断，导致软中断执行途中被切走而且永远切不回来。tcp_checksum_complete_user被切走导致收包不成功，tcp_rcv_established、tcp_data_queue函数中如果在tp->copied_seq+=chunk后被切走就会导致tp->copied_seq>tp->rcv_nxt，那么下次收包后就有可能出现tp->copied_seq > sk_write_queue.first.end_seq, 等异常。</p>

<p>  如果仔细分析tcp_v4_do_rcv函数能发现，这个函数能保证数据有序的排列在一起，所以无论是在处理sk_backlog还是prequeue，最终都会调用tcp_v4_do_rcv函数将数据有效地插入到sk_write_queue中，最后被应用层取走。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文件socket]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/04/29/kernel-net-socket-file/"/>
    <updated>2015-04-29T17:32:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/04/29/kernel-net-socket-file</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/y_23k_bug/article/details/9993555">http://blog.csdn.net/y_23k_bug/article/details/9993555</a></p>

<h4>1. 建立socket</h4>

<pre><code>    #include&lt;sys/socket.h&gt;

    int socket(
        int domain,    //地址族的类型AF_UNIX (绑定在本地) AF_INET（绑定在网卡）
        int type,      //支持的数据格式：流SOCK_STREAM/报文SOCK_DGRAM
        int protocol); //支持的协议,建议为0

    返回值：
        成功返回文件描述符号。
        失败返回-1;
</code></pre>

<h4>2.绑定在地址上(文件目录地址)URL(Universe ResourceLocation)</h4>

<pre><code>    协议://路径/文件名
    file:///usr/bin/ls      普通文件
    http://192.168.0.72/index.php
    struct sockaddr;  地址结构体
</code></pre>

<pre><code>    #include&lt;linux/un.h&gt;

    struct sockaddr_un;   un=unix（绑定unix本地）

    struct sockaddr_un {
        sa_family_t   sun_family; /*AF_UNIX*/
        char sun_path[UNIX_PATH_MAX];
    };
</code></pre>

<pre><code>    struct sockaddr_in;   in=internet（绑定网卡）
    int bind(int fd,           //socket描述符号
        struct sockaddr *addr, //绑定地址
        socklen_tsize);        //地址长度

    返回值：
        0成功
        -1失败
</code></pre>

<h4>样例</h4>

<h5>server.c</h5>

<pre><code>    #include&lt;sys/socket.h&gt;
    #include&lt;stdio.h&gt;
    #include&lt;stdlib.h&gt;
    #include&lt;string.h&gt;
    #include&lt;unistd.h&gt;
    #include&lt;linux/un.h&gt;

    int main()
    {
        int fd; 
        int r;
        char buf[100];
        //1.建立socket
        fd = socket(AF_UNIX, SOCK_DGRAM, 0);  //AF_FILE 等同//AF_UNIX
        if (fd == -1) {
            printf("socket error:%m\n");
            exit(-1);
        }   

        //2.构造本地文件地址
        struct sockaddr_un addr = {0};
        addr.sun_family = AF_UNIX; //必须跟socket的地址族一致
        memcpy(addr.sun_path, "my.sock", strlen("my.sock"));

        //3.把socket绑定在地址上
        r = bind(fd, (struct sockaddr *)&amp;addr, sizeof(addr));
        if (r == -1) {
            printf("bind error:%m\n");
            exit(-1);
        }   

        //4.接收数据
        bzero(buf , sizeof(buf));
        r = read(fd, buf, sizeof(buf));
        buf[r] = 0;
        printf("%s\n", buf);

        //5.关闭
        close(fd);

        //6.删除socket文件
        unlink("my.sock");

        //socket文件不会自动删除，需要在程序结尾去删除该文件，否则，再次运行//A程序出错
        return 0;
    }
</code></pre>

<h5>client.c</h5>

<pre><code>    #include&lt;stdio.h&gt;
    #include&lt;stdlib.h&gt;
    #include&lt;sys/socket.h&gt;
    #include&lt;linux/un.h&gt;
    #include&lt;string.h&gt;
    #include&lt;unistd.h&gt;

    int main()
    {
        int fd; 
        int r;
        struct sockaddr_un addr = {0};
        //1.建立socket
        fd = socket(AF_UNIX, SOCK_DGRAM, 0); 

        //2.连接到指定的地址
        addr.sun_family = AF_UNIX;
        memcpy(addr.sun_path, "my.sock", strlen("my.sock"));
        r = connect(fd, (struct sockaddr*)&amp;addr, sizeof(addr));

        //3.发送数据
        write(fd, "hello!", strlen("hello!"));

        //4.关闭
        close(fd);
        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
