<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2012 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2012/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2014-11-26T18:42:02+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[两个数只出现一次]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/11/12/alg-2num-appear-once/"/>
    <updated>2012-11-12T16:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/11/12/alg-2num-appear-once</id>
    <content type="html"><![CDATA[<h4>problem</h4>

<p>一个数组，其中只有两个数只出现一次，其余数皆出现偶数次。<br/>
设计Time: O(n) 的算法得出那个只出现一次的数。</p>

<h4>answer</h4>

<p>再因为a和b不等，那么a<sup>b</sup>必然不为0。<br/>
那么a<sup>b</sup>这个数上面必然能够找到一个二进制位是1<br/>
在这个二进制位上，a和b不等。<br/>
根据这个二进制位，将各元素中在这位上为1的分派到左边，为0的分派到右边，形成两个子数组。</p>

<p>可以证明，<br/>
1）这两个数组分别包含a和b。<br/>
2）每个数组中除了a或b之外的所有元素都是成对出现的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[统计git提交行数的脚本]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/16/tools-git-count-lines/"/>
    <updated>2012-10-16T14:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/16/tools-git-count-lines</id>
    <content type="html"><![CDATA[<p>可以保存为count.sh运行 ./count.sh your_name
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>insert=0
</span><span class='line'>delete=0
</span><span class='line'>git log&ndash;author=$1&ndash;shortstat&ndash;pretty=format:&ldquo;&rdquo;|sed/^$/d &gt;.tmp.count&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;whilereadline ;do
</span><span class='line'>current=`echo$line|awk-F',''{printf $2}'|awk'{printf $1}'`
</span><span class='line'>insert=`expr$insert+ $current`
</span><span class='line'>current=`echo$line|awk-F',''{printf $3}'|awk'{printf $1}'`
</span><span class='line'>delete=`expr$delete+ $current`
</span><span class='line'>done&lt;.tmp.count
</span><span class='line'>
</span><span class='line'>rm .tmp.count
</span><span class='line'>echo$1$insertinsertions, $deletedeletions
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[git建库，配置颜色分支名]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2012/05/01/tools-git-base2/"/&gt;
</span><span class='line'>&lt;updated&gt;2012-05-01T17:00:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2012/05/01/tools-git-base2&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h4&gt;建一个库&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;服务器&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;mkdir allgit
</span><span class='line'>cd allgit
</span><span class='line'>git --bare init
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;客户端&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;git clone username@192.168.1.2:/home/abc/allgit allgit
</span><span class='line'>cd allgit
</span><span class='line'>...
</span><span class='line'>git push origin master // 第一次的时候用， 以后直接用 git push
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;配置颜色分支名&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;git 配色&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/home/username/.gitconfig
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[color]
</span><span class='line'>branch = auto
</span><span class='line'>status = auto
</span><span class='line'>diff = auto
</span><span class='line'>log = auto
</span><span class='line'>grep = auto
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;bash 显示分支名&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/home/username/.bash_profile  或 /home/username/.bashrc ？</span></code></pre></td></tr></table></div></figure>
    function parse_git_branch {
      git branch &ndash;no-color 2> /dev/null | sed -e &lsquo;/^[^<em>]/d&rsquo; -e &rsquo;s/</em> (.*)/(\1)/&lsquo;
    }</p>

<pre><code>function proml {
  local YELLOW="\[\033[01;32m\]"
  local WHITE="\[\033[01;00m\]"
#  local YELLOW="\[\033[0;33m\]"
#  local WHITE="\[\033[1;37m\]"
#  local cyan="\[\033[1;36m\]"
  case $TERM in
    xterm*)
    TITLEBAR='\[\033]0;\u@\h:\w\007\]'
    ;;
    *)
    TITLEBAR=""
    ;;
  esac
PS1="${TITLEBAR}\
$WHITE\u@\h:\w$YELLOW\$(parse_git_branch)\
$WHITE\$ "
PS2='&gt; '
PS4='+ '
}
proml
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git remote管理远程库]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/03/28/tools-git-base3/"/>
    <updated>2012-03-28T21:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/03/28/tools-git-base3</id>
    <content type="html"><![CDATA[<h4>查看当前的远程库</h4>

<p>要查看当前配置有哪些远程仓库,可以用 git remote 命令,它会列出每个远程库的简短名字.在克隆完某个项目后,至少可以看到一个名为 origin 的远程库,Git 默认使用这个名字来标识你所克隆的原始仓库:
<code>
    $ git clone git://github.com/schacon/ticgit.git
    $ cd ticgit
    $ git remote
        remote也可以加上 -v 选项(译注:此为 –verbose 的简写,取首字母),显示对应的克隆地址:
    $ git remote -v
        origin git://github.com/schacon/ticgit.git
        如果有多个远程仓库,此命令将全部列出.
</code>
这样一来,我就可以非常轻松地从这些用户的仓库中,拉取他们的提交到本地.</p>

<h4>添加远程仓库</h4>

<p>要添加一个新的远程仓库,可以指定一个简单的名字,以便将来引用,运行<code>git remote add [shortname] [url]</code>
<code>
    $ git remote
        origin
    $ git remote add pb git://github.com/paulboone/ticgit.git
    $ git remote -v
        origin git://github.com/schacon/ticgit.git
        pb git://github.com/paulboone/ticgit.git
        现在可以用字串 pb 指代对应的仓库地址了.
        比如说,要抓取所有 Paul 有的,但本地仓库没有的信息,可以运行 git fetch pb
    $ git fetch pb
        现在,Paul 的主干分支(master)已经完全可以在本地访问了,
        对应的名字是 pb/master,你可以将它合并到自己的某个分支,
        或者切换到这个分支,看看有些什么有趣的更新.
</code></p>

<h4>从远程仓库抓取数据</h4>

<p>正如之前所看到的,可以用下面的命令从远程仓库抓取数据到本地:
<code>$ git fetch [remote-name]</code>此命令会到远程仓库中拉取所有你本地仓库中还没有的数据.运行完成后,你就可以在本地访问该远程仓库中的所有分支,将其中某个分支合并到本地,或者只是取出某个分支,一探究竟.</p>

<p>如果是克隆了一个仓库,此命令会自动将远程仓库归于 origin 名下.所以git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新(或是上次 fetch 以来别人提交的更新).有一点很重要,需要记住,fetch 命令只是将远端的数据拉到本地仓库,并不自动合并到当前工作分支,只有当你确实准备好了,才能手工合并.
说明:<br/>
    事先需要创建好远程的仓库,然后执行<br/>
<code>
    git remote add [仓库名] [仓库url]  
    git fetch [远程仓库名]  
    即可抓取到远程仓库数据到本地,再用  
    git merge remotes/[仓库名]/master
    就可以将远程仓库merge到本地当前branch.
</code>
这种分支方式比较适合独立-整合开发,即各自开发测试好后 再整合在一起.</p>

<h4>远程仓库的删除和重命名</h4>

<p>在Git中可以用<code>git remote rename</code>命令修改某个远程仓库的简短名称,比如想把 pb 改成 paul,可以这么运行:
<code>
    $ git remote rename pb paul
    $ git remote
        origin
</code>
paul注意,对远程仓库的重命名,也会使对应的分支名称发生变化,原来的 pb/master 分支现在成了paul/master.
碰到远端仓库服务器迁移,或者原来的克隆镜像不再使用,又或者某个参与者不再贡献代码,那么需要移除对应的远端仓库,可以运行 git remote rm 命令:
<code>
    $ git remote rm paul
    $ git remote
        origin
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim基本操作]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/03/21/tools-vim-base/"/>
    <updated>2012-03-21T14:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/03/21/tools-vim-base</id>
    <content type="html"><![CDATA[<h4>简单配置</h4>

<pre><code>set tabstop=8
set shiftwidth=8
set autoindent
set cindent
set nu
</code></pre>

<p>恢复文件关闭之前光标的位置<br/>
Vim的全局配置/etc/vim/vimrc，被注释的这么几行：取消注释，g后面的'改成<code>，改好如下
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if has("autocmd")
</span><span class='line'> au BufReadPost * if line("'\"") &gt; 1 &amp;&amp; line("'\"") &lt;= line("$") | exe "normal! g&lt;/code&gt;\&ldquo;&rdquo; | endif
</span><span class='line'>endif</span></code></pre></td></tr></table></div></figure></p>

<h4>1. Vim的几种模式</h4>

<p>Vim提供了诸多模式可供使用，不同模式带有不同的命令功能。</p>

<h5>普通模式</h5>

<p>启动后的默认模式。普通模式下，用户的按键被解释为各种Vim内置命令(如移动光标，删除/查找/替换文字等)。Vim强大的功能大部分即来自普通模式。在普通模式下，按键'a'或'i等即可切换至插入模式。在其他模式下，按键'ESC'即可切换到普通模式。</p>

<h5>插入模式</h5>

<p>插入模式，可以理解成编辑模式。在此模式下，用户的大部分按键操作都会被写入到文本缓冲区中，从而影响到正在编辑的文本（在执行写操作前，这些更改只限于对缓冲区中内容，并未写入到磁盘文件中）。</p>

<h5>可视模式</h5>

<p>类似于普通模式，但光标的移动操作会选中光标所经过的文本内容并高亮显示。执行非移动命令时，命令仅执行于高亮选中部分。命令模式下，按键'v'即切换至可视模式。</p>

<h5>其他模式</h5>

<h6>命令行模式执行Vim内置命令或调用外部程序。普通模式下，输入字符':&lsquo;进入命令模式；ESC键返回普通模式，或命令执行完成后自动返回普通模式。</h6>

<h6>替换模式相当于普通编辑器的覆盖编辑模式。普通模式下，输入字符'R'进入命令模式；ESC键返回普通模式。</h6>

<h5>块选择模式普通模式下，与可视模式相似，但选择范围为块而非以行为单位。输入ctrl-v进入；ESC键返加。</h5>

<pre><code>...
</code></pre>

<h4>2. 进入Vim</h4>

<p>通过命令行启动Vim时，可以指定待编辑文件名，并通过附加选项指定文件打开后光标所在位置。<br/>
快捷键功能vim filename打开文件,如文件不存在则创建vim +n filename打开文件，并将光标置于第n行行首vim + filename打开文件，并将光标置于最后一行行首</p>

<h4>3. 文件操作</h4>

<p>在Vim命令模式(行)中，可以通过快捷命令进入打开文件/文件保存/退出等操作。<br/>
快捷键功能
<code>
:e  filename使用新创建缓冲区打开文件filename
:w保存文件,如文件为只读，提示失败
:w!强制保存文件，即使文件为只读(是否成功取决于用户对文件权限)
:w filename将当前缓冲区内容保存为文件filename
:n1, n2, filename将n1到n2行内容保存为文件filename
:q退出当前窗口。如文件内容已改动提示失败
:q!退出,即使文件内容已改动
:wq保存后退出保存后退出
:r filename将filename内容读取到当前光标位置ZZ退出。如有未保存内容，保存后退出
</code>
为了防止因程序异常中断而导致正在编辑的内容丢失，Vim打开文件后会自动创建一个.[yourfilename].swp的临时文件用于临时存放正在编辑的内容。如程序异常中止，下一次启动vim编辑文件时，vim会提示发现临时文件，询问用户如何处理，中断当前操作(Abort), 使用临时文件恢复(Recover)，删除临时文件(Delete)等。</p>

<h4>4. 多文件编辑</h4>

<h5>Vim支持同时对多个文件进行编辑。</h5>

<p>普通多文件编辑: vim filename1 filename2  同时打开两个文件<br/>
快捷键功能
<code>
:bn跳转至下一缓冲区(文件)(最后一个-&gt;第一个)
:bN跳转到上一缓冲区(文件)(第一个-&gt;最后一个)
:bd关闭当前缓冲区(文件)
:n,:N跳转至下一文件,如当前文件为最后一个,提示错误
:N跳转至上一文件,如当前文件为第一个,提示错误
:next, :previous跳转至下/上一文件:wnext,
:wprevious保存当前文件并跳转至下/上一文件
:last, :first跳转至最后一个/第一个文件
:files列出当前已打开文件
:args给出进入vim时命令行参数；当前正在编辑文件名用"[]"列出
</code></p>

<h6>使用分割窗口编辑多文件</h6>

<p>快捷键功能
<code>
ctrl-w s水平分割窗口
ctrl-w v垂直分割窗口
ctrl-w w切换至另一窗口
ctrl-w ←切换至左侧窗口
ctrl-w ↑切换至上方窗口
ctrl-w →切换至右侧窗口
ctrl-w ↓切换至下方窗口
ctrl-w q退出当前窗口
:sp filename分割窗口并打开文件filename
</code></p>

<h6>标签式式多文件编辑: vim -p filename1 filename2 同时打开两个文件</h6>

<p>快捷键功能
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:tabnew创建新标签gt,
</span><span class='line'>:tabn切换至下一个标签gT
</span><span class='line'>:tabp切换至上一个标签
</span><span class='line'>:tabc关闭当前标签
</span><span class='line'>:tabr切换至第一个标签
</span><span class='line'>:tabl切换至最后一个标签
</span><span class='line'>:tabm nn为数字，切换至第n个标签。默认标签编号从0开始
</span><span class='line'>:tabe  filename在当前标签后打开新标签，并加载文件filename&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;5. 光标移动命令&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;##### 在普通模式下，除键盘上的方向键外，Vim还通过众多快捷键提供了种类繁多的光标移动命令。
</span><span class='line'>基本跳转,快捷键功能
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;h,j,k,l←,↓,↑,→space,backspace(空格键,回退键)向后一位/向前一位0(数字0)跳转至行首^本行第一个非空白字符$行尾</span></code></pre></td></tr></table></div></figure></p>

<h5>行跳转</h5>

<p>快捷键功能
<code>
&lt;Enter&gt;下一行行首
+,-下移/上移一行
n+,n-(n为数字)下移/上移n行
G最后一行第一个非空字符
nG(n为数字)第n行第一个非空字符
gg第一行第一个非空字符
`.跳转至上一次修改处
`"跳转至上一次离开文件时光标所在处
</code></p>

<h5>句/段/块跳转</h5>

<p>快捷键功能<br/>
%如当前光标处为括号，跳转到匹配处),(下一句/上一句句首},{下一段/上一段段首</p>

<h5>单词跳转</h5>

<p>快捷键功能
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>w下一单词
</span><span class='line'>/标点处
</span><span class='line'>W下一单词处
</span><span class='line'>e单词词尾
</span><span class='line'>/标点E单词词尾b上一单词词首
</span><span class='line'>/标点B上一单词词首处
</span><span class='line'>*读取光标所在处单词并跳转至此单词的下一位置&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;读取光标所在处单词并跳转至此单词的上一位置&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;##### 书签跳转
</span><span class='line'>快捷键功能
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ma(a为任意字母)标记当前位置为书签a
</span><span class='line'>`a(a为任意字母)跳转至书签a处</span></code></pre></td></tr></table></div></figure></p>

<h5>滚屏操作</h5>

<p>快捷键功能
<code>
ctrl-f,ctrl-b向下一页/屏(PageDown)，向上一页/屏(PageUp)
ctrl-d,ctrl-u向下半页/屏, 向上半页/屏
H,M,L屏幕最上方一行/中间行/最后一行行首第一个非空字符
ctrl-e/ctrl-E向下滚屏一行，光标保持在当前行(或屏幕首行)的行首(e)/行尾(E)
ctrl-y/ctrl-Y向上滚屏一行，光标保持在当前行(或屏幕未行)的行首(y)/行尾(Y)
nz&lt;enter&gt;(n为数字,&lt;enter&gt;为回车键)将第n行显示在屏幕首行位置;如未指定n，则默认为当前行nz.(n为数字)将第n行显示在显屏幕中间位置;如未指定n,则默认为当前行nz-(n为数字)将第n行显示在屏幕最后一行位置;如未指定n,则默认为当前行
</code></p>

<h5>说明：</h5>

<p>w(ord)：单词，大小写的英文字母，连字符。单词的边界通常是空白符(空格/制表)，标点符号，换行符等。<br/>
W(ord)：广义上的单词，包括英文字母及其他可显示字符。词的边界通常是空白符,换行符等不可见字符。</p>

<h4>6. 插入模式</h4>

<p>从普通模式，通过i/I/a/A/o/O都可以进入插入编辑状态，不同字母进入的区别仅在于进入插入模式后的光标位置。</p>

<p>快捷键功能i光标位置保持不变I光标移至本行第一个非空字符处a光标后移一位A光标移至本行行尾o在当前行之下创建新行并将光标移至新行行首O在当前行之上创建新行并将光标移至新行行首ESC返回普通模式</p>

<h4>7. 普通模式下的一般编辑</h4>

<p>普通模式下，也可以通过快捷命令完成很多编辑操作。</p>

<p>快捷键功能
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>r替换当前光标处的一个字符,替换完成后返回普通模式
</span><span class='line'>R替换当前光标处开始的字符串,
</span><span class='line'>ESC键结束替换返回普通模式
</span><span class='line'>J合并当前行和下一行(删除当前行结尾处换行符号)
</span><span class='line'>cc,S清空当前行后进入编辑模式
</span><span class='line'>cw删除当前单词后进入编辑模式
</span><span class='line'>c$,C删除光标至行尾处内容后进入编辑模式
</span><span class='line'>s删除光标所在处字符后进入编辑模式
</span><span class='line'>S删除当前行内容后进入编辑模式
</span><span class='line'>xp交换光标所在处及其后位置处字符
</span><span class='line'>u撤消上一次操作
</span><span class='line'>ctrl-r重复上一次操作.重复上一次命令
</span><span class='line'>～变换光标所在处字符大小
</span><span class='line'>g~iw变换光标所在处单词大小写
</span><span class='line'>gUiw将光标所在处单词变换为大写
</span><span class='line'>guiw将光标所在处单词变换为小写&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;将当前行向右缩进一列(Tab宽度)
</span><span class='line'>&lt;&lt;减少当前行缩进(Tab宽度)
</span><span class='line'>==自动缩进当前行</span></code></pre></td></tr></table></div></figure></p>

<h4>8. 普通模式下的复制/粘贴/删除</h4>

<p>Vim普通模式下支持以行/词/块/字符等作单作进行复制粘贴操作。Vim中的删除，并不会直接丢弃掉删除掉的内容，而是会将这部分内容缓存在粘贴板中，可以用在随后使用，类似于其他编辑器的剪切功能。</p></blockquote></blockquote>

<p>快捷键功能
<code>
dd删除当前行
dw删除单词从光标当前位置起右侧部分
x删除当前字符X删除光标前一位字符
D删除光标位置起本行右侧部分
yy复制当前行
nyy(n为数字)从当前行开始起复制n行
yw复制单词光标当前位置起右侧部分
y$复制光标位置起至行尾部分内容
p将粘贴板中内容复制到光标之后;如果粘贴板中内容包含行,则复制至光标所在行之下P将粘贴板中内容复制到光标之前;如果粘贴板中内容包含行,则复制至光标所在行之上
</code></p>

<h4>9. 可视模式下的一些操作</h4>

<p>可视模式与普通模式相近，但可以方便地高度选取文件的某一部分。</p>

<h5>普通模式下，</h5>

<p>&lsquo;v'进入可视模式;<br/>
'V'进入可视行模式，以整行为操作单位;<br/>
ctrl-v进入块可视模式，以块为操作单行;<br/>
ESC键可返回普通模式</p>

<h5>可视模式中，内容的选取更加灵活，因此使用起来也更方便。</h5>

<p>快捷键功能
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>o移动光标至标记区域的另一边
</span><span class='line'>O移动光标至标记区域的另一端点
</span><span class='line'>u,U将标记区域内容更改为小写/大写
</span><span class='line'>aw标记光标所在位置处单词(以标点符号或空白符号为界)
</span><span class='line'>aW标记光标所在位置处单词(包含标点符号)
</span><span class='line'>ab标记光标所在位置处所在(圆)括号范围内容(包括括号)
</span><span class='line'>aB标记光标所在位置处所在(花)括号范围内容(包括括号)
</span><span class='line'>ib标记光标所在位置处所在(圆)括号范围内容(不包括括号)
</span><span class='line'>iB标记光标所在位置处所在(花)括号范围内容(不包括括号)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;p&gt;将选取内容右移(Tab)
</span><span class='line'>&lt;将选取内容左移1Tab
</span><span class='line'>y复制选取内容d删除选取内容
</span><span class='line'>~将选取内容大小写求反</span></code></pre></td></tr></table></div></figure></p>

<h4>10. 查找和替换</h4>

<p>结合命令行模式和普通模式，可以完成各种查找和替换操作。</p>

<h5>模式查找</h5>

<p>快捷键功能/pattern(pattern为匹配模式)从光标位置向后查找?pattern(pattern为匹配模式)从光标位置向前查找n重复上一次查找命令N反方向执行上一次查找命令</p></blockquote>

<p>行内字符查找，快捷键功能
<code>
fx,Fx(x为任意字符)从光标所在位置起查找本行内字符x所在的下一处(f)/上一处(F)位置
tx(x为任意字符)从光标所在位置起查找本行内字符x所在的下一处位置,如成功则将光标置于找到位置的上一个字符处
Tx(x为任意字符)从光标所在位置起查找本行内字符x所在的上一处位置,如成功则将光标置于找到位置的下一个字符处;
重复上一次fx/FX/tx/Tx操作
</code></p>

<h5>替换操作</h5>

<p>快捷键功能:
<code>
s/old/new(old为欲替换的模式;new为要替换为的模式;替换第一个匹配处后结束
:s/old/new/g在本行范围中替换.g指明作用域为本行)在本行范围中替换
:s/old/new/gc(c:confirm)行内替换,每处替换前需要确认
:%s/old/new%表示全文范围
:m,ns/old/newm/n为数字,表示替换范围为第m行到第n行；'.'可用来表示当前行,'$'可用来表示最后一行
</code></p>
]]></content>
  </entry>
  
</feed>
